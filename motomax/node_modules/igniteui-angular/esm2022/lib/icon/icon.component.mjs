import { Component, HostBinding, Input, booleanAttribute, } from "@angular/core";
import { filter, takeUntil } from "rxjs/operators";
import { Subject } from "rxjs";
import { NgIf, NgTemplateOutlet } from "@angular/common";
import * as i0 from "@angular/core";
import * as i1 from "./icon.service";
import * as i2 from "../services/theme/theme.service";
/**
 * Icon provides a way to include material icons to markup
 *
 * @igxModule IgxIconModule
 *
 * @igxTheme igx-icon-theme
 *
 * @igxKeywords icon, picture
 *
 * @igxGroup Display
 *
 * @remarks
 *
 * The Ignite UI Icon makes it easy for developers to include material design icons directly in their markup. The icons
 * support different icon families and can be marked as active or disabled using the `active` property. This will change the appearance
 * of the icon.
 *
 * @example
 * ```html
 * <igx-icon family="filter-icons" active="true">home</igx-icon>
 * ```
 */
export class IgxIconComponent {
    get elementClasses() {
        const icon = Array.from(this._iconClasses).join(" ");
        const user = Array.from(this._userClasses).join(" ");
        return `igx-icon ${icon} ${user}`.trim();
    }
    addIconClass(className) {
        this._iconClasses.add(className);
    }
    clearIconClasses() {
        this._iconClasses.clear();
    }
    /**
     *  An accessor that returns inactive property.
     *
     * @example
     * ```typescript
     * @ViewChild("MyIcon")
     * public icon: IgxIconComponent;
     * ngAfterViewInit() {
     *    let iconActive = this.icon.getInactive;
     * }
     * ```
     */
    get getInactive() {
        return !this.active;
    }
    constructor(el, iconService, themeService, ref) {
        this.el = el;
        this.iconService = iconService;
        this.themeService = themeService;
        this.ref = ref;
        this._destroy$ = new Subject();
        this._userClasses = new Set();
        this._iconClasses = new Set();
        /**
         *  This allows you to disable the `aria-hidden` attribute. By default it's applied.
         *
         * @example
         * ```typescript
         * @ViewChild("MyIcon") public icon: IgxIconComponent;
         * constructor(private cdRef:ChangeDetectorRef) {}
         * ngAfterViewInit() {
         *     this.icon.ariaHidden = false;
         *     this.cdRef.detectChanges();
         * }
         * ```
         */
        this.ariaHidden = true;
        /**
         * An @Input property that allows you to disable the `active` property. By default it's applied.
         *
         * @example
         * ```html
         * <igx-icon [active]="false">settings</igx-icon>
         * ```
         */
        this.active = true;
        this.family = this.iconService.defaultFamily.name;
        this.iconService.setRefsByTheme(this.themeService.globalTheme);
        this.iconService.iconLoaded
            .pipe(filter((e) => e.name === this.name && e.family === this.family), takeUntil(this._destroy$))
            .subscribe(() => {
            this.setIcon();
            this.ref.detectChanges();
        });
    }
    /**
     * @hidden
     * @internal
     */
    ngOnInit() {
        this.setIcon();
    }
    /**
     * @hidden
     * @internal
     */
    ngOnChanges() {
        this.setIcon();
    }
    /**
     * @hidden
     * @internal
     */
    ngOnDestroy() {
        this._destroy$.next();
        this._destroy$.complete();
    }
    get iconRef() {
        return this._iconRef;
    }
    set iconRef(ref) {
        this._iconRef = ref;
    }
    /**
     *  An accessor that returns the value of the family property.
     *
     * @example
     * ```typescript
     *  @ViewChild("MyIcon")
     * public icon: IgxIconComponent;
     * ngAfterViewInit() {
     *    let iconFamily = this.icon.getFamily;
     * }
     * ```
     */
    get getFamily() {
        return this.iconRef.family;
    }
    /**
     *  An accessor that returns the value of the active property.
     *
     * @example
     * ```typescript
     * @ViewChild("MyIcon")
     * public icon: IgxIconComponent;
     * ngAfterViewInit() {
     *    let iconActive = this.icon.getActive;
     * }
     * ```
     */
    get getActive() {
        return this.active;
    }
    /**
     * An accessor that returns the value of the iconName property.
     *
     * @example
     * ```typescript
     * @ViewChild("MyIcon")
     * public icon: IgxIconComponent;
     * ngAfterViewInit() {
     *    let name = this.icon.getName;
     * }
     * ```
     */
    get getName() {
        return this.iconRef.name;
    }
    /**
     *  An accessor that returns the underlying SVG image as SafeHtml.
     *
     * @example
     * ```typescript
     * @ViewChild("MyIcon")
     * public icon: IgxIconComponent;
     * ngAfterViewInit() {
     *    let svg: SafeHtml = this.icon.getSvg;
     * }
     * ```
     */
    get getSvg() {
        const { name, family } = this.iconRef;
        if (this.iconService.isSvgIconCached(name, family)) {
            return this.iconService.getSvgIcon(name, family);
        }
        return null;
    }
    /**
     * @hidden
     * @internal
     */
    setIcon() {
        this.iconRef = this.iconService.getIconRef(this.name, this.family);
        this.clearIconClasses();
        const { name, type, className } = this.iconRef;
        if (name && type === "font") {
            this.addIconClass(name);
        }
        this.addIconClass(className);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxIconComponent, deps: [{ token: i0.ElementRef }, { token: i1.IgxIconService }, { token: i2.ThemeService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "17.0.0", version: "18.2.4", type: IgxIconComponent, isStandalone: true, selector: "igx-icon", inputs: { family: "family", name: "name", active: ["active", "active", booleanAttribute] }, host: { properties: { "class": "this.elementClasses", "attr.aria-hidden": "this.ariaHidden", "class.igx-icon--inactive": "this.getInactive" } }, usesOnChanges: true, ngImport: i0, template: "<!-- This is only here for backwards compatibility in case  -->\n<!-- ligatures are used and the name is provided as content -->\n@if (!iconRef.name) {\n    <ng-content></ng-content>\n}\n\n@switch (iconRef.type) {\n    @case (\"liga\") {{{ iconRef.name }}}\n\n    @case (\"svg\") {\n        <div [innerHTML]=\"getSvg\"></div>\n    }\n}\n" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxIconComponent, decorators: [{
            type: Component,
            args: [{ selector: "igx-icon", standalone: true, imports: [NgTemplateOutlet, NgIf], template: "<!-- This is only here for backwards compatibility in case  -->\n<!-- ligatures are used and the name is provided as content -->\n@if (!iconRef.name) {\n    <ng-content></ng-content>\n}\n\n@switch (iconRef.type) {\n    @case (\"liga\") {{{ iconRef.name }}}\n\n    @case (\"svg\") {\n        <div [innerHTML]=\"getSvg\"></div>\n    }\n}\n" }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.IgxIconService }, { type: i2.ThemeService }, { type: i0.ChangeDetectorRef }], propDecorators: { elementClasses: [{
                type: HostBinding,
                args: ["class"]
            }], ariaHidden: [{
                type: HostBinding,
                args: ["attr.aria-hidden"]
            }], getInactive: [{
                type: HostBinding,
                args: ["class.igx-icon--inactive"]
            }], family: [{
                type: Input,
                args: ["family"]
            }], name: [{
                type: Input,
                args: ["name"]
            }], active: [{
                type: Input,
                args: [{ alias: "active", transform: booleanAttribute }]
            }] } });
//# sourceMappingURL=data:application/json;base64,