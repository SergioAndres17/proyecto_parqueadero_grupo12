import { Injectable, SecurityContext, Inject, Optional } from "@angular/core";
import { DOCUMENT } from "@angular/common";
import { Subject } from "rxjs";
import { iconReferences } from './icon.references';
import { IndigoIcons } from "./icons.indigo";
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
import * as i2 from "@angular/common/http";
import * as i3 from "../core/utils";
/**
 * **Ignite UI for Angular Icon Service** -
 *
 * The Ignite UI Icon Service makes it easy for developers to include custom SVG images and use them with IgxIconComponent.
 * In addition it could be used to associate a custom class to be applied on IgxIconComponent according to given font-family.
 *
 * Example:
 * ```typescript
 * this.iconService.setFamily('material', { className: 'material-icons', type: 'font' });
 * this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');
 * ```
 */
export class IgxIconService {
    constructor(_sanitizer, _httpClient, _platformUtil, document) {
        this._sanitizer = _sanitizer;
        this._httpClient = _httpClient;
        this._platformUtil = _platformUtil;
        this.document = document;
        this._defaultFamily = {
            name: "material",
            meta: { className: "material-icons", type: "liga" },
        };
        this._iconRefs = new Map();
        this._families = new Map();
        this._cachedIcons = new Map();
        this._iconLoaded = new Subject();
        this.iconLoaded = this._iconLoaded.asObservable();
        this.setFamily(this._defaultFamily.name, this._defaultFamily.meta);
        if (this._platformUtil?.isBrowser) {
            this._domParser = new DOMParser();
            for (const [name, svg] of IndigoIcons) {
                this.addSvgIconFromText(name, svg.value, `internal_${svg.fontSet}`, true);
            }
        }
    }
    /**
     *  Returns the default font-family.
     * ```typescript
     *   const defaultFamily = this.iconService.defaultFamily;
     * ```
     */
    get defaultFamily() {
        return this._defaultFamily;
    }
    /**
     *  Sets the default font-family.
     * ```typescript
     *   this.iconService.defaultFamily = 'svg-flags';
     * ```
     */
    set defaultFamily(family) {
        this._defaultFamily = family;
        this.setFamily(this._defaultFamily.name, this._defaultFamily.meta);
    }
    /**
     *  Registers a custom class to be applied to IgxIconComponent for a given font-family.
     * ```typescript
     *   this.iconService.registerFamilyAlias('material', 'material-icons');
     * ```
     * @deprecated in version 18.1.0. Use `setFamily` instead.
     */
    registerFamilyAlias(alias, className = alias, type = "font") {
        this.setFamily(alias, { className, type });
        return this;
    }
    /**
     *  Returns the custom class, if any, associated to a given font-family.
     * ```typescript
     *   const familyClass = this.iconService.familyClassName('material');
     * ```
     */
    familyClassName(alias) {
        return this._families.get(alias)?.className || alias;
    }
    /** @hidden @internal */
    familyType(alias) {
        return this._families.get(alias)?.type;
    }
    /** @hidden @internal */
    setRefsByTheme(theme) {
        if (this.theme !== theme) {
            this.theme = theme;
            for (const { alias, target } of iconReferences) {
                const icon = target.get(theme) ?? target.get('default');
                this.addIconRef(alias.name, alias.family, icon);
            }
        }
    }
    /**
     *  Creates a family to className relationship that is applied to the IgxIconComponent
     *   whenever that family name is used.
     * ```typescript
     *   this.iconService.setFamily('material', { className: 'material-icons', type: 'liga' });
     * ```
     */
    setFamily(name, meta) {
        this._families.set(name, meta);
    }
    /**
     *  Adds an icon reference meta for an icon in a meta family.
     *  Executes only if no icon reference is found.
     * ```typescript
     *   this.iconService.addIconRef('aruba', 'default', { name: 'aruba', family: 'svg-flags' });
     * ```
     */
    addIconRef(name, family, icon) {
        const iconRef = this._iconRefs.get(family)?.get(name);
        if (!iconRef) {
            this.setIconRef(name, family, icon);
        }
    }
    /**
     *  Similar to addIconRef, but always sets the icon reference meta for an icon in a meta family.
     * ```typescript
     *   this.iconService.setIconRef('aruba', 'default', { name: 'aruba', family: 'svg-flags' });
     * ```
     */
    setIconRef(name, family, icon) {
        let familyRef = this._iconRefs.get(family);
        if (!familyRef) {
            familyRef = new Map();
            this._iconRefs.set(family, familyRef);
        }
        const familyType = this.familyType(icon?.family);
        familyRef.set(name, { ...icon, type: icon.type ?? familyType });
        this._iconLoaded.next({ name, family });
    }
    /**
     *  Returns the icon reference meta for an icon in a given family.
     * ```typescript
     *   const iconRef = this.iconService.getIconRef('aruba', 'default');
     * ```
     */
    getIconRef(name, family) {
        const icon = this._iconRefs.get(family)?.get(name);
        const iconFamily = icon?.family ?? family;
        const _name = icon?.name ?? name;
        const className = this.familyClassName(iconFamily);
        const prefix = this._families.get(iconFamily)?.prefix;
        // Handle name prefixes
        let iconName = _name;
        if (iconName && prefix) {
            iconName = _name.includes(prefix) ? _name : `${prefix}${_name}`;
        }
        const cached = this.isSvgIconCached(iconName, iconFamily);
        const type = cached ? "svg" : icon?.type ?? this.familyType(iconFamily);
        return {
            className,
            type,
            name: iconName,
            family: iconFamily,
        };
    }
    getOrCreateSvgFamily(family) {
        if (!this._families.has(family)) {
            this._families.set(family, { className: family, type: "svg" });
        }
        return this._families.get(family);
    }
    /**
     *  Adds an SVG image to the cache. SVG source is an url.
     * ```typescript
     *   this.iconService.addSvgIcon('aruba', '/assets/svg/country_flags/aruba.svg', 'svg-flags');
     * ```
     */
    addSvgIcon(name, url, family = this._defaultFamily.name, stripMeta = false) {
        if (name && url) {
            const safeUrl = this._sanitizer.bypassSecurityTrustResourceUrl(url);
            if (!safeUrl) {
                throw new Error(`The provided URL could not be processed as trusted resource URL by Angular's DomSanitizer: "${url}".`);
            }
            const sanitizedUrl = this._sanitizer.sanitize(SecurityContext.RESOURCE_URL, safeUrl);
            if (!sanitizedUrl) {
                throw new Error(`The URL provided was not trusted as a resource URL: "${url}".`);
            }
            if (!this.isSvgIconCached(name, family)) {
                this.getOrCreateSvgFamily(family);
                this.fetchSvg(url).subscribe((res) => {
                    this.cacheSvgIcon(name, res, family, stripMeta);
                });
            }
        }
        else {
            throw new Error("You should provide at least `name` and `url` to register an svg icon.");
        }
    }
    /**
     *  Adds an SVG image to the cache. SVG source is its text.
     * ```typescript
     *   this.iconService.addSvgIconFromText('simple', '<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 200 200">
     *   <path d="M74 74h54v54H74" /></svg>', 'svg-flags');
     * ```
     */
    addSvgIconFromText(name, iconText, family = this._defaultFamily.name, stripMeta = false) {
        if (name && iconText) {
            if (this.isSvgIconCached(name, family)) {
                return;
            }
            this.getOrCreateSvgFamily(family);
            this.cacheSvgIcon(name, iconText, family, stripMeta);
        }
        else {
            throw new Error("You should provide at least `name` and `iconText` to register an svg icon.");
        }
    }
    /**
     *  Returns whether a given SVG image is present in the cache.
     * ```typescript
     *   const isSvgCached = this.iconService.isSvgIconCached('aruba', 'svg-flags');
     * ```
     */
    isSvgIconCached(name, family) {
        if (this._cachedIcons.has(family)) {
            const familyRegistry = this._cachedIcons.get(family);
            return familyRegistry.has(name);
        }
        return false;
    }
    /**
     *  Returns the cached SVG image as string.
     * ```typescript
     *   const svgIcon = this.iconService.getSvgIcon('aruba', 'svg-flags');
     * ```
     */
    getSvgIcon(name, family) {
        return this._cachedIcons.get(family)?.get(name);
    }
    /**
     * @hidden
     */
    fetchSvg(url) {
        const req = this._httpClient.get(url, { responseType: "text" });
        return req;
    }
    /**
     * @hidden
     */
    cacheSvgIcon(name, value, family = this._defaultFamily.name, stripMeta) {
        if (this._platformUtil?.isBrowser && name && value) {
            const doc = this._domParser.parseFromString(value, "image/svg+xml");
            const svg = doc.querySelector("svg");
            if (!this._cachedIcons.has(family)) {
                this._cachedIcons.set(family, new Map());
            }
            if (svg) {
                svg.setAttribute("fit", "");
                svg.setAttribute("preserveAspectRatio", "xMidYMid meet");
                if (stripMeta) {
                    const title = svg.querySelector("title");
                    const desc = svg.querySelector("desc");
                    if (title) {
                        svg.removeChild(title);
                    }
                    if (desc) {
                        svg.removeChild(desc);
                    }
                }
                const safeSvg = this._sanitizer.bypassSecurityTrustHtml(svg.outerHTML);
                this._cachedIcons.get(family).set(name, safeSvg);
                this._iconLoaded.next({ name, value, family });
            }
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxIconService, deps: [{ token: i1.DomSanitizer, optional: true }, { token: i2.HttpClient, optional: true }, { token: i3.PlatformUtil, optional: true }, { token: DOCUMENT, optional: true }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxIconService, providedIn: "root" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxIconService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: "root",
                }]
        }], ctorParameters: () => [{ type: i1.DomSanitizer, decorators: [{
                    type: Optional
                }] }, { type: i2.HttpClient, decorators: [{
                    type: Optional
                }] }, { type: i3.PlatformUtil, decorators: [{
                    type: Optional
                }] }, { type: Document, decorators: [{
                    type: Optional
                }, {
                    type: Inject,
                    args: [DOCUMENT]
                }] }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL2ljb24vaWNvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsZUFBZSxFQUFFLE1BQU0sRUFBRSxRQUFRLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFFOUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBRTNDLE9BQU8sRUFBYyxPQUFPLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFFM0MsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLG1CQUFtQixDQUFBO0FBSWxELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQzs7Ozs7QUFlN0M7Ozs7Ozs7Ozs7O0dBV0c7QUFJSCxNQUFNLE9BQU8sY0FBYztJQXVCdkIsWUFDd0IsVUFBd0IsRUFDeEIsV0FBdUIsRUFDdkIsYUFBMkIsRUFDUCxRQUFrQjtRQUh0QyxlQUFVLEdBQVYsVUFBVSxDQUFjO1FBQ3hCLGdCQUFXLEdBQVgsV0FBVyxDQUFZO1FBQ3ZCLGtCQUFhLEdBQWIsYUFBYSxDQUFjO1FBQ1AsYUFBUSxHQUFSLFFBQVEsQ0FBVTtRQWZ0RCxtQkFBYyxHQUFlO1lBQ2pDLElBQUksRUFBRSxVQUFVO1lBQ2hCLElBQUksRUFBRSxFQUFFLFNBQVMsRUFBRSxnQkFBZ0IsRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFO1NBQ3RELENBQUM7UUFDTSxjQUFTLEdBQUcsSUFBSSxHQUFHLEVBQWlDLENBQUM7UUFDckQsY0FBUyxHQUFHLElBQUksR0FBRyxFQUFzQixDQUFDO1FBQzFDLGlCQUFZLEdBQUcsSUFBSSxHQUFHLEVBQWlDLENBQUM7UUFDeEQsZ0JBQVcsR0FBRyxJQUFJLE9BQU8sRUFBc0IsQ0FBQztRQVVwRCxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FB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SSxFQUFFLE9BQU8sQ0FBQyxDQUFDO2dCQUNqRCxJQUFJLENBQUMsV0FBVyxDQUFDLElBQUksQ0FBQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLENBQUMsQ0FBQztZQUNuRCxDQUFDO1FBQ0wsQ0FBQztJQUNMLENBQUM7OEdBclZRLGNBQWMsb0pBMkJDLFFBQVE7a0hBM0J2QixjQUFjLGNBRlgsTUFBTTs7MkZBRVQsY0FBYztrQkFIMUIsVUFBVTttQkFBQztvQkFDUixVQUFVLEVBQUUsTUFBTTtpQkFDckI7OzBCQXlCUSxRQUFROzswQkFDUixRQUFROzswQkFDUixRQUFROzswQkFDUixRQUFROzswQkFBSSxNQUFNOzJCQUFDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBTZWN1cml0eUNvbnRleHQsIEluamVjdCwgT3B0aW9uYWwgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgRG9tU2FuaXRpemVyLCBTYWZlSHRtbCB9IGZyb20gXCJAYW5ndWxhci9wbGF0Zm9ybS1icm93c2VyXCI7XG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gXCJAYW5ndWxhci9jb21tb25cIjtcbmltcG9ydCB7IEh0dHBDbGllbnQgfSBmcm9tIFwiQGFuZ3VsYXIvY29tbW9uL2h0dHBcIjtcbmltcG9ydCB7IE9ic2VydmFibGUsIFN1YmplY3QgfSBmcm9tIFwicnhqc1wiO1xuaW1wb3J0IHsgUGxhdGZvcm1VdGlsIH0gZnJvbSBcIi4uL2NvcmUvdXRpbHNcIjtcbmltcG9ydCB7IGljb25SZWZlcmVuY2VzIH0gZnJvbSAnLi9pY29uLnJlZmVyZW5jZXMnXG5pbXBvcnQgeyBJY29uRmFtaWx5LCBJY29uTWV0YSwgRmFtaWx5TWV0YSB9IGZyb20gXCIuL3R5cGVzXCI7XG5pbXBvcnQgdHlwZSB7IEljb25UeXBlLCBJY29uUmVmZXJlbmNlIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBJZ3hUaGVtZSB9IGZyb20gXCIuLi9zZXJ2aWNlcy90aGVtZS90aGVtZS5zZXJ2aWNlXCI7XG5pbXBvcnQgeyBJbmRpZ29JY29ucyB9IGZyb20gXCIuL2ljb25zLmluZGlnb1wiO1xuXG4vKipcbiAqIEV2ZW50IGVtaXR0ZWQgd2hlbiBhIFNWRyBpY29uIGlzIGxvYWRlZCB0aHJvdWdoXG4gKiBhIEhUVFAgcmVxdWVzdC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJZ3hJY29uTG9hZGVkRXZlbnQge1xuICAgIC8qKiBOYW1lIG9mIHRoZSBpY29uICovXG4gICAgbmFtZTogc3RyaW5nO1xuICAgIC8qKiBUaGUgYWN0dWFsIFNWRyB0ZXh0LCBpZiBhbnkgKi9cbiAgICB2YWx1ZT86IHN0cmluZztcbiAgICAvKiogVGhlIGZvbnQtZmFtaWx5IGZvciB0aGUgaWNvbi4gRGVmYXVsdHMgdG8gbWF0ZXJpYWwuICovXG4gICAgZmFtaWx5OiBzdHJpbmc7XG59XG5cbi8qKlxuICogKipJZ25pdGUgVUkgZm9yIEFuZ3VsYXIgSWNvbiBTZXJ2aWNlKiogLVxuICpcbiAqIFRoZSBJZ25pdGUgVUkgSWNvbiBTZXJ2aWNlIG1ha2VzIGl0IGVhc3kgZm9yIGRldmVsb3BlcnMgdG8gaW5jbHVkZSBjdXN0b20gU1ZHIGltYWdlcyBhbmQgdXNlIHRoZW0gd2l0aCBJZ3hJY29uQ29tcG9uZW50LlxuICogSW4gYWRkaXRpb24gaXQgY291bGQgYmUgdXNlZCB0byBhc3NvY2lhdGUgYSBjdXN0b20gY2xhc3MgdG8gYmUgYXBwbGllZCBvbiBJZ3hJY29uQ29tcG9uZW50IGFjY29yZGluZyB0byBnaXZlbiBmb250LWZhbWlseS5cbiAqXG4gKiBFeGFtcGxlOlxuICogYGBgdHlwZXNjcmlwdFxuICogdGhpcy5pY29uU2VydmljZS5zZXRGYW1pbHkoJ21hdGVyaWFsJywgeyBjbGFzc05hbWU6ICdtYXRlcmlhbC1pY29ucycsIHR5cGU6ICdmb250JyB9KTtcbiAqIHRoaXMuaWNvblNlcnZpY2UuYWRkU3ZnSWNvbignYXJ1YmEnLCAnL2Fzc2V0cy9zdmcvY291bnRyeV9mbGFncy9hcnViYS5zdmcnLCAnc3ZnLWZsYWdzJyk7XG4gKiBgYGBcbiAqL1xuQEluamVjdGFibGUoe1xuICAgIHByb3ZpZGVkSW46IFwicm9vdFwiLFxufSlcbmV4cG9ydCBjbGFzcyBJZ3hJY29uU2VydmljZSB7XG4gICAgLyoqXG4gICAgICogT2JzZXJ2YWJsZSB0aGF0IGVtaXRzIHdoZW4gYW4gaWNvbiBpcyBzdWNjZXNzZnVsbHkgbG9hZGVkXG4gICAgICogdGhyb3VnaCBhIEhUVFAgcmVxdWVzdC5cbiAgICAgKlxuICAgICAqIEBleGFtcGxlXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIHRoaXMuc2VydmljZS5pY29uTG9hZGVkLnN1YnNjcmliZSgoZXY6IElneEljb25Mb2FkZWRFdmVudCkgPT4gLi4uKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBwdWJsaWMgaWNvbkxvYWRlZDogT2JzZXJ2YWJsZTxJZ3hJY29uTG9hZGVkRXZlbnQ+O1xuXG4gICAgcHJpdmF0ZSBfZGVmYXVsdEZhbWlseTogSWNvbkZhbWlseSA9IHtcbiAgICAgICAgbmFtZTogXCJtYXRlcmlhbFwiLFxuICAgICAgICBtZXRhOiB7IGNsYXNzTmFtZTogXCJtYXRlcmlhbC1pY29uc1wiLCB0eXBlOiBcImxpZ2FcIiB9LFxuICAgIH07XG4gICAgcHJpdmF0ZSBfaWNvblJlZnMgPSBuZXcgTWFwPHN0cmluZywgTWFwPHN0cmluZywgSWNvbk1ldGE+PigpO1xuICAgIHByaXZhdGUgX2ZhbWlsaWVzID0gbmV3IE1hcDxzdHJpbmcsIEZhbWlseU1ldGE+KCk7XG4gICAgcHJpdmF0ZSBfY2FjaGVkSWNvbnMgPSBuZXcgTWFwPHN0cmluZywgTWFwPHN0cmluZywgU2FmZUh0bWw+PigpO1xuICAgIHByaXZhdGUgX2ljb25Mb2FkZWQgPSBuZXcgU3ViamVjdDxJZ3hJY29uTG9hZGVkRXZlbnQ+KCk7XG4gICAgcHJpdmF0ZSBfZG9tUGFyc2VyOiBET01QYXJzZXI7XG4gICAgcHJpdmF0ZSB0aGVtZSE6IElneFRoZW1lO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBPcHRpb25hbCgpIHByaXZhdGUgX3Nhbml0aXplcjogRG9tU2FuaXRpemVyLFxuICAgICAgICBAT3B0aW9uYWwoKSBwcml2YXRlIF9odHRwQ2xpZW50OiBIdHRwQ2xpZW50LFxuICAgICAgICBAT3B0aW9uYWwoKSBwcml2YXRlIF9wbGF0Zm9ybVV0aWw6IFBsYXRmb3JtVXRpbCxcbiAgICAgICAgQE9wdGlvbmFsKCkgQEluamVjdChET0NVTUVOVCkgcHJvdGVjdGVkIGRvY3VtZW50OiBEb2N1bWVudCxcbiAgICApIHtcbiAgICAgICAgdGhpcy5pY29uTG9hZGVkID0gdGhpcy5faWNvbkxvYWRlZC5hc09ic2VydmFibGUoKTtcbiAgICAgICAgdGhpcy5zZXRGYW1pbHkodGhpcy5fZGVmYXVsdEZhbWlseS5uYW1lLCB0aGlzLl9kZWZhdWx0RmFtaWx5Lm1ldGEpO1xuXG4gICAgICAgIGlmICh0aGlzLl9wbGF0Zm9ybVV0aWw/LmlzQnJvd3Nlcikge1xuICAgICAgICAgICAgdGhpcy5fZG9tUGFyc2VyID0gbmV3IERPTVBhcnNlcigpO1xuXG4gICAgICAgICAgICBmb3IgKGNvbnN0IFtuYW1lLCBzdmddIG9mIEluZGlnb0ljb25zKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGRTdmdJY29uRnJvbVRleHQobmFtZSwgc3ZnLnZhbHVlLCBgaW50ZXJuYWxfJHtzdmcuZm9udFNldH1gLCB0cnVlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIHRoZSBkZWZhdWx0IGZvbnQtZmFtaWx5LlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiAgIGNvbnN0IGRlZmF1bHRGYW1pbHkgPSB0aGlzLmljb25TZXJ2aWNlLmRlZmF1bHRGYW1pbHk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcHVibGljIGdldCBkZWZhdWx0RmFtaWx5KCk6IEljb25GYW1pbHkge1xuICAgICAgICByZXR1cm4gdGhpcy5fZGVmYXVsdEZhbWlseTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAgU2V0cyB0aGUgZGVmYXVsdCBmb250LWZhbWlseS5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogICB0aGlzLmljb25TZXJ2aWNlLmRlZmF1bHRGYW1pbHkgPSAnc3ZnLWZsYWdzJztcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBwdWJsaWMgc2V0IGRlZmF1bHRGYW1pbHkoZmFtaWx5OiBJY29uRmFtaWx5KSB7XG4gICAgICAgIHRoaXMuX2RlZmF1bHRGYW1pbHkgPSBmYW1pbHk7XG4gICAgICAgIHRoaXMuc2V0RmFtaWx5KHRoaXMuX2RlZmF1bHRGYW1pbHkubmFtZSwgdGhpcy5fZGVmYXVsdEZhbWlseS5tZXRhKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAgUmVnaXN0ZXJzIGEgY3VzdG9tIGNsYXNzIHRvIGJlIGFwcGxpZWQgdG8gSWd4SWNvbkNvbXBvbmVudCBmb3IgYSBnaXZlbiBmb250LWZhbWlseS5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogICB0aGlzLmljb25TZXJ2aWNlLnJlZ2lzdGVyRmFtaWx5QWxpYXMoJ21hdGVyaWFsJywgJ21hdGVyaWFsLWljb25zJyk7XG4gICAgICogYGBgXG4gICAgICogQGRlcHJlY2F0ZWQgaW4gdmVyc2lvbiAxOC4xLjAuIFVzZSBgc2V0RmFtaWx5YCBpbnN0ZWFkLlxuICAgICAqL1xuICAgIHB1YmxpYyByZWdpc3RlckZhbWlseUFsaWFzKFxuICAgICAgICBhbGlhczogc3RyaW5nLFxuICAgICAgICBjbGFzc05hbWU6IHN0cmluZyA9IGFsaWFzLFxuICAgICAgICB0eXBlOiBJY29uVHlwZSA9IFwiZm9udFwiLFxuICAgICk6IHRoaXMge1xuICAgICAgICB0aGlzLnNldEZhbWlseShhbGlhcywgeyBjbGFzc05hbWUsIHR5cGUgfSk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIHRoZSBjdXN0b20gY2xhc3MsIGlmIGFueSwgYXNzb2NpYXRlZCB0byBhIGdpdmVuIGZvbnQtZmFtaWx5LlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiAgIGNvbnN0IGZhbWlseUNsYXNzID0gdGhpcy5pY29uU2VydmljZS5mYW1pbHlDbGFzc05hbWUoJ21hdGVyaWFsJyk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcHVibGljIGZhbWlseUNsYXNzTmFtZShhbGlhczogc3RyaW5nKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZhbWlsaWVzLmdldChhbGlhcyk/LmNsYXNzTmFtZSB8fCBhbGlhcztcbiAgICB9XG5cbiAgICAvKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cbiAgICBwcml2YXRlIGZhbWlseVR5cGUoYWxpYXM6IHN0cmluZyk6IEljb25UeXBlIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2ZhbWlsaWVzLmdldChhbGlhcyk/LnR5cGU7XG4gICAgfVxuXG4gICAgLyoqIEBoaWRkZW4gQGludGVybmFsICovXG4gICAgcHVibGljIHNldFJlZnNCeVRoZW1lKHRoZW1lOiBJZ3hUaGVtZSkge1xuICAgICAgICBpZiAodGhpcy50aGVtZSAhPT0gdGhlbWUpIHtcbiAgICAgICAgICAgIHRoaXMudGhlbWUgPSB0aGVtZTtcblxuICAgICAgICAgICAgZm9yIChjb25zdCB7IGFsaWFzLCB0YXJnZXQgfSBvZiBpY29uUmVmZXJlbmNlcykge1xuICAgICAgICAgICAgICAgIGNvbnN0IGljb24gPSB0YXJnZXQuZ2V0KHRoZW1lKSA/PyB0YXJnZXQuZ2V0KCdkZWZhdWx0JykhO1xuICAgICAgICAgICAgICAgIHRoaXMuYWRkSWNvblJlZihhbGlhcy5uYW1lLCBhbGlhcy5mYW1pbHksIGljb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogIENyZWF0ZXMgYSBmYW1pbHkgdG8gY2xhc3NOYW1lIHJlbGF0aW9uc2hpcCB0aGF0IGlzIGFwcGxpZWQgdG8gdGhlIElneEljb25Db21wb25lbnRcbiAgICAgKiAgIHdoZW5ldmVyIHRoYXQgZmFtaWx5IG5hbWUgaXMgdXNlZC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogICB0aGlzLmljb25TZXJ2aWNlLnNldEZhbWlseSgnbWF0ZXJpYWwnLCB7IGNsYXNzTmFtZTogJ21hdGVyaWFsLWljb25zJywgdHlwZTogJ2xpZ2EnIH0pO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHB1YmxpYyBzZXRGYW1pbHkobmFtZTogc3RyaW5nLCBtZXRhOiBGYW1pbHlNZXRhKSB7XG4gICAgICAgIHRoaXMuX2ZhbWlsaWVzLnNldChuYW1lLCBtZXRhKTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAgQWRkcyBhbiBpY29uIHJlZmVyZW5jZSBtZXRhIGZvciBhbiBpY29uIGluIGEgbWV0YSBmYW1pbHkuXG4gICAgICogIEV4ZWN1dGVzIG9ubHkgaWYgbm8gaWNvbiByZWZlcmVuY2UgaXMgZm91bmQuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqICAgdGhpcy5pY29uU2VydmljZS5hZGRJY29uUmVmKCdhcnViYScsICdkZWZhdWx0JywgeyBuYW1lOiAnYXJ1YmEnLCBmYW1pbHk6ICdzdmctZmxhZ3MnIH0pO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHB1YmxpYyBhZGRJY29uUmVmKG5hbWU6IHN0cmluZywgZmFtaWx5OiBzdHJpbmcsIGljb246IEljb25NZXRhKSB7XG4gICAgICAgIGNvbnN0IGljb25SZWYgPSB0aGlzLl9pY29uUmVmcy5nZXQoZmFtaWx5KT8uZ2V0KG5hbWUpO1xuXG4gICAgICAgIGlmICghaWNvblJlZikge1xuICAgICAgICAgICAgdGhpcy5zZXRJY29uUmVmKG5hbWUsIGZhbWlseSwgaWNvbik7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAgU2ltaWxhciB0byBhZGRJY29uUmVmLCBidXQgYWx3YXlzIHNldHMgdGhlIGljb24gcmVmZXJlbmNlIG1ldGEgZm9yIGFuIGljb24gaW4gYSBtZXRhIGZhbWlseS5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogICB0aGlzLmljb25TZXJ2aWNlLnNldEljb25SZWYoJ2FydWJhJywgJ2RlZmF1bHQnLCB7IG5hbWU6ICdhcnViYScsIGZhbWlseTogJ3N2Zy1mbGFncycgfSk7XG4gICAgICogYGBgXG4gICAgICovXG4gICAgcHVibGljIHNldEljb25SZWYobmFtZTogc3RyaW5nLCBmYW1pbHk6IHN0cmluZywgaWNvbjogSWNvbk1ldGEpIHtcbiAgICAgICAgbGV0IGZhbWlseVJlZiA9IHRoaXMuX2ljb25SZWZzLmdldChmYW1pbHkpO1xuXG4gICAgICAgIGlmICghZmFtaWx5UmVmKSB7XG4gICAgICAgICAgICBmYW1pbHlSZWYgPSBuZXcgTWFwPHN0cmluZywgSWNvbk1ldGE+KCk7XG4gICAgICAgICAgICB0aGlzLl9pY29uUmVmcy5zZXQoZmFtaWx5LCBmYW1pbHlSZWYpO1xuICAgICAgICB9XG5cbiAgICAgICAgY29uc3QgZmFtaWx5VHlwZSA9IHRoaXMuZmFtaWx5VHlwZShpY29uPy5mYW1pbHkpO1xuICAgICAgICBmYW1pbHlSZWYuc2V0KG5hbWUsIHsgLi4uaWNvbiwgdHlwZTogaWNvbi50eXBlID8/IGZhbWlseVR5cGUgfSk7XG5cbiAgICAgICAgdGhpcy5faWNvbkxvYWRlZC5uZXh0KHsgbmFtZSwgZmFtaWx5IH0pO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIHRoZSBpY29uIHJlZmVyZW5jZSBtZXRhIGZvciBhbiBpY29uIGluIGEgZ2l2ZW4gZmFtaWx5LlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiAgIGNvbnN0IGljb25SZWYgPSB0aGlzLmljb25TZXJ2aWNlLmdldEljb25SZWYoJ2FydWJhJywgJ2RlZmF1bHQnKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0SWNvblJlZihuYW1lOiBzdHJpbmcsIGZhbWlseTogc3RyaW5nKTogSWNvblJlZmVyZW5jZSB7XG4gICAgICAgIGNvbnN0IGljb24gPSB0aGlzLl9pY29uUmVmcy5nZXQoZmFtaWx5KT8uZ2V0KG5hbWUpO1xuXG4gICAgICAgIGNvbnN0IGljb25GYW1pbHkgPSBpY29uPy5mYW1pbHkgPz8gZmFtaWx5O1xuICAgICAgICBjb25zdCBfbmFtZSA9IGljb24/Lm5hbWUgPz8gbmFtZTtcbiAgICAgICAgY29uc3QgY2xhc3NOYW1lID0gdGhpcy5mYW1pbHlDbGFzc05hbWUoaWNvbkZhbWlseSk7XG4gICAgICAgIGNvbnN0IHByZWZpeCA9IHRoaXMuX2ZhbWlsaWVzLmdldChpY29uRmFtaWx5KT8ucHJlZml4O1xuXG4gICAgICAgIC8vIEhhbmRsZSBuYW1lIHByZWZpeGVzXG4gICAgICAgIGxldCBpY29uTmFtZSA9IF9uYW1lO1xuXG4gICAgICAgIGlmIChpY29uTmFtZSAmJiBwcmVmaXgpIHtcbiAgICAgICAgICAgIGljb25OYW1lID0gX25hbWUuaW5jbHVkZXMocHJlZml4KSA/IF9uYW1lIDogYCR7cHJlZml4fSR7X25hbWV9YDtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNhY2hlZCA9IHRoaXMuaXNTdmdJY29uQ2FjaGVkKGljb25OYW1lLCBpY29uRmFtaWx5KTtcbiAgICAgICAgY29uc3QgdHlwZSA9IGNhY2hlZCA/IFwic3ZnXCIgOiBpY29uPy50eXBlID8/IHRoaXMuZmFtaWx5VHlwZShpY29uRmFtaWx5KTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2xhc3NOYW1lLFxuICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgIG5hbWU6IGljb25OYW1lLFxuICAgICAgICAgICAgZmFtaWx5OiBpY29uRmFtaWx5LFxuICAgICAgICB9O1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0T3JDcmVhdGVTdmdGYW1pbHkoZmFtaWx5OiBzdHJpbmcpIHtcbiAgICAgICAgaWYgKCF0aGlzLl9mYW1pbGllcy5oYXMoZmFtaWx5KSkge1xuICAgICAgICAgICAgdGhpcy5fZmFtaWxpZXMuc2V0KGZhbWlseSwgeyBjbGFzc05hbWU6IGZhbWlseSwgdHlwZTogXCJzdmdcIiB9KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB0aGlzLl9mYW1pbGllcy5nZXQoZmFtaWx5KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogIEFkZHMgYW4gU1ZHIGltYWdlIHRvIHRoZSBjYWNoZS4gU1ZHIHNvdXJjZSBpcyBhbiB1cmwuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqICAgdGhpcy5pY29uU2VydmljZS5hZGRTdmdJY29uKCdhcnViYScsICcvYXNzZXRzL3N2Zy9jb3VudHJ5X2ZsYWdzL2FydWJhLnN2ZycsICdzdmctZmxhZ3MnKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBwdWJsaWMgYWRkU3ZnSWNvbihcbiAgICAgICAgbmFtZTogc3RyaW5nLFxuICAgICAgICB1cmw6IHN0cmluZyxcbiAgICAgICAgZmFtaWx5ID0gdGhpcy5fZGVmYXVsdEZhbWlseS5uYW1lLFxuICAgICAgICBzdHJpcE1ldGEgPSBmYWxzZSxcbiAgICApIHtcbiAgICAgICAgaWYgKG5hbWUgJiYgdXJsKSB7XG4gICAgICAgICAgICBjb25zdCBzYWZlVXJsID0gdGhpcy5fc2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RSZXNvdXJjZVVybCh1cmwpO1xuXG4gICAgICAgICAgICBpZiAoIXNhZmVVcmwpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgICAgICAgICAgIGBUaGUgcHJvdmlkZWQgVVJMIGNvdWxkIG5vdCBiZSBwcm9jZXNzZWQgYXMgdHJ1c3RlZCByZXNvdXJjZSBVUkwgYnkgQW5ndWxhcidzIERvbVNhbml0aXplcjogXCIke3VybH1cIi5gLFxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGNvbnN0IHNhbml0aXplZFVybCA9IHRoaXMuX3Nhbml0aXplci5zYW5pdGl6ZShcbiAgICAgICAgICAgICAgICBTZWN1cml0eUNvbnRleHQuUkVTT1VSQ0VfVVJMLFxuICAgICAgICAgICAgICAgIHNhZmVVcmwsXG4gICAgICAgICAgICApO1xuXG4gICAgICAgICAgICBpZiAoIXNhbml0aXplZFVybCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICAgICAgICAgYFRoZSBVUkwgcHJvdmlkZWQgd2FzIG5vdCB0cnVzdGVkIGFzIGEgcmVzb3VyY2UgVVJMOiBcIiR7dXJsfVwiLmAsXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKCF0aGlzLmlzU3ZnSWNvbkNhY2hlZChuYW1lLCBmYW1pbHkpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5nZXRPckNyZWF0ZVN2Z0ZhbWlseShmYW1pbHkpO1xuXG4gICAgICAgICAgICAgICAgdGhpcy5mZXRjaFN2Zyh1cmwpLnN1YnNjcmliZSgocmVzKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY2FjaGVTdmdJY29uKG5hbWUsIHJlcywgZmFtaWx5LCBzdHJpcE1ldGEpO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIFwiWW91IHNob3VsZCBwcm92aWRlIGF0IGxlYXN0IGBuYW1lYCBhbmQgYHVybGAgdG8gcmVnaXN0ZXIgYW4gc3ZnIGljb24uXCIsXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogIEFkZHMgYW4gU1ZHIGltYWdlIHRvIHRoZSBjYWNoZS4gU1ZHIHNvdXJjZSBpcyBpdHMgdGV4dC5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogICB0aGlzLmljb25TZXJ2aWNlLmFkZFN2Z0ljb25Gcm9tVGV4dCgnc2ltcGxlJywgJzxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiIHZpZXdCb3g9XCIwIDAgMjAwIDIwMFwiPlxuICAgICAqICAgPHBhdGggZD1cIk03NCA3NGg1NHY1NEg3NFwiIC8+PC9zdmc+JywgJ3N2Zy1mbGFncycpO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHB1YmxpYyBhZGRTdmdJY29uRnJvbVRleHQoXG4gICAgICAgIG5hbWU6IHN0cmluZyxcbiAgICAgICAgaWNvblRleHQ6IHN0cmluZyxcbiAgICAgICAgZmFtaWx5ID0gdGhpcy5fZGVmYXVsdEZhbWlseS5uYW1lLFxuICAgICAgICBzdHJpcE1ldGEgPSBmYWxzZSxcbiAgICApIHtcbiAgICAgICAgaWYgKG5hbWUgJiYgaWNvblRleHQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzU3ZnSWNvbkNhY2hlZChuYW1lLCBmYW1pbHkpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICB0aGlzLmdldE9yQ3JlYXRlU3ZnRmFtaWx5KGZhbWlseSk7XG4gICAgICAgICAgICB0aGlzLmNhY2hlU3ZnSWNvbihuYW1lLCBpY29uVGV4dCwgZmFtaWx5LCBzdHJpcE1ldGEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgICAgIFwiWW91IHNob3VsZCBwcm92aWRlIGF0IGxlYXN0IGBuYW1lYCBhbmQgYGljb25UZXh0YCB0byByZWdpc3RlciBhbiBzdmcgaWNvbi5cIixcbiAgICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiAgUmV0dXJucyB3aGV0aGVyIGEgZ2l2ZW4gU1ZHIGltYWdlIGlzIHByZXNlbnQgaW4gdGhlIGNhY2hlLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiAgIGNvbnN0IGlzU3ZnQ2FjaGVkID0gdGhpcy5pY29uU2VydmljZS5pc1N2Z0ljb25DYWNoZWQoJ2FydWJhJywgJ3N2Zy1mbGFncycpO1xuICAgICAqIGBgYFxuICAgICAqL1xuICAgIHB1YmxpYyBpc1N2Z0ljb25DYWNoZWQobmFtZTogc3RyaW5nLCBmYW1pbHk6IHN0cmluZyk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAodGhpcy5fY2FjaGVkSWNvbnMuaGFzKGZhbWlseSkpIHtcbiAgICAgICAgICAgIGNvbnN0IGZhbWlseVJlZ2lzdHJ5ID0gdGhpcy5fY2FjaGVkSWNvbnMuZ2V0KFxuICAgICAgICAgICAgICAgIGZhbWlseSxcbiAgICAgICAgICAgICkgYXMgTWFwPHN0cmluZywgU2FmZUh0bWw+O1xuXG4gICAgICAgICAgICByZXR1cm4gZmFtaWx5UmVnaXN0cnkuaGFzKG5hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqICBSZXR1cm5zIHRoZSBjYWNoZWQgU1ZHIGltYWdlIGFzIHN0cmluZy5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogICBjb25zdCBzdmdJY29uID0gdGhpcy5pY29uU2VydmljZS5nZXRTdmdJY29uKCdhcnViYScsICdzdmctZmxhZ3MnKTtcbiAgICAgKiBgYGBcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0U3ZnSWNvbihuYW1lOiBzdHJpbmcsIGZhbWlseTogc3RyaW5nKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl9jYWNoZWRJY29ucy5nZXQoZmFtaWx5KT8uZ2V0KG5hbWUpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKi9cbiAgICBwcml2YXRlIGZldGNoU3ZnKHVybDogc3RyaW5nKTogT2JzZXJ2YWJsZTxzdHJpbmc+IHtcbiAgICAgICAgY29uc3QgcmVxID0gdGhpcy5faHR0cENsaWVudC5nZXQodXJsLCB7IHJlc3BvbnNlVHlwZTogXCJ0ZXh0XCIgfSk7XG4gICAgICAgIHJldHVybiByZXE7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQGhpZGRlblxuICAgICAqL1xuICAgIHByaXZhdGUgY2FjaGVTdmdJY29uKFxuICAgICAgICBuYW1lOiBzdHJpbmcsXG4gICAgICAgIHZhbHVlOiBzdHJpbmcsXG4gICAgICAgIGZhbWlseSA9IHRoaXMuX2RlZmF1bHRGYW1pbHkubmFtZSxcbiAgICAgICAgc3RyaXBNZXRhOiBib29sZWFuLFxuICAgICkge1xuICAgICAgICBpZiAodGhpcy5fcGxhdGZvcm1VdGlsPy5pc0Jyb3dzZXIgJiYgbmFtZSAmJiB2YWx1ZSkge1xuICAgICAgICAgICAgY29uc3QgZG9jID0gdGhpcy5fZG9tUGFyc2VyLnBhcnNlRnJvbVN0cmluZyh2YWx1ZSwgXCJpbWFnZS9zdmcreG1sXCIpO1xuICAgICAgICAgICAgY29uc3Qgc3ZnID0gZG9jLnF1ZXJ5U2VsZWN0b3IoXCJzdmdcIikgYXMgU1ZHRWxlbWVudDtcblxuICAgICAgICAgICAgaWYgKCF0aGlzLl9jYWNoZWRJY29ucy5oYXMoZmFtaWx5KSkge1xuICAgICAgICAgICAgICAgIHRoaXMuX2NhY2hlZEljb25zLnNldChmYW1pbHksIG5ldyBNYXA8c3RyaW5nLCBTYWZlSHRtbD4oKSk7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChzdmcpIHtcbiAgICAgICAgICAgICAgICBzdmcuc2V0QXR0cmlidXRlKFwiZml0XCIsIFwiXCIpO1xuICAgICAgICAgICAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoXCJwcmVzZXJ2ZUFzcGVjdFJhdGlvXCIsIFwieE1pZFlNaWQgbWVldFwiKTtcblxuICAgICAgICAgICAgICAgIGlmIChzdHJpcE1ldGEpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgdGl0bGUgPSBzdmcucXVlcnlTZWxlY3RvcihcInRpdGxlXCIpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBkZXNjID0gc3ZnLnF1ZXJ5U2VsZWN0b3IoXCJkZXNjXCIpO1xuXG4gICAgICAgICAgICAgICAgICAgIGlmICh0aXRsZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgc3ZnLnJlbW92ZUNoaWxkKHRpdGxlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICAgIGlmIChkZXNjKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzdmcucmVtb3ZlQ2hpbGQoZGVzYyk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBjb25zdCBzYWZlU3ZnID0gdGhpcy5fc2FuaXRpemVyLmJ5cGFzc1NlY3VyaXR5VHJ1c3RIdG1sKFxuICAgICAgICAgICAgICAgICAgICBzdmcub3V0ZXJIVE1MLFxuICAgICAgICAgICAgICAgICk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLl9jYWNoZWRJY29ucy5nZXQoZmFtaWx5KS5zZXQobmFtZSwgc2FmZVN2Zyk7XG4gICAgICAgICAgICAgICAgdGhpcy5faWNvbkxvYWRlZC5uZXh0KHsgbmFtZSwgdmFsdWUsIGZhbWlseSB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbn1cbiJdfQ==