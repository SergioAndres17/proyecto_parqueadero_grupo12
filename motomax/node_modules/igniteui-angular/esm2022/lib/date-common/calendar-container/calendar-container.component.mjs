import { NgIf, NgTemplateOutlet } from '@angular/common';
import { Component, ViewChild, Output, EventEmitter, HostListener, HostBinding } from '@angular/core';
import { PickerInteractionMode } from '../../date-common/types';
import { IgxButtonDirective } from '../../directives/button/button.directive';
import { IgxRippleDirective } from '../../directives/ripple/ripple.directive';
import { IgxCalendarComponent } from '../../calendar/calendar.component';
import { IgxDividerDirective } from "../../directives/divider/divider.directive";
import * as i0 from "@angular/core";
/** @hidden */
export class IgxCalendarContainerComponent {
    constructor() {
        this.calendarClose = new EventEmitter();
        this.todaySelection = new EventEmitter();
        this.styleClass = 'igx-date-picker';
        this.vertical = false;
        this.mode = PickerInteractionMode.DropDown;
    }
    get dropdownCSS() {
        return this.mode === PickerInteractionMode.DropDown;
    }
    onEscape(event) {
        event.preventDefault();
        this.calendarClose.emit();
    }
    get isReadonly() {
        return this.mode === PickerInteractionMode.Dialog;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxCalendarContainerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.4", type: IgxCalendarContainerComponent, isStandalone: true, selector: "igx-calendar-container", outputs: { calendarClose: "calendarClose", todaySelection: "todaySelection" }, host: { listeners: { "keydown.alt.arrowup": "onEscape($event)" }, properties: { "class.igx-date-picker": "this.styleClass", "class.igx-date-picker--dropdown": "this.dropdownCSS" } }, viewQueries: [{ propertyName: "calendar", first: true, predicate: IgxCalendarComponent, descendants: true, static: true }], ngImport: i0, template: "<ng-template #defaultPickerActions>\n    <div\n        *ngIf=\"closeButtonLabel || todayButtonLabel\"\n        class=\"igx-date-picker__buttons\"\n    >\n        <button\n            #closeButton\n            *ngIf=\"closeButtonLabel\"\n            type=\"button\"\n            igxButton=\"flat\"\n            igxRipple\n            (click)=\"calendarClose.emit({ owner: this })\"\n        >\n            {{ closeButtonLabel }}\n        </button>\n        <button\n            #todayButton\n            *ngIf=\"todayButtonLabel\"\n            type=\"button\"\n            igxButton=\"flat\"\n            igxRipple\n            (click)=\"todaySelection.emit({ owner: this })\"\n        >\n            {{ todayButtonLabel }}\n        </button>\n    </div>\n</ng-template>\n\n<igx-calendar></igx-calendar>\n<igx-divider *ngIf=\"pickerActions?.template || (closeButtonLabel || todayButtonLabel)\"></igx-divider>\n<div class=\"igx-date-picker__actions\" *ngIf=\"pickerActions?.template || (closeButtonLabel || todayButtonLabel)\">\n    <ng-container\n        *ngTemplateOutlet=\"\n            pickerActions?.template || defaultPickerActions;\n            context: { $implicit: calendar }\n        \"\n    >\n    </ng-container>\n</div>\n", styles: [":host{display:block}\n"], dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: IgxButtonDirective, selector: "[igxButton]", inputs: ["selected", "igxButton", "igxLabel"], outputs: ["buttonSelected"] }, { kind: "directive", type: IgxRippleDirective, selector: "[igxRipple]", inputs: ["igxRippleTarget", "igxRipple", "igxRippleDuration", "igxRippleCentered", "igxRippleDisabled"] }, { kind: "component", type: IgxCalendarComponent, selector: "igx-calendar", inputs: ["id", "hasHeader", "vertical", "orientation", "headerOrientation", "monthsViewNumber", "showWeekNumbers"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: IgxDividerDirective, selector: "igx-divider", inputs: ["id", "role", "type", "middle", "vertical", "inset"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxCalendarContainerComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igx-calendar-container', standalone: true, imports: [
                        NgIf,
                        IgxButtonDirective,
                        IgxRippleDirective,
                        IgxCalendarComponent,
                        NgTemplateOutlet,
                        IgxDividerDirective,
                    ], template: "<ng-template #defaultPickerActions>\n    <div\n        *ngIf=\"closeButtonLabel || todayButtonLabel\"\n        class=\"igx-date-picker__buttons\"\n    >\n        <button\n            #closeButton\n            *ngIf=\"closeButtonLabel\"\n            type=\"button\"\n            igxButton=\"flat\"\n            igxRipple\n            (click)=\"calendarClose.emit({ owner: this })\"\n        >\n            {{ closeButtonLabel }}\n        </button>\n        <button\n            #todayButton\n            *ngIf=\"todayButtonLabel\"\n            type=\"button\"\n            igxButton=\"flat\"\n            igxRipple\n            (click)=\"todaySelection.emit({ owner: this })\"\n        >\n            {{ todayButtonLabel }}\n        </button>\n    </div>\n</ng-template>\n\n<igx-calendar></igx-calendar>\n<igx-divider *ngIf=\"pickerActions?.template || (closeButtonLabel || todayButtonLabel)\"></igx-divider>\n<div class=\"igx-date-picker__actions\" *ngIf=\"pickerActions?.template || (closeButtonLabel || todayButtonLabel)\">\n    <ng-container\n        *ngTemplateOutlet=\"\n            pickerActions?.template || defaultPickerActions;\n            context: { $implicit: calendar }\n        \"\n    >\n    </ng-container>\n</div>\n", styles: [":host{display:block}\n"] }]
        }], propDecorators: { calendar: [{
                type: ViewChild,
                args: [IgxCalendarComponent, { static: true }]
            }], calendarClose: [{
                type: Output
            }], todaySelection: [{
                type: Output
            }], styleClass: [{
                type: HostBinding,
                args: ['class.igx-date-picker']
            }], dropdownCSS: [{
                type: HostBinding,
                args: ['class.igx-date-picker--dropdown']
            }], onEscape: [{
                type: HostListener,
                args: ['keydown.alt.arrowup', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXItY29udGFpbmVyLmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9kYXRlLWNvbW1vbi9jYWxlbmRhci1jb250YWluZXIvY2FsZW5kYXItY29udGFpbmVyLmNvbXBvbmVudC50cyIsIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9kYXRlLWNvbW1vbi9jYWxlbmRhci1jb250YWluZXIvY2FsZW5kYXItY29udGFpbmVyLmNvbXBvbmVudC5odG1sIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxJQUFJLEVBQUUsZ0JBQWdCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUN6RCxPQUFPLEVBQ0gsU0FBUyxFQUNULFNBQVMsRUFDVCxNQUFNLEVBQUUsWUFBWSxFQUNwQixZQUFZLEVBQ1osV0FBVyxFQUNkLE1BQU0sZUFBZSxDQUFDO0FBRXZCLE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBQ2hFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBQzlFLE9BQU8sRUFBRSxrQkFBa0IsRUFBRSxNQUFNLDBDQUEwQyxDQUFDO0FBRTlFLE9BQU8sRUFBRSxvQkFBb0IsRUFBRSxNQUFNLG1DQUFtQyxDQUFDO0FBQ3pFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLDRDQUE0QyxDQUFDOztBQUVqRixjQUFjO0FBZWQsTUFBTSxPQUFPLDZCQUE2QjtJQWQxQztRQW1CVyxrQkFBYSxHQUFHLElBQUksWUFBWSxFQUFrQixDQUFDO1FBR25ELG1CQUFjLEdBQUcsSUFBSSxZQUFZLEVBQWtCLENBQUM7UUFHcEQsZUFBVSxHQUFHLGlCQUFpQixDQUFDO1FBTy9CLGFBQVEsR0FBRyxLQUFLLENBQUM7UUFHakIsU0FBSSxHQUEwQixxQkFBcUIsQ0FBQyxRQUFRLENBQUM7S0FZdkU7SUFwQkcsSUFDVyxXQUFXO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLElBQUksS0FBSyxxQkFBcUIsQ0FBQyxRQUFRLENBQUM7SUFDeEQsQ0FBQztJQVNNLFFBQVEsQ0FBQyxLQUFLO1FBQ2pCLEtBQUssQ0FBQyxjQUFjLEVBQUUsQ0FBQztRQUN2QixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDO0lBQzlCLENBQUM7SUFFRCxJQUFXLFVBQVU7UUFDakIsT0FBTyxJQUFJLENBQUMsSUFBSSxLQUFLLHFCQUFxQixDQUFDLE1BQU0sQ0FBQztJQUN0RCxDQUFDOzhHQWhDUSw2QkFBNkI7a0dBQTdCLDZCQUE2QixrWUFDM0Isb0JBQW9CLDhEQ2hDbkMsa3RDQXVDQSxnRkRoQlEsSUFBSSw2RkFDSixrQkFBa0Isb0lBQ2xCLGtCQUFrQixpS0FDbEIsb0JBQW9CLDZLQUNwQixnQkFBZ0Isb0pBQ2hCLG1CQUFtQjs7MkZBR2QsNkJBQTZCO2tCQWR6QyxTQUFTOytCQUNJLHdCQUF3QixjQUd0QixJQUFJLFdBQ1A7d0JBQ0wsSUFBSTt3QkFDSixrQkFBa0I7d0JBQ2xCLGtCQUFrQjt3QkFDbEIsb0JBQW9CO3dCQUNwQixnQkFBZ0I7d0JBQ2hCLG1CQUFtQjtxQkFDdEI7OEJBSU0sUUFBUTtzQkFEZCxTQUFTO3VCQUFDLG9CQUFvQixFQUFFLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRTtnQkFJMUMsYUFBYTtzQkFEbkIsTUFBTTtnQkFJQSxjQUFjO3NCQURwQixNQUFNO2dCQUlBLFVBQVU7c0JBRGhCLFdBQVc7dUJBQUMsdUJBQXVCO2dCQUl6QixXQUFXO3NCQURyQixXQUFXO3VCQUFDLGlDQUFpQztnQkFZdkMsUUFBUTtzQkFEZCxZQUFZO3VCQUFDLHFCQUFxQixFQUFFLENBQUMsUUFBUSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdJZiwgTmdUZW1wbGF0ZU91dGxldCB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5pbXBvcnQge1xuICAgIENvbXBvbmVudCxcbiAgICBWaWV3Q2hpbGQsXG4gICAgT3V0cHV0LCBFdmVudEVtaXR0ZXIsXG4gICAgSG9zdExpc3RlbmVyLFxuICAgIEhvc3RCaW5kaW5nXG59IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSUJhc2VFdmVudEFyZ3MgfSBmcm9tICcuLi8uLi9jb3JlL3V0aWxzJztcbmltcG9ydCB7IFBpY2tlckludGVyYWN0aW9uTW9kZSB9IGZyb20gJy4uLy4uL2RhdGUtY29tbW9uL3R5cGVzJztcbmltcG9ydCB7IElneEJ1dHRvbkRpcmVjdGl2ZSB9IGZyb20gJy4uLy4uL2RpcmVjdGl2ZXMvYnV0dG9uL2J1dHRvbi5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgSWd4UmlwcGxlRGlyZWN0aXZlIH0gZnJvbSAnLi4vLi4vZGlyZWN0aXZlcy9yaXBwbGUvcmlwcGxlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBJZ3hQaWNrZXJBY3Rpb25zRGlyZWN0aXZlIH0gZnJvbSAnLi4vcGlja2VyLWljb25zLmNvbW1vbic7XG5pbXBvcnQgeyBJZ3hDYWxlbmRhckNvbXBvbmVudCB9IGZyb20gJy4uLy4uL2NhbGVuZGFyL2NhbGVuZGFyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJZ3hEaXZpZGVyRGlyZWN0aXZlIH0gZnJvbSBcIi4uLy4uL2RpcmVjdGl2ZXMvZGl2aWRlci9kaXZpZGVyLmRpcmVjdGl2ZVwiO1xuXG4vKiogQGhpZGRlbiAqL1xuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICdpZ3gtY2FsZW5kYXItY29udGFpbmVyJyxcbiAgICBzdHlsZXM6IFsnOmhvc3Qge2Rpc3BsYXk6IGJsb2NrO30nXSxcbiAgICB0ZW1wbGF0ZVVybDogJ2NhbGVuZGFyLWNvbnRhaW5lci5jb21wb25lbnQuaHRtbCcsXG4gICAgc3RhbmRhbG9uZTogdHJ1ZSxcbiAgICBpbXBvcnRzOiBbXG4gICAgICAgIE5nSWYsXG4gICAgICAgIElneEJ1dHRvbkRpcmVjdGl2ZSxcbiAgICAgICAgSWd4UmlwcGxlRGlyZWN0aXZlLFxuICAgICAgICBJZ3hDYWxlbmRhckNvbXBvbmVudCxcbiAgICAgICAgTmdUZW1wbGF0ZU91dGxldCxcbiAgICAgICAgSWd4RGl2aWRlckRpcmVjdGl2ZSxcbiAgICBdXG59KVxuZXhwb3J0IGNsYXNzIElneENhbGVuZGFyQ29udGFpbmVyQ29tcG9uZW50IHtcbiAgICBAVmlld0NoaWxkKElneENhbGVuZGFyQ29tcG9uZW50LCB7IHN0YXRpYzogdHJ1ZSB9KVxuICAgIHB1YmxpYyBjYWxlbmRhcjogSWd4Q2FsZW5kYXJDb21wb25lbnQ7XG5cbiAgICBAT3V0cHV0KClcbiAgICBwdWJsaWMgY2FsZW5kYXJDbG9zZSA9IG5ldyBFdmVudEVtaXR0ZXI8SUJhc2VFdmVudEFyZ3M+KCk7XG5cbiAgICBAT3V0cHV0KClcbiAgICBwdWJsaWMgdG9kYXlTZWxlY3Rpb24gPSBuZXcgRXZlbnRFbWl0dGVyPElCYXNlRXZlbnRBcmdzPigpO1xuXG4gICAgQEhvc3RCaW5kaW5nKCdjbGFzcy5pZ3gtZGF0ZS1waWNrZXInKVxuICAgIHB1YmxpYyBzdHlsZUNsYXNzID0gJ2lneC1kYXRlLXBpY2tlcic7XG5cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1kYXRlLXBpY2tlci0tZHJvcGRvd24nKVxuICAgIHB1YmxpYyBnZXQgZHJvcGRvd25DU1MoKTogYm9vbGVhbiB7XG4gICAgICAgIHJldHVybiB0aGlzLm1vZGUgPT09IFBpY2tlckludGVyYWN0aW9uTW9kZS5Ecm9wRG93bjtcbiAgICB9XG5cbiAgICBwdWJsaWMgdmVydGljYWwgPSBmYWxzZTtcbiAgICBwdWJsaWMgY2xvc2VCdXR0b25MYWJlbDogc3RyaW5nO1xuICAgIHB1YmxpYyB0b2RheUJ1dHRvbkxhYmVsOiBzdHJpbmc7XG4gICAgcHVibGljIG1vZGU6IFBpY2tlckludGVyYWN0aW9uTW9kZSA9IFBpY2tlckludGVyYWN0aW9uTW9kZS5Ecm9wRG93bjtcbiAgICBwdWJsaWMgcGlja2VyQWN0aW9uczogSWd4UGlja2VyQWN0aW9uc0RpcmVjdGl2ZTtcblxuICAgIEBIb3N0TGlzdGVuZXIoJ2tleWRvd24uYWx0LmFycm93dXAnLCBbJyRldmVudCddKVxuICAgIHB1YmxpYyBvbkVzY2FwZShldmVudCkge1xuICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICB0aGlzLmNhbGVuZGFyQ2xvc2UuZW1pdCgpO1xuICAgIH1cblxuICAgIHB1YmxpYyBnZXQgaXNSZWFkb25seSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubW9kZSA9PT0gUGlja2VySW50ZXJhY3Rpb25Nb2RlLkRpYWxvZztcbiAgICB9XG59XG5cbi8qKiBAaGlkZGVuICovXG5cbiIsIjxuZy10ZW1wbGF0ZSAjZGVmYXVsdFBpY2tlckFjdGlvbnM+XG4gICAgPGRpdlxuICAgICAgICAqbmdJZj1cImNsb3NlQnV0dG9uTGFiZWwgfHwgdG9kYXlCdXR0b25MYWJlbFwiXG4gICAgICAgIGNsYXNzPVwiaWd4LWRhdGUtcGlja2VyX19idXR0b25zXCJcbiAgICA+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICNjbG9zZUJ1dHRvblxuICAgICAgICAgICAgKm5nSWY9XCJjbG9zZUJ1dHRvbkxhYmVsXCJcbiAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgaWd4QnV0dG9uPVwiZmxhdFwiXG4gICAgICAgICAgICBpZ3hSaXBwbGVcbiAgICAgICAgICAgIChjbGljayk9XCJjYWxlbmRhckNsb3NlLmVtaXQoeyBvd25lcjogdGhpcyB9KVwiXG4gICAgICAgID5cbiAgICAgICAgICAgIHt7IGNsb3NlQnV0dG9uTGFiZWwgfX1cbiAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICAgICN0b2RheUJ1dHRvblxuICAgICAgICAgICAgKm5nSWY9XCJ0b2RheUJ1dHRvbkxhYmVsXCJcbiAgICAgICAgICAgIHR5cGU9XCJidXR0b25cIlxuICAgICAgICAgICAgaWd4QnV0dG9uPVwiZmxhdFwiXG4gICAgICAgICAgICBpZ3hSaXBwbGVcbiAgICAgICAgICAgIChjbGljayk9XCJ0b2RheVNlbGVjdGlvbi5lbWl0KHsgb3duZXI6IHRoaXMgfSlcIlxuICAgICAgICA+XG4gICAgICAgICAgICB7eyB0b2RheUJ1dHRvbkxhYmVsIH19XG4gICAgICAgIDwvYnV0dG9uPlxuICAgIDwvZGl2PlxuPC9uZy10ZW1wbGF0ZT5cblxuPGlneC1jYWxlbmRhcj48L2lneC1jYWxlbmRhcj5cbjxpZ3gtZGl2aWRlciAqbmdJZj1cInBpY2tlckFjdGlvbnM/LnRlbXBsYXRlIHx8IChjbG9zZUJ1dHRvbkxhYmVsIHx8IHRvZGF5QnV0dG9uTGFiZWwpXCI+PC9pZ3gtZGl2aWRlcj5cbjxkaXYgY2xhc3M9XCJpZ3gtZGF0ZS1waWNrZXJfX2FjdGlvbnNcIiAqbmdJZj1cInBpY2tlckFjdGlvbnM/LnRlbXBsYXRlIHx8IChjbG9zZUJ1dHRvbkxhYmVsIHx8IHRvZGF5QnV0dG9uTGFiZWwpXCI+XG4gICAgPG5nLWNvbnRhaW5lclxuICAgICAgICAqbmdUZW1wbGF0ZU91dGxldD1cIlxuICAgICAgICAgICAgcGlja2VyQWN0aW9ucz8udGVtcGxhdGUgfHwgZGVmYXVsdFBpY2tlckFjdGlvbnM7XG4gICAgICAgICAgICBjb250ZXh0OiB7ICRpbXBsaWNpdDogY2FsZW5kYXIgfVxuICAgICAgICBcIlxuICAgID5cbiAgICA8L25nLWNvbnRhaW5lcj5cbjwvZGl2PlxuIl19