import { Injectable } from "@angular/core";
import * as i0 from "@angular/core";
import * as i1 from "@angular/platform-browser";
export class KeyboardNavigationService {
    constructor(eventManager, ngZone) {
        this.eventManager = eventManager;
        this.ngZone = ngZone;
        this.keyHandlers = new Map();
        this.eventUnsubscribeFn = null;
    }
    attachKeyboardHandlers(elementRef, context) {
        this.detachKeyboardHandlers(); // Clean up any existing listeners
        this.ngZone.runOutsideAngular(() => {
            this.eventUnsubscribeFn = this.eventManager.addEventListener(elementRef.nativeElement, 'keydown', (event) => {
                const handler = this.keyHandlers.get(event.key);
                if (handler) {
                    this.ngZone.run(handler.bind(context, event));
                }
            });
        });
        return this;
    }
    detachKeyboardHandlers() {
        if (this.eventUnsubscribeFn) {
            this.eventUnsubscribeFn();
            this.eventUnsubscribeFn = null;
        }
        this.keyHandlers.clear();
    }
    set(key, handler) {
        this.keyHandlers.set(key, handler);
        return this;
    }
    unset(key) {
        this.keyHandlers.delete(key);
        return this;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: KeyboardNavigationService, deps: [{ token: i1.EventManager }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: KeyboardNavigationService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: KeyboardNavigationService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i1.EventManager }, { type: i0.NgZone }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2FsZW5kYXIuc2VydmljZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy9saWIvY2FsZW5kYXIvY2FsZW5kYXIuc2VydmljZXMudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFVBQVUsRUFBc0IsTUFBTSxlQUFlLENBQUM7OztBQUkvRCxNQUFNLE9BQU8seUJBQXlCO0lBSWxDLFlBQ1ksWUFBMEIsRUFDMUIsTUFBYztRQURkLGlCQUFZLEdBQVosWUFBWSxDQUFjO1FBQzFCLFdBQU0sR0FBTixNQUFNLENBQVE7UUFMbEIsZ0JBQVcsR0FBRyxJQUFJLEdBQUcsRUFBMEMsQ0FBQztRQUNoRSx1QkFBa0IsR0FBb0IsSUFBSSxDQUFDO0lBS2hELENBQUM7SUFFRyxzQkFBc0IsQ0FBQyxVQUFzQixFQUFFLE9BQVk7UUFDOUQsSUFBSSxDQUFDLHNCQUFzQixFQUFFLENBQUMsQ0FBQyxrQ0FBa0M7UUFFakUsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUU7WUFDL0IsSUFBSSxDQUFDLGtCQUFrQixHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsZ0JBQWdCLENBQ3hELFVBQVUsQ0FBQyxhQUFhLEVBQ3hCLFNBQVMsRUFDVCxDQUFDLEtBQW9CLEVBQUUsRUFBRTtnQkFDckIsTUFBTSxPQUFPLEdBQUcsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2dCQUVoRCxJQUFJLE9BQU8sRUFBRSxDQUFDO29CQUNWLElBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFLEtBQUssQ0FBQyxDQUFDLENBQUM7Z0JBQ2xELENBQUM7WUFDTCxDQUFDLENBQ0osQ0FBQztRQUNOLENBQUMsQ0FBQyxDQUFDO1FBRUgsT0FBTyxJQUFJLENBQUM7SUFDaEIsQ0FBQztJQUVNLHNCQUFzQjtRQUN6QixJQUFJLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1lBQzFCLElBQUksQ0FBQyxrQkFBa0IsRUFBRSxDQUFDO1lBQzFCLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUM7UUFDbkMsQ0FBQztRQUVELElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDN0IsQ0FBQztJQUVNLEdBQUcsQ0FBQyxHQUFZLEVBQUUsT0FBdUM7UUFDNUQsSUFBSSxDQUFDLFdBQVcsQ0FBQyxHQUFHLENBQUMsR0FBRyxFQUFFLE9BQU8sQ0FBQyxDQUFDO1FBQ25DLE9BQU8sSUFBSSxDQUFDO0lBQ2hCLENBQUM7SUFFTSxLQUFLLENBQUMsR0FBVztRQUNwQixJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUM3QixPQUFPLElBQUksQ0FBQztJQUNoQixDQUFDOzhHQTlDUSx5QkFBeUI7a0hBQXpCLHlCQUF5Qjs7MkZBQXpCLHlCQUF5QjtrQkFEckMsVUFBVSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEVsZW1lbnRSZWYsIE5nWm9uZSB9IGZyb20gXCJAYW5ndWxhci9jb3JlXCI7XG5pbXBvcnQgeyBFdmVudE1hbmFnZXIgfSBmcm9tIFwiQGFuZ3VsYXIvcGxhdGZvcm0tYnJvd3NlclwiO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgS2V5Ym9hcmROYXZpZ2F0aW9uU2VydmljZSB7XG4gICAgcHJpdmF0ZSBrZXlIYW5kbGVycyA9IG5ldyBNYXA8c3RyaW5nLCAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+IHZvaWQ+KCk7XG4gICAgcHJpdmF0ZSBldmVudFVuc3Vic2NyaWJlRm46IEZ1bmN0aW9uIHwgbnVsbCA9IG51bGw7XG5cbiAgICBjb25zdHJ1Y3RvcihcbiAgICAgICAgcHJpdmF0ZSBldmVudE1hbmFnZXI6IEV2ZW50TWFuYWdlcixcbiAgICAgICAgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSxcbiAgICApIHt9XG5cbiAgICBwdWJsaWMgYXR0YWNoS2V5Ym9hcmRIYW5kbGVycyhlbGVtZW50UmVmOiBFbGVtZW50UmVmLCBjb250ZXh0OiBhbnkpIHtcbiAgICAgICAgdGhpcy5kZXRhY2hLZXlib2FyZEhhbmRsZXJzKCk7IC8vIENsZWFuIHVwIGFueSBleGlzdGluZyBsaXN0ZW5lcnNcblxuICAgICAgICB0aGlzLm5nWm9uZS5ydW5PdXRzaWRlQW5ndWxhcigoKSA9PiB7XG4gICAgICAgICAgICB0aGlzLmV2ZW50VW5zdWJzY3JpYmVGbiA9IHRoaXMuZXZlbnRNYW5hZ2VyLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgICAgICAgZWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LFxuICAgICAgICAgICAgICAgICdrZXlkb3duJyxcbiAgICAgICAgICAgICAgICAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaGFuZGxlciA9IHRoaXMua2V5SGFuZGxlcnMuZ2V0KGV2ZW50LmtleSk7XG5cbiAgICAgICAgICAgICAgICAgICAgaWYgKGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMubmdab25lLnJ1bihoYW5kbGVyLmJpbmQoY29udGV4dCwgZXZlbnQpKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHB1YmxpYyBkZXRhY2hLZXlib2FyZEhhbmRsZXJzKCkge1xuICAgICAgICBpZiAodGhpcy5ldmVudFVuc3Vic2NyaWJlRm4pIHtcbiAgICAgICAgICAgIHRoaXMuZXZlbnRVbnN1YnNjcmliZUZuKCk7XG4gICAgICAgICAgICB0aGlzLmV2ZW50VW5zdWJzY3JpYmVGbiA9IG51bGw7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmtleUhhbmRsZXJzLmNsZWFyKCk7XG4gICAgfVxuXG4gICAgcHVibGljIHNldChrZXkgOiBzdHJpbmcsIGhhbmRsZXI6IChldmVudDogS2V5Ym9hcmRFdmVudCkgPT4gdm9pZCkge1xuICAgICAgICB0aGlzLmtleUhhbmRsZXJzLnNldChrZXksIGhhbmRsZXIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG5cbiAgICBwdWJsaWMgdW5zZXQoa2V5OiBzdHJpbmcpIHtcbiAgICAgICAgdGhpcy5rZXlIYW5kbGVycy5kZWxldGUoa2V5KTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxufVxuIl19