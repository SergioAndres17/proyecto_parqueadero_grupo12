export const daysInWeek = 7;
const millisecondsInDay = 86400000;
export function toCalendarDay(date) {
    return date instanceof Date ? CalendarDay.from(date) : date;
}
function checkRollover(original, modified) {
    return original.date !== modified.date
        ? modified.set({ date: 0 })
        : modified;
}
export class CalendarDay {
    /** Constructs and returns the current day. */
    static get today() {
        return CalendarDay.from(new Date());
    }
    /** Constructs a new CalendarDay instance from a Date object. */
    static from(date) {
        return new CalendarDay({
            year: date.getFullYear(),
            month: date.getMonth(),
            date: date.getDate(),
        });
    }
    constructor(args) {
        this._date = new Date(args.year, args.month, args.date ?? 1);
    }
    /** Returns a copy of this instance. */
    clone() {
        return CalendarDay.from(this._date);
    }
    /**
     * Returns a new instance with values replaced.
     */
    set(args) {
        return new CalendarDay({
            year: args.year ?? this.year,
            month: args.month ?? this.month,
            date: args.date ?? this.date,
        });
    }
    add(unit, value) {
        const result = this.clone();
        switch (unit) {
            case "year":
                result._date.setFullYear(result.year + value);
                return checkRollover(this, result);
            case "quarter":
                result._date.setMonth(result.month + 3 * value);
                return checkRollover(this, result);
            case "month":
                result._date.setMonth(result.month + value);
                return checkRollover(this, result);
            case "week":
                result._date.setDate(result.date + 7 * value);
                return result;
            case "day":
                result._date.setDate(result.date + value);
                return result;
            default:
                throw new Error("Invalid interval");
        }
    }
    /** Returns the day of the week (Sunday = 0). */
    get day() {
        return this._date.getDay();
    }
    /** Returns the full year. */
    get year() {
        return this._date.getFullYear();
    }
    /** Returns the month. */
    get month() {
        return this._date.getMonth();
    }
    /** Returns the date */
    get date() {
        return this._date.getDate();
    }
    /** Returns the timestamp since epoch in milliseconds. */
    get timestamp() {
        return this._date.getTime();
    }
    /** Returns the current week number. */
    get week() {
        const firstDay = new CalendarDay({ year: this.year, month: 0 })
            .timestamp;
        const currentDay = (this.timestamp - firstDay + millisecondsInDay) / millisecondsInDay;
        return Math.ceil(currentDay / daysInWeek);
    }
    /** Returns the underlying native date instance. */
    get native() {
        return new Date(this._date);
    }
    /**
     * Whether the current date is a weekend day.
     *
     * @remarks
     * This is naive, since it does not account for locale specifics.
     */
    get weekend() {
        return this.day < 1 || this.day > 5;
    }
    equalTo(value) {
        return this.timestamp === toCalendarDay(value).timestamp;
    }
    greaterThan(value) {
        return this.timestamp > toCalendarDay(value).timestamp;
    }
    lessThan(value) {
        return this.timestamp < toCalendarDay(value).timestamp;
    }
    toString() {
        return `${this.native}`;
    }
}
//# sourceMappingURL=data:application/json;base64,