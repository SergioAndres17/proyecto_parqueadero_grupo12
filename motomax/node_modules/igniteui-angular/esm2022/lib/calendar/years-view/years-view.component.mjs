import { Component, Input, HostBinding, Inject, } from "@angular/core";
import { IgxCalendarYearDirective } from "../calendar.directives";
import { NgFor } from "@angular/common";
import { IgxCalendarViewDirective, DAY_INTERVAL_TOKEN, } from "../common/calendar-view.directive";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
import { CalendarDay } from "../common/model";
import { calendarRange } from "../common/helpers";
import * as i0 from "@angular/core";
export class IgxYearsViewComponent extends IgxCalendarViewDirective {
    #standalone;
    /**
     * @hidden @internal
     */
    get standalone() {
        return this.#standalone;
    }
    set standalone(value) {
        this.#standalone = value;
    }
    /**
     * Gets the year format option of the years view.
     * ```typescript
     * let yearFormat = this.yearsView.yearFormat.
     * ```
     */
    get yearFormat() {
        return this._yearFormat;
    }
    /**
     * Sets the year format option of the years view.
     * ```html
     * <igx-years-view [yearFormat]="numeric"></igx-years-view>
     * ```
     *
     * @memberof IgxYearsViewComponent
     */
    set yearFormat(value) {
        this._yearFormat = value;
        this.initFormatter();
    }
    /**
     * Returns an array of date objects which are then used to properly
     * render the years.
     *
     * Used in the template of the component.
     *
     * @hidden @internal
     */
    get range() {
        const year = this.date.getFullYear();
        const start = new CalendarDay({
            year: Math.floor(year / this._yearsPerPage) * this._yearsPerPage,
            month: this.date.getMonth(),
        });
        const end = start.add(this.dayInterval, this._yearsPerPage);
        return Array.from(calendarRange({ start, end, unit: this.dayInterval })).map((m) => m.native);
    }
    constructor(el, dayInterval) {
        super(dayInterval);
        this.el = el;
        this.#standalone = true;
        /**
         * The default css class applied to the component.
         *
         * @hidden
         */
        this.viewClass = true;
        /**
         * @hidden
         */
        this._yearFormat = "numeric";
        /**
         * @hidden
         */
        this._yearsPerPage = 15;
    }
    /**
     * Returns the locale representation of the year in the years view.
     *
     * @hidden
     */
    formattedYear(value) {
        const rawFormatter = new Intl.DateTimeFormat(this.locale, { year: 'numeric' });
        if (this.formatView) {
            return {
                long: rawFormatter.format(value),
                formatted: this._formatter.format(value)
            };
        }
        return {
            long: rawFormatter.format(value),
            formatted: `${value.getFullYear()}`
        };
    }
    /**
     * @hidden
     */
    yearTracker(_, item) {
        return `${item.getFullYear()}}`;
    }
    /**
     * @hidden
     */
    initFormatter() {
        this._formatter = new Intl.DateTimeFormat(this._locale, {
            year: this.yearFormat,
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxYearsViewComponent, deps: [{ token: i0.ElementRef }, { token: DAY_INTERVAL_TOKEN }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.4", type: IgxYearsViewComponent, isStandalone: true, selector: "igx-years-view", inputs: { standalone: "standalone", yearFormat: "yearFormat" }, host: { properties: { "class.igx-calendar-view": "this.viewClass", "class.igx-calendar-view--standalone": "this.standalone" } }, providers: [
            {
                provide: NG_VALUE_ACCESSOR,
                useExisting: IgxYearsViewComponent,
                multi: true,
            },
            {
                provide: DAY_INTERVAL_TOKEN,
                useValue: "year",
            },
        ], usesInheritance: true, ngImport: i0, template: "<div class=\"igx-calendar-view__items\" role=\"row\">\n    <span\n        igxCalendarYear\n        #item=\"igxCalendarYear\"\n        *ngFor=\"let year of range; trackBy: yearTracker\"\n        class=\"igx-calendar-view__item\"\n        role=\"gridcell\"\n        [attr.id]=\"year.getTime()\"\n        [attr.aria-label]=\"formattedYear(year).long\"\n        [attr.aria-selected]=\"item.isSelected\"\n        [attr.aria-current]=\"item.isCurrent\"\n        [value]=\"year\"\n        [date]=\"date\"\n        [showActive]=\"showActive\"\n        (itemSelection)=\"selectDate($event)\"\n    >\n        <span class=\"igx-calendar-view__item-inner\" aria-hidden=\"true\">\n            {{ formattedYear(year).formatted }}\n        </span>\n    </span>\n</div>\n", dependencies: [{ kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: IgxCalendarYearDirective, selector: "[igxCalendarYear]", exportAs: ["igxCalendarYear"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxYearsViewComponent, decorators: [{
            type: Component,
            args: [{ providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: IgxYearsViewComponent,
                            multi: true,
                        },
                        {
                            provide: DAY_INTERVAL_TOKEN,
                            useValue: "year",
                        },
                    ], selector: "igx-years-view", standalone: true, imports: [NgFor, IgxCalendarYearDirective], template: "<div class=\"igx-calendar-view__items\" role=\"row\">\n    <span\n        igxCalendarYear\n        #item=\"igxCalendarYear\"\n        *ngFor=\"let year of range; trackBy: yearTracker\"\n        class=\"igx-calendar-view__item\"\n        role=\"gridcell\"\n        [attr.id]=\"year.getTime()\"\n        [attr.aria-label]=\"formattedYear(year).long\"\n        [attr.aria-selected]=\"item.isSelected\"\n        [attr.aria-current]=\"item.isCurrent\"\n        [value]=\"year\"\n        [date]=\"date\"\n        [showActive]=\"showActive\"\n        (itemSelection)=\"selectDate($event)\"\n    >\n        <span class=\"igx-calendar-view__item-inner\" aria-hidden=\"true\">\n            {{ formattedYear(year).formatted }}\n        </span>\n    </span>\n</div>\n" }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DAY_INTERVAL_TOKEN]
                }] }], propDecorators: { viewClass: [{
                type: HostBinding,
                args: ["class.igx-calendar-view"]
            }], standalone: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.igx-calendar-view--standalone']
            }], yearFormat: [{
                type: Input
            }] } });
//# sourceMappingURL=data:application/json;base64,