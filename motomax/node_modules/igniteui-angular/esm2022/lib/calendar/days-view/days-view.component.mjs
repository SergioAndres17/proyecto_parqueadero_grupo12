import { Component, Output, EventEmitter, Input, HostListener, ViewChildren, HostBinding, Inject, LOCALE_ID, booleanAttribute, ChangeDetectionStrategy, } from '@angular/core';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { NgIf, NgFor, TitleCasePipe } from '@angular/common';
import { CalendarSelection } from '../../calendar/calendar';
import { IgxDayItemComponent } from './day-item.component';
import { DateRangeType } from '../../core/dates';
import { IgxCalendarBaseDirective } from '../calendar-base';
import { intoChunks } from '../../core/utils';
import { areSameMonth, generateMonth, getClosestActiveDate, getNextActiveDate, getPreviousActiveDate, isDateInRanges, } from "../common/helpers";
import { CalendarDay } from '../common/model';
import * as i0 from "@angular/core";
import * as i1 from "../../core/utils";
let NEXT_ID = 0;
export class IgxDaysViewComponent extends IgxCalendarBaseDirective {
    #standalone;
    get standalone() {
        return this.#standalone;
    }
    set standalone(value) {
        this.#standalone = value;
    }
    get activeDescendant() {
        if (this.tabIndex === -1)
            return;
        return this.activeDate.getTime();
    }
    /**
     * @hidden
     * @internal
     */
    set activeDate(value) {
        this._activeDate = value;
        this.changePreviewRange(value);
        this.activeDateChange.emit(this._activeDate);
    }
    get activeDate() {
        return this._activeDate ?? this.viewDate;
    }
    /**
     * @hidden
     * @internal
     */
    set previewRangeDate(value) {
        this._previewRangeDate = value;
        this.previewRangeDateChange.emit(value);
    }
    get previewRangeDate() {
        return this._previewRangeDate;
    }
    set hideLeadingDays(value) {
        this._hideLeadingDays = value;
        this.cdr.detectChanges();
    }
    get hideLeadingDays() {
        return this._hideLeadingDays ?? this.hideOutsideDays;
    }
    set hideTrailingDays(value) {
        this._hideTrailingDays = value;
        this.cdr.detectChanges();
    }
    get hideTrailingDays() {
        return this._hideTrailingDays ?? this.hideOutsideDays;
    }
    set showActiveDay(value) {
        this._showActiveDay = value;
    }
    get showActiveDay() {
        return this._showActiveDay;
    }
    /**
     * @hidden
     */
    constructor(platform, _localeId, el, cdr) {
        super(platform, _localeId, null, cdr);
        this.el = el;
        this.cdr = cdr;
        this.#standalone = true;
        /**
         * Sets/gets the `id` of the days view.
         * If not set, the `id` will have value `"igx-days-view-0"`.
         * ```html
         * <igx-days-view id="my-days-view"></igx-days-view>
         * ```
         * ```typescript
         * let daysViewId = this.daysView.id;
         * ```
         */
        this.id = `igx-days-view-${NEXT_ID++}`;
        this.tabIndex = 0;
        this.role = 'grid';
        this.viewClass = true;
        /**
         * @hidden
         */
        this.dateSelected = new EventEmitter();
        /**
         * @hidden
         */
        this.pageChanged = new EventEmitter();
        /**
         * @hidden
         */
        this.activeDateChange = new EventEmitter();
        /**
         * @hidden
         */
        this.previewRangeDateChange = new EventEmitter();
    }
    /**
     * @hidden
     */
    handleArrowKeydown(event, delta) {
        event.preventDefault();
        event.stopPropagation();
        const date = getClosestActiveDate(CalendarDay.from(this.activeDate), delta, this.disabledDates);
        if (!areSameMonth(this.activeDate, date.native)) {
            this.pageChanged.emit({
                monthAction: delta > 0 ? "next" /* ScrollDirection.NEXT */ : "prev" /* ScrollDirection.PREV */,
                key: event.key,
                nextDate: date.native
            });
        }
        this.activeDate = date.native;
        this.viewDate = date.native;
        this.clearPreviewRange();
        this.changePreviewRange(date.native);
        this.cdr.detectChanges();
    }
    /**
     * @hidden
     */
    onArrowRight(event) {
        this.handleArrowKeydown(event, 1);
    }
    /**
     * @hidden
     */
    onArrowLeft(event) {
        this.handleArrowKeydown(event, -1);
    }
    /**
     * @hidden
     */
    onArrowUp(event) {
        this.handleArrowKeydown(event, -7);
    }
    /**
     * @hidden
     */
    onArrowDown(event) {
        this.handleArrowKeydown(event, 7);
    }
    /**
     * @hidden
     */
    onKeydownEnter(event) {
        event.stopPropagation();
        this.selectActiveDate();
    }
    /**
     * @hidden
     */
    onKeydownHome(event) {
        event.preventDefault();
        event.stopPropagation();
        const first = CalendarDay.from(this.activeDate);
        this.activeDate = getNextActiveDate(first.set({ date: 1 }), this.disabledDates).native;
    }
    /**
     * @hidden
     */
    onKeydownEnd(event) {
        event.preventDefault();
        event.stopPropagation();
        const last = CalendarDay.from(this.activeDate);
        this.activeDate = getPreviousActiveDate(last.set({ month: last.month + 1, date: 0 }), this.disabledDates).native;
    }
    /**
     * @hidden
     */
    handleFocus() {
        this._showActiveDay = true;
        this.changePreviewRange(this.activeDate);
    }
    /**
     * @hidden
     */
    handleBlur() {
        this._showActiveDay = false;
        this.clearPreviewRange();
    }
    /**
     * @hidden
     */
    handleDateClick(item) {
        const date = item.date.native;
        if (item.isPreviousMonth) {
            this.pageChanged.emit({
                monthAction: "prev" /* ScrollDirection.PREV */,
                key: '',
                nextDate: date
            });
        }
        if (item.isNextMonth) {
            this.pageChanged.emit({
                monthAction: "next" /* ScrollDirection.NEXT */,
                key: '',
                nextDate: date
            });
        }
        if (this.tabIndex !== -1) {
            this.el.nativeElement.focus();
        }
        this.activeDate = item.date.native;
        this.selectActiveDate();
    }
    selectActiveDate() {
        this.selectDate(this.activeDate);
        this.dateSelected.emit(this.activeDate);
        this.selected.emit(this.selectedDates);
        this.clearPreviewRange();
    }
    get calendarMonth() {
        return Array.from(generateMonth(this.viewDate, this.weekStart));
    }
    get monthWeeks() {
        return Array.from(intoChunks(this.calendarMonth, 7));
    }
    /**
     * Returns the week number by date
     *
     * @hidden
     */
    getWeekNumber(date) {
        return date.week;
    }
    /**
     * Returns the locale representation of the date in the days view.
     *
     * @hidden
     */
    formattedDate(value) {
        if (this.formatViews.day) {
            return this.formatterDay.format(value);
        }
        return `${value.getDate()}`;
    }
    /**
     * @hidden
     */
    get weekHeaderLabels() {
        const weekdays = [];
        const rawFormatter = new Intl.DateTimeFormat(this.locale, { weekday: 'long' });
        for (const day of this.monthWeeks.at(0)) {
            weekdays.push({
                long: rawFormatter.format(day.native),
                formatted: this.formatterWeekday.format(day.native)
            });
        }
        return weekdays;
    }
    get weekNumberHeader() {
        const weekOfYear = (style) => {
            const dn = new Intl.DisplayNames(this.locale, {
                type: 'dateTimeField',
                style,
            });
            return dn.of('weekOfYear');
        };
        return {
            short: weekOfYear('narrow').substring(0, 1),
            long: weekOfYear('long'),
        };
    }
    /**
     * @hidden
     */
    rowTracker(index, item) {
        return `${item[index].month}${item[index].date}`;
    }
    /**
     * @hidden
     */
    dateTracker(_, item) {
        return `${item.month}--${item.date}`;
    }
    /**
     * @hidden
     */
    isSelected(date) {
        const dates = this.value;
        const hasValue = this.value || (Array.isArray(this.value) && this.value.length === 1);
        if (isDateInRanges(date, this.disabledDates)) {
            return false;
        }
        if (this.selection === CalendarSelection.SINGLE) {
            return !!this.value && date.equalTo(this.value);
        }
        if (!hasValue) {
            return false;
        }
        if (this.selection === CalendarSelection.MULTI && dates.length > 0) {
            return isDateInRanges(date, [
                {
                    type: DateRangeType.Specific,
                    dateRange: dates,
                },
            ]);
        }
        if (this.selection === CalendarSelection.RANGE && dates.length > 0) {
            return isDateInRanges(date, [
                {
                    type: DateRangeType.Between,
                    dateRange: [dates.at(0), dates.at(-1)],
                },
            ]);
        }
    }
    /**
     * @hidden
     */
    isFirstInRange(date) {
        const dates = this.selectedDates;
        if (this.isSingleSelection || dates.length === 0) {
            return false;
        }
        let target = dates.at(0);
        if (this.previewRangeDate && this.previewRangeDate < target) {
            target = this.previewRangeDate;
        }
        return date.equalTo(target);
    }
    /**
     * @hidden
     */
    isLastInRange(date) {
        const dates = this.selectedDates;
        if (this.isSingleSelection || dates.length === 0) {
            return false;
        }
        let target = dates.at(-1);
        if (this.previewRangeDate && this.previewRangeDate > target) {
            target = this.previewRangeDate;
        }
        return date.equalTo(target);
    }
    /**
     * @hidden
     */
    isActiveDate(day) {
        return this._showActiveDay && day.equalTo(this.activeDate);
    }
    /**
     * @hidden
     */
    isWithinRange(date, checkForRange, min, max) {
        const dates = this.selectedDates;
        if (checkForRange && !(Array.isArray(dates) && dates.length > 1)) {
            return false;
        }
        min = min ? min : dates.at(0);
        max = max ? max : dates.at(-1);
        return isDateInRanges(date, [
            {
                type: DateRangeType.Between,
                dateRange: [min, max]
            }
        ]);
    }
    isWithinPreviewRange(date) {
        if (this.selection !== 'range')
            return false;
        const dates = this.selectedDates;
        if (!(dates.length > 0 && this.previewRangeDate)) {
            return false;
        }
        return isDateInRanges(date, [
            {
                type: DateRangeType.Between,
                dateRange: [dates.at(0), this.previewRangeDate],
            },
        ]);
    }
    /**
     * @hidden
     */
    get isSingleSelection() {
        return this.selection !== CalendarSelection.RANGE;
    }
    /**
     * @hidden @internal
     */
    changePreviewRange(date) {
        const dates = this.value;
        if (this.selection === 'range' && dates.length === 1) {
            const first = CalendarDay.from(dates.at(0));
            if (!first.equalTo(date)) {
                this.setPreviewRangeDate(date);
            }
        }
    }
    /**
     * @hidden @internal
     */
    clearPreviewRange() {
        if (this.previewRangeDate) {
            this.setPreviewRangeDate(undefined);
        }
    }
    setPreviewRangeDate(value) {
        this.previewRangeDate = value;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxDaysViewComponent, deps: [{ token: i1.PlatformUtil }, { token: LOCALE_ID }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "18.2.4", type: IgxDaysViewComponent, isStandalone: true, selector: "igx-days-view", inputs: { id: "id", tabIndex: "tabIndex", role: "role", standalone: "standalone", showWeekNumbers: ["showWeekNumbers", "showWeekNumbers", booleanAttribute], activeDate: "activeDate", previewRangeDate: "previewRangeDate", hideLeadingDays: ["hideLeadingDays", "hideLeadingDays", booleanAttribute], hideTrailingDays: ["hideTrailingDays", "hideTrailingDays", booleanAttribute], showActiveDay: ["showActiveDay", "showActiveDay", booleanAttribute] }, outputs: { dateSelected: "dateSelected", pageChanged: "pageChanged", activeDateChange: "activeDateChange", previewRangeDateChange: "previewRangeDateChange" }, host: { listeners: { "keydown.arrowright": "onArrowRight($event)", "keydown.arrowleft": "onArrowLeft($event)", "keydown.arrowup": "onArrowUp($event)", "keydown.arrowdown": "onArrowDown($event)", "keydown.Space": "onKeydownEnter($event)", "keydown.enter": "onKeydownEnter($event)", "keydown.home": "onKeydownHome($event)", "keydown.end": "onKeydownEnd($event)", "focus": "handleFocus()", "blur": "handleBlur()" }, properties: { "attr.id": "this.id", "attr.tabIndex": "this.tabIndex", "attr.role": "this.role", "class.igx-days-view": "this.viewClass", "class.igx-days-view--standalone": "this.standalone", "attr.aria-activeDescendant": "this.activeDescendant" } }, providers: [
            {
                multi: true,
                provide: NG_VALUE_ACCESSOR,
                useExisting: IgxDaysViewComponent
            },
        ], viewQueries: [{ propertyName: "dates", predicate: IgxDayItemComponent, descendants: true, read: IgxDayItemComponent }], usesInheritance: true, ngImport: i0, template: "<div\n    role=\"row\"\n    class=\"igx-days-view__row\"\n    [title]=\"weekNumberHeader.long | titlecase\"\n>\n    <div\n        role=\"columnheader\"\n        *ngIf=\"showWeekNumbers\"\n        class=\"igx-days-view__label igx-days-view__label--week-number\"\n    >\n        <span>\n            <i>{{ weekNumberHeader.short | titlecase }}</i>\n        </span>\n    </div>\n    <span\n        role=\"columnheader\"\n        [attr.aria-label]=\"dayName.long\"\n        *ngFor=\"let dayName of weekHeaderLabels\"\n        class=\"igx-days-view__label\"\n    >\n        <span class=\"igx-days-view__label-inner\">\n            {{ dayName.formatted | titlecase }}\n        </span>\n    </span>\n</div>\n\n<div\n    *ngFor=\"\n        let week of monthWeeks;\n        last as isLast;\n        index as i;\n        trackBy: rowTracker\n    \"\n    class=\"igx-days-view__row\"\n    role=\"row\"\n>\n    <div\n        *ngIf=\"showWeekNumbers\"\n        class=\"igx-days-view__date igx-days-view__date--week-number\"\n    >\n        <span\n            role=\"rowheader\"\n            class=\"igx-days-view__date-inner igx-days-view__date-inner--week-number\"\n        >\n            {{ getWeekNumber(week[0]) }}\n        </span>\n    </div>\n\n    <igx-day-item\n        #item\n        *ngFor=\"let day of week; trackBy: dateTracker\"\n        class=\"igx-days-view__date\"\n        role=\"gridcell\"\n        [attr.id]=\"item.isCurrentMonth && day.timestamp\"\n        [attr.aria-selected]=\"isSelected(day)\"\n        [attr.aria-disabled]=\"isDateDisabled(day.native)\"\n        [attr.aria-label]=\"\n            isFirstInRange(day)\n                ? day.native.toDateString() +\n                  ', ' +\n                  resourceStrings.igx_calendar_range_start\n                : isLastInRange(day)\n                  ? day.native.toDateString() +\n                    ', ' +\n                    resourceStrings.igx_calendar_range_end\n                  : day.native.toDateString()\n        \"\n        [date]=\"day\"\n        [viewDate]=\"viewDate\"\n        [selection]=\"selection\"\n        [selected]=\"isSelected(day)\"\n        [isActive]=\"isActiveDate(day)\"\n        [isLastInRange]=\"isLastInRange(day)\"\n        [isFirstInRange]=\"isFirstInRange(day)\"\n        [isWithinRange]=\"isWithinRange(day.native, true)\"\n        [isWithinPreviewRange]=\"isWithinPreviewRange(day.native)\"\n        [disabledDates]=\"disabledDates\"\n        [specialDates]=\"specialDates\"\n        [hideLeadingDays]=\"hideLeadingDays\"\n        [hideTrailingDays]=\"hideTrailingDays\"\n        [attr.tabindex]=\"-1\"\n        (click)=\"handleDateClick(item)\"\n        (mouseEnter)=\"changePreviewRange(day.native)\"\n        (mouseLeave)=\"clearPreviewRange()\"\n    >\n        {{ formattedDate(day.native) }}\n    </igx-day-item>\n</div>\n", dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: IgxDayItemComponent, selector: "igx-day-item", inputs: ["date", "viewDate", "selection", "selected", "disabledDates", "specialDates", "hideOutsideDays", "isLastInRange", "isFirstInRange", "isWithinRange", "isWithinPreviewRange", "hideLeadingDays", "hideTrailingDays", "isActive"], outputs: ["dateSelection", "mouseEnter", "mouseLeave", "mouseDown"] }, { kind: "pipe", type: TitleCasePipe, name: "titlecase" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxDaysViewComponent, decorators: [{
            type: Component,
            args: [{ providers: [
                        {
                            multi: true,
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: IgxDaysViewComponent
                        },
                    ], selector: 'igx-days-view', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, imports: [NgIf, NgFor, IgxDayItemComponent, TitleCasePipe], template: "<div\n    role=\"row\"\n    class=\"igx-days-view__row\"\n    [title]=\"weekNumberHeader.long | titlecase\"\n>\n    <div\n        role=\"columnheader\"\n        *ngIf=\"showWeekNumbers\"\n        class=\"igx-days-view__label igx-days-view__label--week-number\"\n    >\n        <span>\n            <i>{{ weekNumberHeader.short | titlecase }}</i>\n        </span>\n    </div>\n    <span\n        role=\"columnheader\"\n        [attr.aria-label]=\"dayName.long\"\n        *ngFor=\"let dayName of weekHeaderLabels\"\n        class=\"igx-days-view__label\"\n    >\n        <span class=\"igx-days-view__label-inner\">\n            {{ dayName.formatted | titlecase }}\n        </span>\n    </span>\n</div>\n\n<div\n    *ngFor=\"\n        let week of monthWeeks;\n        last as isLast;\n        index as i;\n        trackBy: rowTracker\n    \"\n    class=\"igx-days-view__row\"\n    role=\"row\"\n>\n    <div\n        *ngIf=\"showWeekNumbers\"\n        class=\"igx-days-view__date igx-days-view__date--week-number\"\n    >\n        <span\n            role=\"rowheader\"\n            class=\"igx-days-view__date-inner igx-days-view__date-inner--week-number\"\n        >\n            {{ getWeekNumber(week[0]) }}\n        </span>\n    </div>\n\n    <igx-day-item\n        #item\n        *ngFor=\"let day of week; trackBy: dateTracker\"\n        class=\"igx-days-view__date\"\n        role=\"gridcell\"\n        [attr.id]=\"item.isCurrentMonth && day.timestamp\"\n        [attr.aria-selected]=\"isSelected(day)\"\n        [attr.aria-disabled]=\"isDateDisabled(day.native)\"\n        [attr.aria-label]=\"\n            isFirstInRange(day)\n                ? day.native.toDateString() +\n                  ', ' +\n                  resourceStrings.igx_calendar_range_start\n                : isLastInRange(day)\n                  ? day.native.toDateString() +\n                    ', ' +\n                    resourceStrings.igx_calendar_range_end\n                  : day.native.toDateString()\n        \"\n        [date]=\"day\"\n        [viewDate]=\"viewDate\"\n        [selection]=\"selection\"\n        [selected]=\"isSelected(day)\"\n        [isActive]=\"isActiveDate(day)\"\n        [isLastInRange]=\"isLastInRange(day)\"\n        [isFirstInRange]=\"isFirstInRange(day)\"\n        [isWithinRange]=\"isWithinRange(day.native, true)\"\n        [isWithinPreviewRange]=\"isWithinPreviewRange(day.native)\"\n        [disabledDates]=\"disabledDates\"\n        [specialDates]=\"specialDates\"\n        [hideLeadingDays]=\"hideLeadingDays\"\n        [hideTrailingDays]=\"hideTrailingDays\"\n        [attr.tabindex]=\"-1\"\n        (click)=\"handleDateClick(item)\"\n        (mouseEnter)=\"changePreviewRange(day.native)\"\n        (mouseLeave)=\"clearPreviewRange()\"\n    >\n        {{ formattedDate(day.native) }}\n    </igx-day-item>\n</div>\n" }]
        }], ctorParameters: () => [{ type: i1.PlatformUtil }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }], propDecorators: { id: [{
                type: HostBinding,
                args: ['attr.id']
            }, {
                type: Input
            }], tabIndex: [{
                type: HostBinding,
                args: ['attr.tabIndex']
            }, {
                type: Input
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }, {
                type: Input
            }], viewClass: [{
                type: HostBinding,
                args: ['class.igx-days-view']
            }], standalone: [{
                type: Input
            }, {
                type: HostBinding,
                args: ['class.igx-days-view--standalone']
            }], activeDescendant: [{
                type: HostBinding,
                args: ['attr.aria-activeDescendant']
            }], showWeekNumbers: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], activeDate: [{
                type: Input
            }], previewRangeDate: [{
                type: Input
            }], hideLeadingDays: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], hideTrailingDays: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], showActiveDay: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], dateSelected: [{
                type: Output
            }], pageChanged: [{
                type: Output
            }], activeDateChange: [{
                type: Output
            }], previewRangeDateChange: [{
                type: Output
            }], dates: [{
                type: ViewChildren,
                args: [IgxDayItemComponent, { read: IgxDayItemComponent }]
            }], onArrowRight: [{
                type: HostListener,
                args: ['keydown.arrowright', ['$event']]
            }], onArrowLeft: [{
                type: HostListener,
                args: ['keydown.arrowleft', ['$event']]
            }], onArrowUp: [{
                type: HostListener,
                args: ['keydown.arrowup', ['$event']]
            }], onArrowDown: [{
                type: HostListener,
                args: ['keydown.arrowdown', ['$event']]
            }], onKeydownEnter: [{
                type: HostListener,
                args: ['keydown.Space', ['$event']]
            }, {
                type: HostListener,
                args: ['keydown.enter', ['$event']]
            }], onKeydownHome: [{
                type: HostListener,
                args: ['keydown.home', ['$event']]
            }], onKeydownEnd: [{
                type: HostListener,
                args: ['keydown.end', ['$event']]
            }], handleFocus: [{
                type: HostListener,
                args: ['focus']
            }], handleBlur: [{
                type: HostListener,
                args: ['blur']
            }] } });
//# sourceMappingURL=data:application/json;base64,