import { Component, Input, Output, EventEmitter, HostBinding, booleanAttribute, ChangeDetectionStrategy } from '@angular/core';
import { CalendarSelection } from '../calendar';
import { CalendarDay } from '../common/model';
import { areSameMonth, isNextMonth, isPreviousMonth, isDateInRanges } from '../common/helpers';
import * as i0 from "@angular/core";
/**
 * @hidden
 */
export class IgxDayItemComponent {
    /**
     * Returns boolean indicating if the day is selected
     *
     */
    get selected() {
        return this._selected;
    }
    /**
     * Selects the day
     */
    set selected(value) {
        this._selected = value;
    }
    get hideLeading() {
        return this.hideLeadingDays && this.isPreviousMonth;
    }
    get hideTrailing() {
        return this.hideTrailingDays && this.isNextMonth;
    }
    get isCurrentMonth() {
        return areSameMonth(this.date, this.viewDate);
    }
    get isPreviousMonth() {
        return isPreviousMonth(this.date, this.viewDate);
    }
    get isNextMonth() {
        return isNextMonth(this.date, this.viewDate);
    }
    get nativeElement() {
        return this.elementRef.nativeElement;
    }
    get isSelectedCSS() {
        const selectable = !this.isInactive || (this.isWithinRange && this.selection === "range");
        return !this.isDisabled && selectable && this.selected;
    }
    get isInactive() {
        return !this.isCurrentMonth;
    }
    get isHidden() {
        return (this.hideLeading || this.hideTrailing) && this.isInactive;
    }
    get isToday() {
        return !this.isInactive && this.date.equalTo(CalendarDay.today);
    }
    get isWeekend() {
        return this.date.weekend;
    }
    get isDisabled() {
        if (!this.disabledDates) {
            return false;
        }
        return isDateInRanges(this.date, this.disabledDates);
    }
    get isFocusable() {
        return this.isCurrentMonth && !this.isHidden && !this.isDisabled;
    }
    onMouseEnter() {
        this.mouseEnter.emit();
    }
    onMouseLeave() {
        this.mouseLeave.emit();
    }
    onMouseDown(event) {
        event.preventDefault();
        this.mouseDown.emit();
    }
    get isWithinRangeCSS() {
        return !this.isSingleSelection && this.isWithinRange;
    }
    get isWithinPreviewRangeCSS() {
        return !this.isSingleSelection && this.isWithinPreviewRange;
    }
    get isSpecial() {
        if (!this.specialDates) {
            return false;
        }
        return !this.isInactive && isDateInRanges(this.date, this.specialDates);
    }
    get isDisabledCSS() {
        return this.isHidden || this.isDisabled;
    }
    get isSingleSelection() {
        return this.selection !== CalendarSelection.RANGE;
    }
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.hideOutsideDays = false;
        this.isLastInRange = false;
        this.isFirstInRange = false;
        this.isWithinRange = false;
        this.isWithinPreviewRange = false;
        this.hideLeadingDays = false;
        this.hideTrailingDays = false;
        this.dateSelection = new EventEmitter();
        this.mouseEnter = new EventEmitter();
        this.mouseLeave = new EventEmitter();
        this.mouseDown = new EventEmitter();
        this.isActive = false;
        this._selected = false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxDayItemComponent, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "18.2.4", type: IgxDayItemComponent, isStandalone: true, selector: "igx-day-item", inputs: { date: "date", viewDate: "viewDate", selection: "selection", selected: "selected", disabledDates: "disabledDates", specialDates: "specialDates", hideOutsideDays: ["hideOutsideDays", "hideOutsideDays", booleanAttribute], isLastInRange: ["isLastInRange", "isLastInRange", booleanAttribute], isFirstInRange: ["isFirstInRange", "isFirstInRange", booleanAttribute], isWithinRange: ["isWithinRange", "isWithinRange", booleanAttribute], isWithinPreviewRange: ["isWithinPreviewRange", "isWithinPreviewRange", booleanAttribute], hideLeadingDays: ["hideLeadingDays", "hideLeadingDays", booleanAttribute], hideTrailingDays: ["hideTrailingDays", "hideTrailingDays", booleanAttribute], isActive: ["isActive", "isActive", booleanAttribute] }, outputs: { dateSelection: "dateSelection", mouseEnter: "mouseEnter", mouseLeave: "mouseLeave", mouseDown: "mouseDown" }, host: { properties: { "class.igx-days-view__date--last": "this.isLastInRange", "class.igx-days-view__date--first": "this.isFirstInRange", "class.igx-days-view__date--active": "this.isActive", "class.igx-days-view__date--selected": "this.isSelectedCSS", "class.igx-days-view__date--inactive": "this.isInactive", "class.igx-days-view__date--hidden": "this.isHidden", "class.igx-days-view__date--current": "this.isToday", "class.igx-days-view__date--weekend": "this.isWeekend", "class.igx-days-view__date--range": "this.isWithinRangeCSS", "class.igx-days-view__date--range-preview": "this.isWithinPreviewRangeCSS", "class.igx-days-view__date--special": "this.isSpecial", "class.igx-days-view__date--disabled": "this.isDisabledCSS", "class.igx-days-view__date--single": "this.isSingleSelection" } }, ngImport: i0, template: "<span\n    aria-hidden=\"true\"\n    class=\"igx-days-view__date-inner\"\n    (mouseenter)=\"onMouseEnter()\"\n    (mouseleave)=\"onMouseLeave()\"\n    (mousedown)=\"onMouseDown($event)\"\n>\n    <ng-content></ng-content>\n</span>\n", changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxDayItemComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igx-day-item', changeDetection: ChangeDetectionStrategy.OnPush, standalone: true, template: "<span\n    aria-hidden=\"true\"\n    class=\"igx-days-view__date-inner\"\n    (mouseenter)=\"onMouseEnter()\"\n    (mouseleave)=\"onMouseLeave()\"\n    (mousedown)=\"onMouseDown($event)\"\n>\n    <ng-content></ng-content>\n</span>\n" }]
        }], ctorParameters: () => [{ type: i0.ElementRef }], propDecorators: { date: [{
                type: Input
            }], viewDate: [{
                type: Input
            }], selection: [{
                type: Input
            }], selected: [{
                type: Input
            }], disabledDates: [{
                type: Input
            }], specialDates: [{
                type: Input
            }], hideOutsideDays: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], isLastInRange: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }, {
                type: HostBinding,
                args: ['class.igx-days-view__date--last']
            }], isFirstInRange: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }, {
                type: HostBinding,
                args: ['class.igx-days-view__date--first']
            }], isWithinRange: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], isWithinPreviewRange: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], hideLeadingDays: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], hideTrailingDays: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], dateSelection: [{
                type: Output
            }], mouseEnter: [{
                type: Output
            }], mouseLeave: [{
                type: Output
            }], mouseDown: [{
                type: Output
            }], isActive: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }, {
                type: HostBinding,
                args: ['class.igx-days-view__date--active']
            }], isSelectedCSS: [{
                type: HostBinding,
                args: ['class.igx-days-view__date--selected']
            }], isInactive: [{
                type: HostBinding,
                args: ['class.igx-days-view__date--inactive']
            }], isHidden: [{
                type: HostBinding,
                args: ['class.igx-days-view__date--hidden']
            }], isToday: [{
                type: HostBinding,
                args: ['class.igx-days-view__date--current']
            }], isWeekend: [{
                type: HostBinding,
                args: ['class.igx-days-view__date--weekend']
            }], isWithinRangeCSS: [{
                type: HostBinding,
                args: ['class.igx-days-view__date--range']
            }], isWithinPreviewRangeCSS: [{
                type: HostBinding,
                args: ['class.igx-days-view__date--range-preview']
            }], isSpecial: [{
                type: HostBinding,
                args: ['class.igx-days-view__date--special']
            }], isDisabledCSS: [{
                type: HostBinding,
                args: ['class.igx-days-view__date--disabled']
            }], isSingleSelection: [{
                type: HostBinding,
                args: ['class.igx-days-view__date--single']
            }] } });
//# sourceMappingURL=data:application/json;base64,