import { Component, HostListener, ViewChild, HostBinding, Input, } from "@angular/core";
import { NgIf, NgStyle, NgTemplateOutlet, DatePipe } from "@angular/common";
import { NG_VALUE_ACCESSOR } from "@angular/forms";
import { IgxMonthsViewComponent } from "../months-view/months-view.component";
import { IgxYearsViewComponent } from "../years-view/years-view.component";
import { IgxDaysViewComponent } from "../days-view/days-view.component";
import { IgxIconComponent } from "../../icon/icon.component";
import { IgxCalendarView } from "../calendar";
import { CalendarDay } from "../common/model";
import { IgxCalendarBaseDirective } from "../calendar-base";
import { KeyboardNavigationService } from "../calendar.services";
import { formatToParts } from "../common/helpers";
import * as i0 from "@angular/core";
let NEXT_ID = 0;
export class IgxMonthPickerComponent extends IgxCalendarBaseDirective {
    constructor() {
        super(...arguments);
        /**
         * Sets/gets the `id` of the month picker.
         * If not set, the `id` will have value `"igx-month-picker-0"`.
         */
        this.id = `igx-month-picker-${NEXT_ID++}`;
        /**
         * The default css class applied to the component.
         *
         * @hidden
         */
        this.styleClass = true;
    }
    /**
     * @hidden
     */
    previousPage(event) {
        event?.preventDefault();
        this.previousViewDate = this.viewDate;
        if (this.isDefaultView) {
            this.viewDate = CalendarDay.from(this.viewDate).add('year', -1).native;
        }
        if (this.isDecadeView) {
            this.viewDate = CalendarDay.from(this.viewDate).add('year', -15).native;
        }
        this.viewDateChanged.emit({
            previousValue: this.previousViewDate,
            currentValue: this.viewDate,
        });
    }
    /**
     * @hidden
     */
    nextPage(event) {
        event?.preventDefault();
        this.previousViewDate = this.viewDate;
        if (this.isDefaultView) {
            this.viewDate = CalendarDay.from(this.viewDate).add('year', 1).native;
        }
        if (this.isDecadeView) {
            this.viewDate = CalendarDay.from(this.viewDate).add('year', 15).native;
        }
        this.viewDateChanged.emit({
            previousValue: this.previousViewDate,
            currentValue: this.viewDate,
        });
    }
    /**
     * @hidden
     * @internal
     */
    onActiveViewDecadeKB(date, event, activeViewIdx) {
        super.activeViewDecadeKB(event, activeViewIdx);
        if (this.platform.isActivationKey(event)) {
            this.viewDate = date;
            this.wrapper.nativeElement.focus();
        }
    }
    /**
     * @hidden
     * @internal
     */
    onActiveViewDecade(event, date, activeViewIdx) {
        event.preventDefault();
        super.activeViewDecade(activeViewIdx);
        this.viewDate = date;
    }
    /**
     * @hidden
     */
    activeViewDecadeKB(event) {
        super.activeViewDecadeKB(event);
        if (event.key === this.platform.KEYMAP.ARROW_RIGHT) {
            this.nextPage(event);
        }
        if (event.key === this.platform.KEYMAP.ARROW_LEFT) {
            this.previousPage(event);
        }
    }
    /**
     * @hidden
     */
    activeViewDecade() {
        super.activeViewDecade();
        requestAnimationFrame(() => {
            this.dacadeView.el.nativeElement.focus();
        });
    }
    /**
     * @hidden
     */
    changePageKB(event, next = true) {
        if (this.platform.isActivationKey(event)) {
            event.stopPropagation();
            if (next) {
                this.nextPage();
            }
            else {
                this.previousPage();
            }
        }
    }
    /**
     * @hidden
     */
    selectYear(event) {
        this.previousViewDate = this.viewDate;
        this.viewDate = new Date(event.getFullYear(), event.getMonth(), event.getDate());
        this.activeView = IgxCalendarView.Year;
        this.wrapper.nativeElement.focus();
    }
    /**
     * @hidden
     */
    selectMonth(event) {
        this.selectDate(event);
        this.selected.emit(this.selectedDates);
    }
    /**
     * Selects a date.
     * ```typescript
     *  this.monthPicker.selectDate(new Date(`2018-06-12`));
     * ```
     */
    selectDate(value) {
        if (!value) {
            return new Date();
        }
        super.selectDate(value);
        this.viewDate = value;
    }
    /**
     * @hidden
     */
    getNextYear() {
        return CalendarDay.from(this.viewDate).add('year', 1).year;
    }
    /**
     * @hidden
     */
    getPreviousYear() {
        return CalendarDay.from(this.viewDate).add('year', -1).year;
    }
    /**
     * @hidden
     */
    updateDate(date) {
        this.previousViewDate = this.viewDate;
        this.viewDate = CalendarDay.from(date).add('year', -this.activeViewIdx).native;
        if (this.isDefaultView) {
            this.viewDateChanged.emit({
                previousValue: this.previousViewDate,
                currentValue: this.viewDate,
            });
        }
    }
    onMouseDown(event) {
        event.stopPropagation();
        this.wrapper.nativeElement.focus();
    }
    /**
     * @hidden
     * @internal
     */
    set showActiveDay(value) {
        this._showActiveDay = value;
        this.cdr.detectChanges();
    }
    get showActiveDay() {
        return this._showActiveDay;
    }
    get activeDescendant() {
        if (this.activeView === 'month') {
            return this.value?.getTime();
        }
        return this._activeDescendant ?? this.viewDate.getTime();
    }
    set activeDescendant(date) {
        this._activeDescendant = date.getTime();
    }
    get isDefaultView() {
        return this.activeView === IgxCalendarView.Year;
    }
    ngOnInit() {
        this.activeView = IgxCalendarView.Year;
    }
    ngAfterViewInit() {
        this.keyboardNavigation
            .attachKeyboardHandlers(this.wrapper, this)
            .set("ArrowUp", this.onArrowUp)
            .set("ArrowDown", this.onArrowDown)
            .set("ArrowLeft", this.onArrowLeft)
            .set("ArrowRight", this.onArrowRight)
            .set("Enter", this.onEnter)
            .set(" ", this.onEnter)
            .set("Home", this.onHome)
            .set("End", this.onEnd)
            .set("PageUp", this.handlePageUp)
            .set("PageDown", this.handlePageDown);
        this.wrapper.nativeElement.addEventListener('focus', (event) => this.onWrapperFocus(event));
        this.wrapper.nativeElement.addEventListener('blur', (event) => this.onWrapperBlur(event));
        this.activeView$.subscribe((view) => {
            this.activeViewChanged.emit(view);
            this.viewDateChanged.emit({
                previousValue: this.previousViewDate,
                currentValue: this.viewDate
            });
        });
    }
    onWrapperFocus(event) {
        event.stopPropagation();
        this.showActiveDay = true;
    }
    onWrapperBlur(event) {
        event.stopPropagation();
        this.showActiveDay = false;
        this._onTouchedCallback();
    }
    handlePageUpDown(event, delta) {
        event.preventDefault();
        event.stopPropagation();
        if (this.isDefaultView && event.shiftKey) {
            this.viewDate = CalendarDay.from(this.viewDate).add('year', delta).native;
            this.cdr.detectChanges();
        }
        else {
            delta > 0 ? this.nextPage() : this.previousPage();
        }
    }
    handlePageUp(event) {
        this.handlePageUpDown(event, -1);
    }
    handlePageDown(event) {
        this.handlePageUpDown(event, 1);
    }
    onArrowUp(event) {
        if (this.isDefaultView) {
            this.monthsView.onKeydownArrowUp(event);
        }
        if (this.isDecadeView) {
            this.dacadeView.onKeydownArrowUp(event);
        }
    }
    onArrowDown(event) {
        if (this.isDefaultView) {
            this.monthsView.onKeydownArrowDown(event);
        }
        if (this.isDecadeView) {
            this.dacadeView.onKeydownArrowDown(event);
        }
    }
    onArrowLeft(event) {
        if (this.isDefaultView) {
            this.monthsView.onKeydownArrowLeft(event);
        }
        if (this.isDecadeView) {
            this.dacadeView.onKeydownArrowLeft(event);
        }
    }
    onArrowRight(event) {
        if (this.isDefaultView) {
            this.monthsView.onKeydownArrowRight(event);
        }
        if (this.isDecadeView) {
            this.dacadeView.onKeydownArrowRight(event);
        }
    }
    onEnter(event) {
        event.stopPropagation();
        if (this.isDefaultView) {
            this.monthsView.onKeydownEnter(event);
        }
        if (this.isDecadeView) {
            this.dacadeView.onKeydownEnter(event);
        }
    }
    onHome(event) {
        event.stopPropagation();
        if (this.isDefaultView) {
            this.monthsView.onKeydownHome(event);
        }
        if (this.isDecadeView) {
            this.dacadeView.onKeydownHome(event);
        }
    }
    onEnd(event) {
        event.stopPropagation();
        if (this.isDefaultView) {
            this.monthsView.onKeydownEnd(event);
        }
        if (this.isDecadeView) {
            this.dacadeView.onKeydownEnd(event);
        }
    }
    /**
     * @hidden
     * @internal
     */
    ngOnDestroy() {
        this.keyboardNavigation.detachKeyboardHandlers();
        this.wrapper?.nativeElement.removeEventListener('focus', this.onWrapperFocus);
        this.wrapper?.nativeElement.removeEventListener('blur', this.onWrapperBlur);
    }
    /**
     * @hidden
     * @internal
     */
    getPrevYearDate(date) {
        return CalendarDay.from(date).add('year', -1).native;
    }
    /**
     * @hidden
     * @internal
     */
    getNextYearDate(date) {
        return CalendarDay.from(date).add('year', 1).native;
    }
    /**
     * Getter for the context object inside the calendar templates.
     *
     * @hidden
     * @internal
     */
    getContext(i) {
        const date = CalendarDay.from(this.viewDate).add('month', i).native;
        return this.generateContext(date, i);
    }
    /**
     * Helper method building and returning the context object inside the calendar templates.
     *
     * @hidden
     * @internal
     */
    generateContext(value, i) {
        const construct = (date, index) => ({
            index: index,
            date,
            ...formatToParts(date, this.locale, this.formatOptions, [
                "era",
                "year",
                "month",
                "day",
                "weekday",
            ]),
        });
        const formatObject = Array.isArray(value)
            ? value.map((date, index) => construct(date, index))
            : construct(value, i);
        return { $implicit: formatObject };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxMonthPickerComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.4", type: IgxMonthPickerComponent, isStandalone: true, selector: "igx-month-picker", inputs: { id: "id" }, host: { listeners: { "keydown.pageup": "previousPage($event)", "keydown.pagedown": "nextPage($event)", "mousedown": "onMouseDown($event)" }, properties: { "attr.id": "this.id", "class.igx-month-picker": "this.styleClass" } }, providers: [
            {
                multi: true,
                provide: NG_VALUE_ACCESSOR,
                useExisting: IgxMonthPickerComponent,
            },
            {
                multi: false,
                provide: KeyboardNavigationService
            },
        ], viewQueries: [{ propertyName: "wrapper", first: true, predicate: ["wrapper"], descendants: true }, { propertyName: "monthsView", first: true, predicate: ["months"], descendants: true, read: IgxMonthsViewComponent }, { propertyName: "dacadeView", first: true, predicate: ["decade"], descendants: true, read: IgxYearsViewComponent }, { propertyName: "daysView", first: true, predicate: ["days"], descendants: true, read: IgxDaysViewComponent }, { propertyName: "yearsBtn", first: true, predicate: ["yearsBtn"], descendants: true }], usesInheritance: true, ngImport: i0, template: "<!-- Previous arrow icon -->\n<ng-template #prevArrow let-obj>\n    <igx-icon aria-hidden=\"true\" family=\"default\" name=\"arrow_prev\"></igx-icon>\n</ng-template>\n\n<!-- Next arrow icon -->\n<ng-template #nextArrow let-obj>\n    <igx-icon aria-hidden=\"true\" family=\"default\" name=\"arrow_next\"></igx-icon>\n</ng-template>\n\n<!-- Previous picker button -->\n<ng-template #prevPageButton let-obj>\n    <div\n        #prevPageBtn\n        tabindex=\"0\"\n        class=\"igx-calendar-picker__prev\"\n        role=\"button\"\n        [attr.aria-label]=\"prevNavLabel((getPrevYearDate(viewDate) | date: 'YYYY'))\"\n        data-action=\"prev\"\n        igxCalendarScrollPage\n        (mousedown)=\"previousPage()\"\n        (keydown)=\"changePageKB($event, false)\"\n    >\n        <ng-container *ngTemplateOutlet=\"prevArrow\"></ng-container>\n    </div>\n</ng-template>\n\n<!-- Next picker button -->\n<ng-template #nextPageButton let-obj>\n    <div\n        #nextPageBtn\n        tabindex=\"0\"\n        class=\"igx-calendar-picker__next\"\n        role=\"button\"\n        [attr.aria-label]=\"nextNavLabel((getNextYearDate(viewDate) | date: 'YYYY'))\"\n        data-action=\"next\"\n        igxCalendarScrollPage\n        (mousedown)=\"nextPage()\"\n        (keydown)=\"changePageKB($event)\"\n    >\n        <ng-container *ngTemplateOutlet=\"nextArrow\"></ng-container>\n    </div>\n</ng-template>\n\n<!-- Year -->\n<ng-template #defaultYear let-obj>\n    <span *ngIf=\"activeView === 'year'\" class=\"igx-calendar__aria-off-screen\" aria-live=\"polite\">{{ formattedYear(obj.date) }}</span>\n    <span\n        #yearsBtn\n        tabindex=\"0\"\n        role=\"button\"\n        [attr.aria-label]=\"(obj.date | date: 'yyyy') + ', ' + resourceStrings.igx_calendar_select_year\"\n        (keydown)=\"onActiveViewDecadeKB(obj.date, $event, obj.index)\"\n        (mousedown)=\"onActiveViewDecade($event, obj.date, obj.index)\"\n        class=\"igx-calendar-picker__date\">\n        {{ formattedYear(obj.date) }}\n    </span>\n</ng-template>\n\n<!-- Decade -->\n<ng-template #defaultDecade>\n    <span>{{ getDecadeRange().start }} - {{ getDecadeRange().end }}</span>\n</ng-template>\n\n<!-- PICKER IN MONTHS -->\n<ng-template #calendarYearPicker>\n    <section class=\"igx-calendar-picker\">\n        <div class=\"igx-calendar-picker__dates\">\n            <ng-container\n                *ngTemplateOutlet=\"defaultYear; context: getContext(0)\">\n            </ng-container>\n        </div>\n        <div class=\"igx-calendar-picker__nav\">\n            <ng-container *ngTemplateOutlet=\"prevPageButton\"></ng-container>\n            <ng-container *ngTemplateOutlet=\"nextPageButton\"></ng-container>\n        </div>\n    </section>\n</ng-template>\n\n<!-- PICKER IN YEARS -->\n<ng-template #calendarDecadePicker>\n    <section class=\"igx-calendar-picker\">\n        <div class=\"igx-calendar-picker__dates\" aria-live=\"polite\">\n            <ng-container\n                    *ngTemplateOutlet=\"defaultDecade;\">\n            </ng-container>\n        </div>\n        <div class=\"igx-calendar-picker__nav\">\n            <ng-container *ngTemplateOutlet=\"prevPageButton\"></ng-container>\n            <ng-container *ngTemplateOutlet=\"nextPageButton\"></ng-container>\n        </div>\n    </section>\n</ng-template>\n\n<div\n    #wrapper\n    [tabIndex]=\"0\"\n    class=\"igx-calendar__wrapper\"\n    [attr.aria-activedescendant]=\"activeDescendant\"\n    [attr.aria-multiselectable]=\"selection !== 'single'\"\n    aria-labelledby=\"calendar-desc\"\n    role=\"grid\"\n    >\n    <caption id=\"calendar-desc\" tabindex=\"-1\" class=\"igx-calendar__aria-off-screen\">\n        {{ resourceStrings.igx_calendar_singular_single_selection}}\n    </caption>\n\n    <section class=\"igx-calendar__pickers\">\n        <ng-container *ngIf=\"isDefaultView\">\n            <ng-container *ngTemplateOutlet=\"calendarYearPicker\"></ng-container>\n        </ng-container>\n\n        <ng-container *ngIf=\"isDecadeView\">\n            <ng-container *ngTemplateOutlet=\"calendarDecadePicker\"></ng-container>\n        </ng-container>\n    </section>\n\n    <section class=\"igx-calendar__body\">\n        <ng-container *ngIf=\"isDefaultView\">\n            <igx-months-view\n                #months\n                role=\"rowgroup\"\n                [tabIndex]=\"-1\"\n                [date]=\"viewDate\"\n                [locale]=\"locale\"\n                [formatView]=\"formatViews.month\"\n                [monthFormat]=\"formatOptions.month\"\n                [showActive]=\"showActiveDay\"\n                [standalone]=\"false\"\n                (swiperight)=\"previousPage()\"\n                (swipeleft)=\"nextPage()\"\n                (selected)=\"selectMonth($event)\"\n                (pageChanged)=\"updateDate($event)\"\n                (mousedown)=\"$event.preventDefault()\">\n            >\n            </igx-months-view>\n        </ng-container>\n\n        <ng-container *ngIf=\"isDecadeView\">\n            <igx-years-view\n                #decade\n                role=\"rowgroup\"\n                [tabIndex]=\"-1\"\n                [date]=\"viewDate\"\n                [locale]=\"locale\"\n                [formatView]=\"formatViews.year\"\n                [yearFormat]=\"formatOptions.year\"\n                [showActive]=\"showActiveDay\"\n                [standalone]=\"false\"\n                (swiperight)=\"previousPage()\"\n                (swipeleft)=\"nextPage()\"\n                (selected)=\"selectYear($event)\"\n                (pageChanged)=\"updateDate($event)\"\n                (mousedown)=\"$event.preventDefault()\"\n            >\n            </igx-years-view>\n        </ng-container>\n    </section>\n</div>\n", dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "pipe", type: DatePipe, name: "date" }, { kind: "component", type: IgxIconComponent, selector: "igx-icon", inputs: ["family", "name", "active"] }, { kind: "component", type: IgxMonthsViewComponent, selector: "igx-months-view", inputs: ["id", "standalone", "monthFormat", "formatView"] }, { kind: "component", type: IgxYearsViewComponent, selector: "igx-years-view", inputs: ["standalone", "yearFormat"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxMonthPickerComponent, decorators: [{
            type: Component,
            args: [{ providers: [
                        {
                            multi: true,
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: IgxMonthPickerComponent,
                        },
                        {
                            multi: false,
                            provide: KeyboardNavigationService
                        },
                    ], selector: "igx-month-picker", standalone: true, imports: [
                        NgIf,
                        NgStyle,
                        NgTemplateOutlet,
                        DatePipe,
                        IgxIconComponent,
                        IgxMonthsViewComponent,
                        IgxYearsViewComponent,
                    ], template: "<!-- Previous arrow icon -->\n<ng-template #prevArrow let-obj>\n    <igx-icon aria-hidden=\"true\" family=\"default\" name=\"arrow_prev\"></igx-icon>\n</ng-template>\n\n<!-- Next arrow icon -->\n<ng-template #nextArrow let-obj>\n    <igx-icon aria-hidden=\"true\" family=\"default\" name=\"arrow_next\"></igx-icon>\n</ng-template>\n\n<!-- Previous picker button -->\n<ng-template #prevPageButton let-obj>\n    <div\n        #prevPageBtn\n        tabindex=\"0\"\n        class=\"igx-calendar-picker__prev\"\n        role=\"button\"\n        [attr.aria-label]=\"prevNavLabel((getPrevYearDate(viewDate) | date: 'YYYY'))\"\n        data-action=\"prev\"\n        igxCalendarScrollPage\n        (mousedown)=\"previousPage()\"\n        (keydown)=\"changePageKB($event, false)\"\n    >\n        <ng-container *ngTemplateOutlet=\"prevArrow\"></ng-container>\n    </div>\n</ng-template>\n\n<!-- Next picker button -->\n<ng-template #nextPageButton let-obj>\n    <div\n        #nextPageBtn\n        tabindex=\"0\"\n        class=\"igx-calendar-picker__next\"\n        role=\"button\"\n        [attr.aria-label]=\"nextNavLabel((getNextYearDate(viewDate) | date: 'YYYY'))\"\n        data-action=\"next\"\n        igxCalendarScrollPage\n        (mousedown)=\"nextPage()\"\n        (keydown)=\"changePageKB($event)\"\n    >\n        <ng-container *ngTemplateOutlet=\"nextArrow\"></ng-container>\n    </div>\n</ng-template>\n\n<!-- Year -->\n<ng-template #defaultYear let-obj>\n    <span *ngIf=\"activeView === 'year'\" class=\"igx-calendar__aria-off-screen\" aria-live=\"polite\">{{ formattedYear(obj.date) }}</span>\n    <span\n        #yearsBtn\n        tabindex=\"0\"\n        role=\"button\"\n        [attr.aria-label]=\"(obj.date | date: 'yyyy') + ', ' + resourceStrings.igx_calendar_select_year\"\n        (keydown)=\"onActiveViewDecadeKB(obj.date, $event, obj.index)\"\n        (mousedown)=\"onActiveViewDecade($event, obj.date, obj.index)\"\n        class=\"igx-calendar-picker__date\">\n        {{ formattedYear(obj.date) }}\n    </span>\n</ng-template>\n\n<!-- Decade -->\n<ng-template #defaultDecade>\n    <span>{{ getDecadeRange().start }} - {{ getDecadeRange().end }}</span>\n</ng-template>\n\n<!-- PICKER IN MONTHS -->\n<ng-template #calendarYearPicker>\n    <section class=\"igx-calendar-picker\">\n        <div class=\"igx-calendar-picker__dates\">\n            <ng-container\n                *ngTemplateOutlet=\"defaultYear; context: getContext(0)\">\n            </ng-container>\n        </div>\n        <div class=\"igx-calendar-picker__nav\">\n            <ng-container *ngTemplateOutlet=\"prevPageButton\"></ng-container>\n            <ng-container *ngTemplateOutlet=\"nextPageButton\"></ng-container>\n        </div>\n    </section>\n</ng-template>\n\n<!-- PICKER IN YEARS -->\n<ng-template #calendarDecadePicker>\n    <section class=\"igx-calendar-picker\">\n        <div class=\"igx-calendar-picker__dates\" aria-live=\"polite\">\n            <ng-container\n                    *ngTemplateOutlet=\"defaultDecade;\">\n            </ng-container>\n        </div>\n        <div class=\"igx-calendar-picker__nav\">\n            <ng-container *ngTemplateOutlet=\"prevPageButton\"></ng-container>\n            <ng-container *ngTemplateOutlet=\"nextPageButton\"></ng-container>\n        </div>\n    </section>\n</ng-template>\n\n<div\n    #wrapper\n    [tabIndex]=\"0\"\n    class=\"igx-calendar__wrapper\"\n    [attr.aria-activedescendant]=\"activeDescendant\"\n    [attr.aria-multiselectable]=\"selection !== 'single'\"\n    aria-labelledby=\"calendar-desc\"\n    role=\"grid\"\n    >\n    <caption id=\"calendar-desc\" tabindex=\"-1\" class=\"igx-calendar__aria-off-screen\">\n        {{ resourceStrings.igx_calendar_singular_single_selection}}\n    </caption>\n\n    <section class=\"igx-calendar__pickers\">\n        <ng-container *ngIf=\"isDefaultView\">\n            <ng-container *ngTemplateOutlet=\"calendarYearPicker\"></ng-container>\n        </ng-container>\n\n        <ng-container *ngIf=\"isDecadeView\">\n            <ng-container *ngTemplateOutlet=\"calendarDecadePicker\"></ng-container>\n        </ng-container>\n    </section>\n\n    <section class=\"igx-calendar__body\">\n        <ng-container *ngIf=\"isDefaultView\">\n            <igx-months-view\n                #months\n                role=\"rowgroup\"\n                [tabIndex]=\"-1\"\n                [date]=\"viewDate\"\n                [locale]=\"locale\"\n                [formatView]=\"formatViews.month\"\n                [monthFormat]=\"formatOptions.month\"\n                [showActive]=\"showActiveDay\"\n                [standalone]=\"false\"\n                (swiperight)=\"previousPage()\"\n                (swipeleft)=\"nextPage()\"\n                (selected)=\"selectMonth($event)\"\n                (pageChanged)=\"updateDate($event)\"\n                (mousedown)=\"$event.preventDefault()\">\n            >\n            </igx-months-view>\n        </ng-container>\n\n        <ng-container *ngIf=\"isDecadeView\">\n            <igx-years-view\n                #decade\n                role=\"rowgroup\"\n                [tabIndex]=\"-1\"\n                [date]=\"viewDate\"\n                [locale]=\"locale\"\n                [formatView]=\"formatViews.year\"\n                [yearFormat]=\"formatOptions.year\"\n                [showActive]=\"showActiveDay\"\n                [standalone]=\"false\"\n                (swiperight)=\"previousPage()\"\n                (swipeleft)=\"nextPage()\"\n                (selected)=\"selectYear($event)\"\n                (pageChanged)=\"updateDate($event)\"\n                (mousedown)=\"$event.preventDefault()\"\n            >\n            </igx-years-view>\n        </ng-container>\n    </section>\n</div>\n" }]
        }], propDecorators: { id: [{
                type: HostBinding,
                args: ["attr.id"]
            }, {
                type: Input
            }], wrapper: [{
                type: ViewChild,
                args: ["wrapper"]
            }], styleClass: [{
                type: HostBinding,
                args: ["class.igx-month-picker"]
            }], monthsView: [{
                type: ViewChild,
                args: ["months", { read: IgxMonthsViewComponent }]
            }], dacadeView: [{
                type: ViewChild,
                args: ["decade", { read: IgxYearsViewComponent }]
            }], daysView: [{
                type: ViewChild,
                args: ["days", { read: IgxDaysViewComponent }]
            }], yearsBtn: [{
                type: ViewChild,
                args: ["yearsBtn"]
            }], previousPage: [{
                type: HostListener,
                args: ["keydown.pageup", ["$event"]]
            }], nextPage: [{
                type: HostListener,
                args: ["keydown.pagedown", ["$event"]]
            }], onMouseDown: [{
                type: HostListener,
                args: ['mousedown', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,