/**
 * This file contains all the directives used by the @link IgxCalendarComponent.
 * Except for the directives which are used for templating the calendar itself
 * you should generally not use them directly.
 *
 * @preferred
 */
import { Directive, EventEmitter, HostBinding, HostListener, Input, InjectionToken, Output } from '@angular/core';
import { fromEvent, Subject, interval } from 'rxjs';
import { takeUntil, debounce, tap } from 'rxjs/operators';
import { CalendarDay } from './common/model';
import * as i0 from "@angular/core";
import * as i1 from "../core/utils";
export const IGX_CALENDAR_VIEW_ITEM = new InjectionToken('IgxCalendarViewItem');
export class IgxCalendarViewBaseDirective {
    get nativeElement() {
        return this.elementRef.nativeElement;
    }
    constructor(elementRef) {
        this.elementRef = elementRef;
        this.showActive = false;
        this.itemSelection = new EventEmitter();
    }
    onMouseDown(event) {
        event.preventDefault();
        this.itemSelection.emit(this.value);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxCalendarViewBaseDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.4", type: IgxCalendarViewBaseDirective, inputs: { value: "value", date: "date", showActive: "showActive" }, outputs: { itemSelection: "itemSelection" }, host: { listeners: { "mousedown": "onMouseDown($event)" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxCalendarViewBaseDirective, decorators: [{
            type: Directive
        }], ctorParameters: () => [{ type: i0.ElementRef }], propDecorators: { value: [{
                type: Input
            }], date: [{
                type: Input
            }], showActive: [{
                type: Input
            }], itemSelection: [{
                type: Output
            }], onMouseDown: [{
                type: HostListener,
                args: ['mousedown', ['$event']]
            }] } });
/**
 * @hidden
 */
export class IgxCalendarYearDirective extends IgxCalendarViewBaseDirective {
    get isCurrent() {
        return CalendarDay.today.year === this.value.getFullYear();
    }
    get isSelected() {
        return this.value.getFullYear() === this.date.getFullYear();
    }
    get isActive() {
        return this.isSelected && this.showActive;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxCalendarYearDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.4", type: IgxCalendarYearDirective, isStandalone: true, selector: "[igxCalendarYear]", host: { properties: { "class.igx-calendar-view__item--current": "this.isCurrent", "class.igx-calendar-view__item--selected": "this.isSelected", "class.igx-calendar-view__item--active": "this.isActive" } }, providers: [
            { provide: IGX_CALENDAR_VIEW_ITEM, useExisting: IgxCalendarYearDirective }
        ], exportAs: ["igxCalendarYear"], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxCalendarYearDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxCalendarYear]',
                    providers: [
                        { provide: IGX_CALENDAR_VIEW_ITEM, useExisting: IgxCalendarYearDirective }
                    ],
                    exportAs: 'igxCalendarYear',
                    standalone: true
                }]
        }], propDecorators: { isCurrent: [{
                type: HostBinding,
                args: ['class.igx-calendar-view__item--current']
            }], isSelected: [{
                type: HostBinding,
                args: ['class.igx-calendar-view__item--selected']
            }], isActive: [{
                type: HostBinding,
                args: ['class.igx-calendar-view__item--active']
            }] } });
export class IgxCalendarMonthDirective extends IgxCalendarViewBaseDirective {
    get isCurrent() {
        const today = CalendarDay.today;
        const date = CalendarDay.from(this.value);
        return date.year === today.year && date.month === today.month;
    }
    get isSelected() {
        return (this.value.getFullYear() === this.date.getFullYear() &&
            this.value.getMonth() === this.date.getMonth());
    }
    get isActive() {
        return this.isSelected && this.showActive;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxCalendarMonthDirective, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.4", type: IgxCalendarMonthDirective, isStandalone: true, selector: "[igxCalendarMonth]", host: { properties: { "class.igx-calendar-view__item--current": "this.isCurrent", "class.igx-calendar-view__item--selected": "this.isSelected", "class.igx-calendar-view__item--active": "this.isActive" } }, providers: [
            { provide: IGX_CALENDAR_VIEW_ITEM, useExisting: IgxCalendarMonthDirective }
        ], exportAs: ["igxCalendarMonth"], usesInheritance: true, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxCalendarMonthDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxCalendarMonth]',
                    providers: [
                        { provide: IGX_CALENDAR_VIEW_ITEM, useExisting: IgxCalendarMonthDirective }
                    ],
                    exportAs: 'igxCalendarMonth',
                    standalone: true
                }]
        }], propDecorators: { isCurrent: [{
                type: HostBinding,
                args: ['class.igx-calendar-view__item--current']
            }], isSelected: [{
                type: HostBinding,
                args: ['class.igx-calendar-view__item--selected']
            }], isActive: [{
                type: HostBinding,
                args: ['class.igx-calendar-view__item--active']
            }] } });
/**
 * @hidden
 */
export class IgxCalendarHeaderTitleTemplateDirective {
    constructor(template) {
        this.template = template;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxCalendarHeaderTitleTemplateDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.4", type: IgxCalendarHeaderTitleTemplateDirective, isStandalone: true, selector: "[igxCalendarHeaderTitle]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxCalendarHeaderTitleTemplateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxCalendarHeaderTitle]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.TemplateRef }] });
/**
 * @hidden
 */
export class IgxCalendarHeaderTemplateDirective {
    constructor(template) {
        this.template = template;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxCalendarHeaderTemplateDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.4", type: IgxCalendarHeaderTemplateDirective, isStandalone: true, selector: "[igxCalendarHeader]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxCalendarHeaderTemplateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxCalendarHeader]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.TemplateRef }] });
/**
 * @hidden
 */
export class IgxCalendarSubheaderTemplateDirective {
    constructor(template) {
        this.template = template;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxCalendarSubheaderTemplateDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.4", type: IgxCalendarSubheaderTemplateDirective, isStandalone: true, selector: "[igxCalendarSubheader]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxCalendarSubheaderTemplateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxCalendarSubheader]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.TemplateRef }] });
/**
 * @hidden
 */
export class IgxCalendarScrollPageDirective {
    constructor(element, zone, platform) {
        this.element = element;
        this.zone = zone;
        this.platform = platform;
        /**
         * @hidden
         */
        this.destroy$ = new Subject();
    }
    /**
     * @hidden
     */
    onMouseDown(event) {
        event.preventDefault();
        this.startScroll();
    }
    /**
     * @hidden
     */
    onMouseUp(event) {
        this.stopScroll(event);
    }
    /**
     * @hidden
     */
    ngAfterViewInit() {
        fromEvent(this.element.nativeElement, 'keyup').pipe(debounce(() => interval(100)), takeUntil(this.destroy$)).subscribe((event) => {
            this.stopScroll(event);
        });
        this.zone.runOutsideAngular(() => {
            fromEvent(this.element.nativeElement, 'keydown').pipe(tap((event) => {
                if (this.platform.isActivationKey(event)) {
                    event.preventDefault();
                    event.stopPropagation();
                }
            }), debounce(() => interval(100)), takeUntil(this.destroy$)).subscribe((event) => {
                if (this.platform.isActivationKey(event)) {
                    this.zone.run(() => this.startScroll(true));
                }
            });
        });
    }
    /**
     * @hidden
     */
    ngOnDestroy() {
        this.destroy$.next(true);
        this.destroy$.complete();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxCalendarScrollPageDirective, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }, { token: i1.PlatformUtil }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.4", type: IgxCalendarScrollPageDirective, isStandalone: true, selector: "[igxCalendarScrollPage]", inputs: { startScroll: "startScroll", stopScroll: "stopScroll" }, host: { listeners: { "mousedown": "onMouseDown($event)", "mouseup": "onMouseUp($event)" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxCalendarScrollPageDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxCalendarScrollPage]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.NgZone }, { type: i1.PlatformUtil }], propDecorators: { startScroll: [{
                type: Input
            }], stopScroll: [{
                type: Input
            }], onMouseDown: [{
                type: HostListener,
                args: ['mousedown', ['$event']]
            }], onMouseUp: [{
                type: HostListener,
                args: ['mouseup', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,