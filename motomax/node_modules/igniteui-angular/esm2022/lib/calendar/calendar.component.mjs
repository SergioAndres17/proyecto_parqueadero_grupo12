import { Component, ContentChild, forwardRef, HostBinding, Input, ViewChild, ViewChildren, booleanAttribute, HostListener, } from '@angular/core';
import { NgIf, NgTemplateOutlet, NgStyle, NgFor, DatePipe } from '@angular/common';
import { NG_VALUE_ACCESSOR } from '@angular/forms';
import { IgxCalendarHeaderTemplateDirective, IgxCalendarHeaderTitleTemplateDirective, IgxCalendarSubheaderTemplateDirective, IgxCalendarScrollPageDirective, } from './calendar.directives';
import { IgxCalendarView } from './calendar';
import { IgxMonthsViewComponent } from './months-view/months-view.component';
import { IgxYearsViewComponent } from './years-view/years-view.component';
import { IgxDaysViewComponent } from './days-view/days-view.component';
import { interval } from 'rxjs';
import { takeUntil, debounce, skipLast, switchMap } from 'rxjs/operators';
import { IgxMonthViewSlotsCalendar, IgxGetViewDateCalendar } from './months-view.pipe';
import { IgxIconComponent } from '../icon/icon.component';
import { areSameMonth, formatToParts, getClosestActiveDate, isDateInRanges } from './common/helpers';
import { CalendarDay } from './common/model';
import { IgxCalendarBaseDirective } from './calendar-base';
import { KeyboardNavigationService } from './calendar.services';
import * as i0 from "@angular/core";
let NEXT_ID = 0;
/**
 * Calendar provides a way to display date information.
 *
 * @igxModule IgxCalendarModule
 *
 * @igxTheme igx-calendar-theme, igx-icon-theme
 *
 * @igxKeywords calendar, datepicker, schedule, date
 *
 * @igxGroup Scheduling
 *
 * @remarks
 * The Ignite UI Calendar provides an easy way to display a calendar and allow users to select dates using single, multiple
 * or range selection.
 *
 * @example:
 * ```html
 * <igx-calendar selection="range"></igx-calendar>
 * ```
 */
export class IgxCalendarComponent extends IgxCalendarBaseDirective {
    constructor() {
        super(...arguments);
        /**
         * Sets/gets the `id` of the calendar.
         *
         * @remarks
         * If not set, the `id` will have value `"igx-calendar-0"`.
         *
         * @example
         * ```html
         * <igx-calendar id="my-first-calendar"></igx-calendar>
         * ```
         * @memberof IgxCalendarComponent
         */
        this.id = `igx-calendar-${NEXT_ID++}`;
        /**
         * Sets/gets whether the calendar has header.
         * Default value is `true`.
         *
         * @example
         * ```html
         * <igx-calendar [hasHeader]="false"></igx-calendar>
         * ```
         */
        this.hasHeader = true;
        /**
         * Sets/gets whether the calendar header will be in vertical position.
         * Default value is `false`.
         *
         * @example
         * ```html
         * <igx-calendar [vertical]="true"></igx-calendar>
         * ```
         */
        this.vertical = false;
        this.orientation = 'horizontal';
        this.headerOrientation = 'horizontal';
        /**
         * Show/hide week numbers
         *
         * @example
         * ```html
         * <igx-calendar [showWeekNumbers]="true"></igx-calendar>
         * ``
         */
        this.showWeekNumbers = false;
        /**
         * The default css class applied to the component.
         *
         * @hidden
         * @internal
         */
        this.styleClass = true;
        /**
         * @hidden
         * @internal
         */
        this.activeDate = CalendarDay.today.native;
        /**
         * Denote if the calendar view was changed with the keyboard
         *
         * @hidden
         * @internal
         */
        this.isKeydownTrigger = false;
        /**
         * @hidden
         * @internal
         */
        this._monthsViewNumber = 1;
        /**
         * Continious navigation through the previous pages
         *
         * @hidden
         * @internal
         */
        this.startPrevPageScroll = (isKeydownTrigger = false) => {
            this.startPageScroll$.next();
            this.pageScrollDirection = "prev" /* ScrollDirection.PREV */;
            this.previousPage(isKeydownTrigger);
        };
        /**
         * Continious navigation through the next pages
         *
         * @hidden
         * @internal
         */
        this.startNextPageScroll = (isKeydownTrigger = false) => {
            this.startPageScroll$.next();
            this.pageScrollDirection = "next" /* ScrollDirection.NEXT */;
            this.nextPage(isKeydownTrigger);
        };
        /**
         * Stop continuous navigation
         *
         * @hidden
         * @internal
         */
        this.stopPageScroll = (event) => {
            event.stopPropagation();
            this.stopPageScroll$.next(true);
            this.stopPageScroll$.complete();
            if (this.platform.isActivationKey(event)) {
                this.resetActiveDate(this.viewDate);
            }
            this.pageScrollDirection = "none" /* ScrollDirection.NONE */;
        };
    }
    /**
     * Sets/gets the number of month views displayed.
     * Default value is `1`.
     *
     * @example
     * ```html
     * <igx-calendar [monthsViewNumber]="2"></igx-calendar>
     * ```
     */
    get monthsViewNumber() {
        return this._monthsViewNumber;
    }
    set monthsViewNumber(val) {
        if (val < 1) {
            return;
        }
        this._monthsViewNumber = val;
    }
    /**
     * The default css class applied to the component.
     *
     * @hidden
     * @internal
     */
    get styleVerticalClass() {
        return this.headerOrientation === 'vertical';
    }
    /**
     * Denote if the year view is active.
     *
     * @hidden
     * @internal
     */
    get isYearView() {
        return this.activeView === IgxCalendarView.Year;
    }
    /**
     * Gets the header template.
     *
     * @example
     * ```typescript
     * let headerTitleTemplate = this.calendar.headerTitleTeamplate;
     * ```
     * @memberof IgxCalendarComponent
     */
    get headerTitleTemplate() {
        if (this.headerTitleTemplateDirective) {
            return this.headerTitleTemplateDirective.template;
        }
        return null;
    }
    /**
     * Sets the header template.
     *
     * @example
     * ```html
     * <igx-calendar headerTitleTemplateDirective="igxCalendarHeaderTitle"></igx-calendar>
     * ```
     * @memberof IgxCalendarComponent
     */
    set headerTitleTemplate(directive) {
        this.headerTitleTemplateDirective = directive;
    }
    /**
     * Gets the header template.
     *
     * @example
     * ```typescript
     * let headerTemplate =  this.calendar.headerTeamplate;
     * ```
     * @memberof IgxCalendarComponent
     */
    get headerTemplate() {
        if (this.headerTemplateDirective) {
            return this.headerTemplateDirective.template;
        }
        return null;
    }
    /**
     * Sets the header template.
     *
     * @example
     * ```html
     * <igx-calendar headerTemplateDirective="igxCalendarHeader"></igx-calendar>
     * ```
     * @memberof IgxCalendarComponent
     */
    set headerTemplate(directive) {
        this.headerTemplateDirective = directive;
    }
    /**
     * Gets the subheader template.
     *
     * @example
     * ```typescript
     * let subheaderTemplate = this.calendar.subheaderTemplate;
     * ```
     */
    get subheaderTemplate() {
        if (this.subheaderTemplateDirective) {
            return this.subheaderTemplateDirective.template;
        }
        return null;
    }
    /**
     * Sets the subheader template.
     *
     * @example
     * ```html
     * <igx-calendar subheaderTemplate="igxCalendarSubheader"></igx-calendar>
     * ```
     * @memberof IgxCalendarComponent
     */
    set subheaderTemplate(directive) {
        this.subheaderTemplateDirective = directive;
    }
    /**
     * Gets the context for the template marked with the `igxCalendarHeader` directive.
     *
     * @example
     * ```typescript
     * let headerContext =  this.calendar.headerContext;
     * ```
     */
    get headerContext() {
        return this.generateContext(this.headerDate);
    }
    /**
     * Gets the context for the template marked with either `igxCalendarSubHeaderMonth`
     * or `igxCalendarSubHeaderYear` directive.
     *
     * @example
     * ```typescript
     * let context =  this.calendar.context;
     * ```
     */
    get context() {
        const date = this.viewDate;
        return this.generateContext(date);
    }
    /**
     * Date displayed in header
     *
     * @hidden
     * @internal
     */
    get headerDate() {
        return this.selectedDates?.at(0) ?? new Date();
    }
    onMouseDown(event) {
        event.stopPropagation();
        this.wrapper.nativeElement.focus();
    }
    /**
     * @hidden
     * @internal
     */
    set showActiveDay(value) {
        this._showActiveDay = value;
        this.cdr.detectChanges();
    }
    get showActiveDay() {
        return this._showActiveDay;
    }
    get activeDescendant() {
        if (this.activeView === 'month') {
            return this.activeDate.getTime();
        }
        return this._activeDescendant ?? this.viewDate.getTime();
    }
    set activeDescendant(date) {
        this._activeDescendant = date.getTime();
    }
    ngAfterViewInit() {
        this.keyboardNavigation
            .attachKeyboardHandlers(this.wrapper, this)
            .set("ArrowUp", this.onArrowUp)
            .set("ArrowDown", this.onArrowDown)
            .set("ArrowLeft", this.onArrowLeft)
            .set("ArrowRight", this.onArrowRight)
            .set("Enter", this.onEnter)
            .set(" ", this.onEnter)
            .set("Home", this.onHome)
            .set("End", this.onEnd)
            .set("PageUp", this.handlePageUp)
            .set("PageDown", this.handlePageDown);
        this.wrapper.nativeElement.addEventListener('focus', (event) => this.onWrapperFocus(event));
        this.wrapper.nativeElement.addEventListener('blur', (event) => this.onWrapperBlur(event));
        this.startPageScroll$.pipe(takeUntil(this.stopPageScroll$), switchMap(() => this.scrollPage$.pipe(skipLast(1), debounce(() => interval(300)), takeUntil(this.stopPageScroll$)))).subscribe(() => {
            switch (this.pageScrollDirection) {
                case "prev" /* ScrollDirection.PREV */:
                    this.previousPage();
                    break;
                case "next" /* ScrollDirection.NEXT */:
                    this.nextPage();
                    break;
                case "none" /* ScrollDirection.NONE */:
                default:
                    break;
            }
        });
        this.activeView$.subscribe((view) => {
            this.activeViewChanged.emit(view);
            this.viewDateChanged.emit({
                previousValue: this.previousViewDate,
                currentValue: this.viewDate
            });
        });
    }
    onWrapperFocus(_event) {
        this.showActiveDay = true;
        this.monthViews.forEach(view => view.changePreviewRange(this.activeDate));
    }
    onWrapperBlur(_event) {
        this.showActiveDay = false;
        this.monthViews.forEach(view => view.clearPreviewRange());
        this._onTouchedCallback();
    }
    handleArrowKeydown(event, delta) {
        event.preventDefault();
        const date = getClosestActiveDate(CalendarDay.from(this.activeDate), delta, this.disabledDates);
        this.activeDate = date.native;
        const dates = this.viewDates;
        const isDateInView = dates.some(d => d.date.equalTo(this.activeDate));
        this.monthViews.forEach(view => view.clearPreviewRange());
        if (!isDateInView) {
            delta > 0 ? this.nextPage(true) : this.previousPage(true);
        }
    }
    handlePageUpDown(event, delta) {
        event.preventDefault();
        const dir = delta > 0 ? "next" /* ScrollDirection.NEXT */ : "prev" /* ScrollDirection.PREV */;
        if (this.activeView === IgxCalendarView.Month && event.shiftKey) {
            this.viewDate = CalendarDay.from(this.viewDate).add('year', delta).native;
            this.resetActiveDate(this.viewDate);
            this.cdr.detectChanges();
        }
        else {
            this.changePage(false, dir);
        }
    }
    handlePageUp(event) {
        this.handlePageUpDown(event, -1);
    }
    handlePageDown(event) {
        this.handlePageUpDown(event, 1);
    }
    onArrowUp(event) {
        if (this.activeView === IgxCalendarView.Month) {
            this.handleArrowKeydown(event, -7);
            this.cdr.detectChanges();
        }
        if (this.activeView === IgxCalendarView.Year) {
            this.monthsView.onKeydownArrowUp(event);
        }
        if (this.activeView === IgxCalendarView.Decade) {
            this.dacadeView.onKeydownArrowUp(event);
        }
    }
    onArrowDown(event) {
        if (this.activeView === IgxCalendarView.Month) {
            this.handleArrowKeydown(event, 7);
            this.cdr.detectChanges();
        }
        if (this.activeView === IgxCalendarView.Year) {
            this.monthsView.onKeydownArrowDown(event);
        }
        if (this.activeView === IgxCalendarView.Decade) {
            this.dacadeView.onKeydownArrowDown(event);
        }
    }
    onArrowLeft(event) {
        if (this.activeView === IgxCalendarView.Month) {
            this.handleArrowKeydown(event, -1);
            this.cdr.detectChanges();
        }
        if (this.activeView === IgxCalendarView.Year) {
            this.monthsView.onKeydownArrowLeft(event);
        }
        if (this.activeView === IgxCalendarView.Decade) {
            this.dacadeView.onKeydownArrowLeft(event);
        }
    }
    onArrowRight(event) {
        if (this.activeView === IgxCalendarView.Month) {
            this.handleArrowKeydown(event, 1);
            this.cdr.detectChanges();
        }
        if (this.activeView === IgxCalendarView.Year) {
            this.monthsView.onKeydownArrowRight(event);
        }
        if (this.activeView === IgxCalendarView.Decade) {
            this.dacadeView.onKeydownArrowRight(event);
        }
    }
    onEnter(event) {
        if (this.activeView === IgxCalendarView.Month) {
            this.handleDateSelection(this.activeDate);
            this.cdr.detectChanges();
        }
        if (this.activeView === IgxCalendarView.Year) {
            this.monthsView.onKeydownEnter(event);
        }
        if (this.activeView === IgxCalendarView.Decade) {
            this.dacadeView.onKeydownEnter(event);
        }
        this.monthViews.forEach(view => view.clearPreviewRange());
    }
    onHome(event) {
        if (this.activeView === IgxCalendarView.Month) {
            const dates = this.monthViews.toArray()
                .flatMap((view) => view.dates.toArray())
                .filter((d) => d.isCurrentMonth && d.isFocusable);
            this.activeDate = dates.at(0).date.native;
            this.cdr.detectChanges();
        }
        if (this.activeView === IgxCalendarView.Year) {
            this.monthsView.onKeydownHome(event);
        }
        if (this.activeView === IgxCalendarView.Decade) {
            this.dacadeView.onKeydownHome(event);
        }
    }
    onEnd(event) {
        if (this.activeView === IgxCalendarView.Month) {
            const dates = this.monthViews.toArray()
                .flatMap((view) => view.dates.toArray())
                .filter((d) => d.isCurrentMonth && d.isFocusable);
            this.activeDate = dates.at(-1).date.native;
            this.cdr.detectChanges();
        }
        if (this.activeView === IgxCalendarView.Year) {
            this.monthsView.onKeydownEnd(event);
        }
        if (this.activeView === IgxCalendarView.Decade) {
            this.dacadeView.onKeydownEnd(event);
        }
    }
    /**
     * Returns the locale representation of the month in the month view if enabled,
     * otherwise returns the default `Date.getMonth()` value.
     *
     * @hidden
     * @internal
     */
    formattedMonth(value) {
        if (this.formatViews.month) {
            return this.formatterMonth.format(value);
        }
        return `${value.getMonth()}`;
    }
    /**
     * Change to previous page
     *
     * @hidden
     * @internal
     */
    previousPage(isKeydownTrigger = false) {
        if (isKeydownTrigger && this.pageScrollDirection === "next" /* ScrollDirection.NEXT */) {
            return;
        }
        this.changePage(isKeydownTrigger, "prev" /* ScrollDirection.PREV */);
    }
    /**
     * Change to next page
     *
     * @hidden
     * @internal
     */
    nextPage(isKeydownTrigger = false) {
        if (isKeydownTrigger && this.pageScrollDirection === "prev" /* ScrollDirection.PREV */) {
            return;
        }
        this.changePage(isKeydownTrigger, "next" /* ScrollDirection.NEXT */);
    }
    /**
     * Changes the current page
     *
     * @hidden
     * @internal
     */
    changePage(isKeydownTrigger = false, direction) {
        this.previousViewDate = this.viewDate;
        this.isKeydownTrigger = isKeydownTrigger;
        switch (this.activeView) {
            case "month":
                if (direction === "prev" /* ScrollDirection.PREV */) {
                    this.viewDate = CalendarDay.from(this.viewDate).add('month', -1).native;
                }
                if (direction === "next" /* ScrollDirection.NEXT */) {
                    this.viewDate = CalendarDay.from(this.viewDate).add('month', 1).native;
                }
                this.viewDateChanged.emit({
                    previousValue: this.previousViewDate,
                    currentValue: this.viewDate
                });
                break;
            case "year":
                if (direction === "prev" /* ScrollDirection.PREV */) {
                    this.viewDate = CalendarDay.from(this.viewDate).add('year', -1).native;
                }
                if (direction === "next" /* ScrollDirection.NEXT */) {
                    this.viewDate = CalendarDay.from(this.viewDate).add('year', 1).native;
                }
                break;
            case "decade":
                if (direction === "prev" /* ScrollDirection.PREV */) {
                    this.viewDate = CalendarDay.from(this.viewDate).add('year', -15).native;
                }
                if (direction === "next" /* ScrollDirection.NEXT */) {
                    this.viewDate = CalendarDay.from(this.viewDate).add('year', 15).native;
                }
                break;
        }
        // XXX: Why only when it's not triggered by keyboard?
        if (!this.isKeydownTrigger)
            this.resetActiveDate(this.viewDate);
    }
    /**
     * @hidden
     * @internal
     */
    onActiveViewDecade(event, date, activeViewIdx) {
        event.preventDefault();
        super.activeViewDecade(activeViewIdx);
        this.viewDate = date;
    }
    /**
     * @hidden
     * @internal
     */
    onActiveViewDecadeKB(date, event, activeViewIdx) {
        super.activeViewDecadeKB(event, activeViewIdx);
        if (this.platform.isActivationKey(event)) {
            this.viewDate = date;
            this.wrapper.nativeElement.focus();
        }
    }
    /**
     * @hidden
     * @internal
     */
    onYearsViewClick(event) {
        const path = event.composed ? event.composedPath() : [event.target];
        const years = this.dacadeView.viewItems.toArray();
        const validTarget = years.some(year => path.includes(year.nativeElement));
        if (validTarget) {
            this.activeView = IgxCalendarView.Year;
        }
    }
    /**
     * @hidden
     * @internal
     */
    onYearsViewKeydown(event) {
        if (this.platform.isActivationKey(event)) {
            this.activeView = IgxCalendarView.Year;
        }
    }
    /**
     * @hidden
     * @internal
     */
    getFormattedDate() {
        const date = this.headerDate;
        const monthFormatter = new Intl.DateTimeFormat(this.locale, { month: 'short', day: 'numeric' });
        const dayFormatter = new Intl.DateTimeFormat(this.locale, { weekday: 'short' });
        return {
            monthday: monthFormatter.format(date),
            weekday: dayFormatter.format(date),
        };
    }
    /**
     * @hidden
     * @internal
     */
    getFormattedRange() {
        const dates = this.selectedDates;
        return {
            start: this.formatterRangeday.format(dates.at(0)),
            end: this.formatterRangeday.format(dates.at(-1))
        };
    }
    /**
     * @hidden
     * @internal
     */
    get viewDates() {
        return this.monthViews.toArray()
            .flatMap(view => view.dates.toArray())
            .filter(d => d.isCurrentMonth);
    }
    /**
     * Handles invoked on date selection
     *
     * @hidden
     * @internal
     */
    handleDateSelection(date) {
        const outOfRange = !this.viewDates.some(d => {
            return d.date.equalTo(date);
        });
        if (outOfRange) {
            this.viewDate = date;
        }
        this.selectDate(date);
        // keep views in sync
        this.monthViews.forEach((m) => {
            m.shiftKey = this.shiftKey;
            m.selectedDates = this.selectedDates;
            m.cdr.markForCheck();
        });
        if (this.selection !== 'single') {
            this.selected.emit(this.selectedDates);
        }
        else {
            this.selected.emit(this.selectedDates.at(0));
        }
    }
    /**
     * @hidden
     * @intenal
     */
    changeMonth(date) {
        this.previousViewDate = this.viewDate;
        this.viewDate = CalendarDay.from(date).add('month', -this.activeViewIdx).native;
        this.activeView = IgxCalendarView.Month;
        this.resetActiveDate(date);
    }
    /**
     * @hidden
     * @intenal
     */
    changeYear(date) {
        this.previousViewDate = this.viewDate;
        this.viewDate = CalendarDay.from(date).add('month', -this.activeViewIdx).native;
        this.activeView = IgxCalendarView.Year;
    }
    /**
     * @hidden
     * @intenal
     */
    updateYear(date) {
        this.previousViewDate = this.viewDate;
        this.viewDate = CalendarDay.from(date).add('year', -this.activeViewIdx).native;
    }
    updateActiveDescendant(date) {
        this.activeDescendant = date;
    }
    /**
     * @hidden
     * @internal
     */
    onActiveViewYear(event, date, activeViewIdx) {
        event.preventDefault();
        this.activeView = IgxCalendarView.Year;
        this.activeViewIdx = activeViewIdx;
        this.viewDate = date;
    }
    /**
     * @hidden
     * @internal
     */
    onActiveViewYearKB(date, event, activeViewIdx) {
        event.stopPropagation();
        if (this.platform.isActivationKey(event)) {
            event.preventDefault();
            this.activeView = IgxCalendarView.Year;
            this.activeViewIdx = activeViewIdx;
            this.viewDate = date;
            this.wrapper.nativeElement.focus();
        }
    }
    /**
     * Deselects date(s) (based on the selection type).
     *
     * @example
     * ```typescript
     *  this.calendar.deselectDate(new Date(`2018-06-12`));
     * ````
     */
    deselectDate(value) {
        super.deselectDate(value);
        this.monthViews.forEach((m) => {
            m.selectedDates = this.selectedDates;
            m.rangeStarted = false;
            m.cdr.markForCheck();
        });
        this._onChangeCallback(this.selectedDates);
    }
    /**
     * Getter for the context object inside the calendar templates.
     *
     * @hidden
     * @internal
     */
    getContext(i) {
        const date = CalendarDay.from(this.viewDate).add('month', i).native;
        return this.generateContext(date, i);
    }
    /**
     * @hidden
     * @internal
     */
    // TODO: See if this can be incorporated in the DaysView directly
    resetActiveDate(date) {
        const target = CalendarDay.from(this.activeDate).set({
            month: date.getMonth(),
            year: date.getFullYear(),
        });
        const outOfRange = !areSameMonth(date, target) ||
            isDateInRanges(target, this.disabledDates);
        this.activeDate = outOfRange ? date : target.native;
    }
    /**
     * @hidden
     * @internal
     */
    ngOnDestroy() {
        this.keyboardNavigation.detachKeyboardHandlers();
        this.wrapper?.nativeElement.removeEventListener('focus', this.onWrapperFocus);
        this.wrapper?.nativeElement.removeEventListener('blur', this.onWrapperBlur);
    }
    /**
     * @hidden
     * @internal
     */
    getPrevMonth(date) {
        return CalendarDay.from(date).add('month', -1).native;
    }
    /**
     * @hidden
     * @internal
     */
    getNextMonth(date, viewIndex) {
        return CalendarDay.from(date).add('month', viewIndex).native;
    }
    /**
     * Helper method building and returning the context object inside the calendar templates.
     *
     * @hidden
     * @internal
     */
    generateContext(value, i) {
        const construct = (date, index) => ({
            index: index,
            date,
            ...formatToParts(date, this.locale, this.formatOptions, [
                "era",
                "year",
                "month",
                "day",
                "weekday",
            ]),
        });
        const formatObject = Array.isArray(value)
            ? value.map((date, index) => construct(date, index))
            : construct(value, i);
        return { $implicit: formatObject };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxCalendarComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "18.2.4", type: IgxCalendarComponent, isStandalone: true, selector: "igx-calendar", inputs: { id: "id", hasHeader: ["hasHeader", "hasHeader", booleanAttribute], vertical: ["vertical", "vertical", booleanAttribute], orientation: "orientation", headerOrientation: "headerOrientation", monthsViewNumber: "monthsViewNumber", showWeekNumbers: ["showWeekNumbers", "showWeekNumbers", booleanAttribute] }, host: { listeners: { "mousedown": "onMouseDown($event)" }, properties: { "attr.id": "this.id", "class.igx-calendar--vertical": "this.styleVerticalClass", "class.igx-calendar": "this.styleClass" } }, providers: [
            {
                multi: true,
                provide: NG_VALUE_ACCESSOR,
                useExisting: IgxCalendarComponent,
            },
            {
                multi: false,
                provide: KeyboardNavigationService,
            },
        ], queries: [{ propertyName: "headerTemplateDirective", first: true, predicate: i0.forwardRef(() => IgxCalendarHeaderTemplateDirective), descendants: true, read: IgxCalendarHeaderTemplateDirective, static: true }, { propertyName: "headerTitleTemplateDirective", first: true, predicate: i0.forwardRef(() => IgxCalendarHeaderTitleTemplateDirective), descendants: true, read: IgxCalendarHeaderTitleTemplateDirective, static: true }, { propertyName: "subheaderTemplateDirective", first: true, predicate: i0.forwardRef(() => IgxCalendarSubheaderTemplateDirective), descendants: true, read: IgxCalendarSubheaderTemplateDirective, static: true }], viewQueries: [{ propertyName: "wrapper", first: true, predicate: ["wrapper"], descendants: true }, { propertyName: "dacadeView", first: true, predicate: ["decade"], descendants: true, read: IgxYearsViewComponent }, { propertyName: "monthsView", first: true, predicate: ["months"], descendants: true, read: IgxMonthsViewComponent }, { propertyName: "daysView", first: true, predicate: ["days"], descendants: true, read: IgxDaysViewComponent }, { propertyName: "prevPageBtn", first: true, predicate: ["prevPageBtn"], descendants: true }, { propertyName: "nextPageBtn", first: true, predicate: ["nextPageBtn"], descendants: true }, { propertyName: "monthsBtns", predicate: ["monthsBtn"], descendants: true }, { propertyName: "monthViews", predicate: ["days"], descendants: true, read: IgxDaysViewComponent }], usesInheritance: true, ngImport: i0, template: "<ng-template let-result #defaultHeaderTitle>\n    <ng-container *ngIf=\"selection === 'single'\">\n        <span>{{ resourceStrings.igx_calendar_select_date }}</span>\n    </ng-container>\n    <ng-container *ngIf=\"selection === 'range'\">\n        <span>{{ resourceStrings.igx_calendar_range_placeholder }}</span>\n    </ng-container>\n</ng-template>\n\n<ng-template let-result #defaultHeaderDate>\n    <ng-container *ngIf=\"selection === 'single'\">\n        <span>{{ getFormattedDate().weekday }},&nbsp;</span>\n        <span>{{ getFormattedDate().monthday }}</span>\n    </ng-container>\n    <ng-container *ngIf=\"selection === 'range'\">\n        <span>{{ selectedDates.length === 0 ? 'Start' : getFormattedRange().start}}</span>\n        <span>&nbsp;-&nbsp;</span>\n        <span>{{ selectedDates.length <= 1 ? 'End' : getFormattedRange().end}}</span>\n    </ng-container>\n</ng-template>\n\n<!-- Month -->\n<ng-template #defaultMonth let-obj>\n    <span\n        #monthsBtn\n        tabindex=\"0\"\n        role=\"button\"\n        [attr.aria-label]=\"(obj.date | date: 'LLLL') + ', ' + resourceStrings.igx_calendar_select_month\"\n        (keydown)=\"onActiveViewYearKB(obj.date, $event, obj.index)\"\n        (mousedown)=\"onActiveViewYear($event, obj.date, obj.index)\"\n        class=\"igx-calendar-picker__date\">\n        {{ formattedMonth(obj.date) }}\n    </span>\n</ng-template>\n\n<!-- Year -->\n<ng-template #defaultYear let-obj>\n    <span *ngIf=\"activeView === 'year'\" class=\"igx-calendar__aria-off-screen\" aria-live=\"polite\">{{ formattedYear(obj.date) }}</span>\n    <span\n        #yearsBtn\n        tabindex=\"0\"\n        role=\"button\"\n        [attr.aria-label]=\"(obj.date | date: 'yyyy') + ', ' + resourceStrings.igx_calendar_select_year\"\n        (keydown)=\"onActiveViewDecadeKB(obj.date, $event, obj.index)\"\n        (mousedown)=\"onActiveViewDecade($event, obj.date, obj.index)\"\n        class=\"igx-calendar-picker__date\">\n        {{ formattedYear(obj.date) }}\n    </span>\n</ng-template>\n\n<!-- Month Year -->\n<ng-template #defaultMonthYear let-obj let-result>\n    <span *ngIf=\"monthsViewNumber < 2 || obj.index < 1\" class=\"igx-calendar__aria-off-screen\" aria-live=\"polite\">\n            {{ monthsViewNumber > 1 ?\n        (resourceStrings.igx_calendar_first_picker_of.replace('{0}', monthsViewNumber.toString()) + ' ' +\n            (obj.date | date: 'LLLL yyyy')) :\n        resourceStrings.igx_calendar_selected_month_is + (obj.date | date: 'LLLL yyyy')}}\n    </span>\n    <ng-container *ngTemplateOutlet=\"defaultMonth; context: {$implicit: obj}\"></ng-container>\n    <ng-container *ngTemplateOutlet=\"defaultYear; context: {$implicit: obj}\"></ng-container>\n</ng-template>\n\n<!-- Decade -->\n<ng-template #defaultDecade>\n    <span>{{ getDecadeRange().start }} - {{ getDecadeRange().end }}</span>\n</ng-template>\n\n<!-- Previous arrow icon -->\n<ng-template #prevArrow let-obj>\n    <igx-icon aria-hidden=\"true\" family=\"default\" name=\"arrow_prev\"></igx-icon>\n</ng-template>\n\n<!-- Next arrow icon -->\n<ng-template #nextArrow let-obj>\n    <igx-icon aria-hidden=\"true\" family=\"default\" name=\"arrow_next\"></igx-icon>\n</ng-template>\n\n<!-- Previous picker button -->\n<ng-template #prevPageButton let-obj>\n    <div\n        #prevPageBtn\n        tabindex=\"0\"\n        class=\"igx-calendar-picker__prev\"\n        role=\"button\"\n        [attr.aria-label]=\"prevNavLabel((getPrevMonth(viewDate) | date: 'LLLL'))\"\n        data-action=\"prev\"\n        igxCalendarScrollPage\n        [startScroll]=\"startPrevPageScroll\"\n        [stopScroll]=\"stopPageScroll\"\n        (keydown)=\"$event.stopPropagation()\"\n    >\n        <ng-container *ngTemplateOutlet=\"prevArrow\"></ng-container>\n    </div>\n</ng-template>\n\n<!-- Next picker button -->\n<ng-template #nextPageButton let-obj>\n    <div\n        #nextPageBtn\n        tabindex=\"0\"\n        class=\"igx-calendar-picker__next\"\n        role=\"button\"\n        [attr.aria-label]=\"nextNavLabel((getNextMonth(viewDate, monthsViewNumber) | date: 'LLLL'))\"\n        data-action=\"next\"\n        igxCalendarScrollPage\n        [startScroll]=\"startNextPageScroll\"\n        [stopScroll]=\"stopPageScroll\"\n        (keydown)=\"$event.stopPropagation()\"\n    >\n        <ng-container *ngTemplateOutlet=\"nextArrow\"></ng-container>\n    </div>\n</ng-template>\n\n<!-- PICKER IN DAYS -->\n<ng-template #calendarDaysPicker let-i>\n    <section class=\"igx-calendar-picker\" [style.--calendar-row-start]=\"1 + (2 * i)\">\n        <div class=\"igx-calendar-picker__dates\" [attr.data-month]=\"i | IgxGetViewDate:viewDate:false\">\n            <ng-container\n                    *ngTemplateOutlet=\"subheaderTemplate ? subheaderTemplate : defaultMonthYear; context: getContext(i)\">\n            </ng-container>\n        </div>\n        <div\n            class=\"igx-calendar-picker__nav\"\n            *ngIf=\"this.orientation === 'horizontal' ? i === monthsViewNumber - 1 : i === 0\"\n        >\n            <ng-container *ngTemplateOutlet=\"prevPageButton\"></ng-container>\n            <ng-container *ngTemplateOutlet=\"nextPageButton\"></ng-container>\n        </div>\n    </section>\n</ng-template>\n\n<!-- PICKER IN MONTHS -->\n<ng-template #calendarYearPicker>\n    <section class=\"igx-calendar-picker\">\n        <div class=\"igx-calendar-picker__dates\">\n            <ng-container\n                *ngTemplateOutlet=\"subheaderTemplate ? subheaderTemplate : defaultYear; context: getContext(0)\">\n            </ng-container>\n        </div>\n        <div class=\"igx-calendar-picker__nav\">\n            <ng-container *ngTemplateOutlet=\"prevPageButton\"></ng-container>\n            <ng-container *ngTemplateOutlet=\"nextPageButton\"></ng-container>\n        </div>\n    </section>\n</ng-template>\n\n<!-- PICKER IN YEARS -->\n<ng-template #calendarDecadePicker>\n    <section class=\"igx-calendar-picker\">\n        <div class=\"igx-calendar-picker__dates\" aria-live=\"polite\">\n            <ng-container\n                    *ngTemplateOutlet=\"subheaderTemplate ? subheaderTemplate : defaultDecade;\">\n            </ng-container>\n        </div>\n        <div class=\"igx-calendar-picker__nav\">\n            <ng-container *ngTemplateOutlet=\"prevPageButton\"></ng-container>\n            <ng-container *ngTemplateOutlet=\"nextPageButton\"></ng-container>\n        </div>\n    </section>\n</ng-template>\n\n\n<header\n    aria-labelledby=\"igx-aria-calendar-title-month igx-aria-calendar-title-year\"\n    class=\"igx-calendar__header\"\n    *ngIf=\"selection === 'single' && hasHeader || selection === 'range' && hasHeader\">\n    <h5 id=\"igx-aria-calendar-title-year\" class=\"igx-calendar__header-year\">\n        <ng-container *ngTemplateOutlet=\"headerTitleTemplate ?? defaultHeaderTitle; context: headerContext\"></ng-container>\n    </h5>\n    <h2 id=\"igx-aria-calendar-title-month\" class=\"igx-calendar__header-date\">\n        <ng-container *ngTemplateOutlet=\"headerTemplate ? headerTemplate : defaultHeaderDate; context: headerContext\">\n        </ng-container>\n    </h2>\n</header>\n\n\n<div\n    #wrapper\n    [style.--calendar-months]=\"monthsViewNumber\"\n    [tabIndex]=\"0\"\n    class=\"igx-calendar__wrapper\"\n    [class.igx-calendar__wrapper--vertical]=\"orientation === 'vertical'\"\n    [attr.aria-activedescendant]=\"activeDescendant\"\n    [attr.aria-multiselectable]=\"selection !== 'single'\"\n    aria-labelledby=\"calendar-desc\"\n    role=\"grid\"\n    >\n    <caption id=\"calendar-desc\" tabindex=\"-1\" class=\"igx-calendar__aria-off-screen\">\n        <ng-container *ngIf=\"selection === 'multi'\">\n            {{ monthsViewNumber && monthsViewNumber > 1 ?\n            resourceStrings.igx_calendar_multi_selection.replace('{0}', monthsViewNumber.toString()) :\n            resourceStrings.igx_calendar_singular_multi_selection}}\n        </ng-container>\n        <ng-container *ngIf=\"selection === 'range'\">\n            {{ monthsViewNumber && monthsViewNumber > 1 ?\n            resourceStrings.igx_calendar_range_selection.replace('{0}', monthsViewNumber.toString()) :\n            resourceStrings.igx_calendar_singular_range_selection}}\n        </ng-container>\n        <ng-container *ngIf=\"selection === 'single'\">\n            {{ monthsViewNumber && monthsViewNumber > 1 ?\n            resourceStrings.igx_calendar_single_selection.replace('{0}', monthsViewNumber.toString()) :\n            resourceStrings.igx_calendar_singular_single_selection}}\n        </ng-container>\n    </caption>\n    <section\n        class=\"igx-calendar__pickers\"\n        [class.igx-calendar__pickers--days]=\"isDefaultView\"\n        [class.igx-calendar__pickers--vertical]=\"orientation === 'vertical'\"\n    >\n        <ng-container *ngIf=\"isDefaultView\">\n            <ng-container *ngFor=\"let view of monthsViewNumber | IgxMonthViewSlots; index as i\">\n                <ng-container *ngTemplateOutlet=\"calendarDaysPicker; context: {$implicit: i}\"></ng-container>\n            </ng-container>\n        </ng-container>\n\n        <ng-container *ngIf=\"isYearView\">\n            <ng-container *ngTemplateOutlet=\"calendarYearPicker\"></ng-container>\n        </ng-container>\n\n        <ng-container *ngIf=\"isDecadeView\">\n            <ng-container *ngTemplateOutlet=\"calendarDecadePicker\"></ng-container>\n        </ng-container>\n    </section>\n\n    <section class=\"igx-calendar__body\" [class.igx-calendar__body--vertical]=\"orientation === 'vertical'\" role=\"presentation\">\n        <ng-container *ngIf=\"isDefaultView\">\n            <ng-container *ngFor=\"let view of monthsViewNumber | IgxMonthViewSlots; index as i\">\n                <igx-days-view\n                    #days\n                    role=\"rowgroup\"\n                    [tabIndex]=\"-1\"\n                    [selection]=\"selection\"\n                    [locale]=\"locale\"\n                    [value]=\"value\"\n                    [(activeDate)]=\"activeDate\"\n                    [(previewRangeDate)]=\"previewRangeDate\"\n                    [viewDate]=\"i | IgxGetViewDate: viewDate\"\n                    [weekStart]=\"weekStart\"\n                    [formatOptions]=\"formatOptions\"\n                    [formatViews]=\"formatViews\"\n                    [disabledDates]=\"disabledDates\"\n                    [specialDates]=\"specialDates\"\n                    [style.--calendar-row-start]=\"(i + 1) * 2\"\n                    [hideLeadingDays]=\"hideOutsideDays || i !== 0\"\n                    [hideTrailingDays]=\"hideOutsideDays || i !== monthsViewNumber - 1\"\n                    [showWeekNumbers]=\"showWeekNumbers\"\n                    [showActiveDay]=\"showActiveDay\"\n                    [standalone]=\"false\"\n                    (swiperight)=\"previousPage()\"\n                    (swipeleft)=\"nextPage()\"\n                    (dateSelected)=\"handleDateSelection($event)\"\n                    (mousedown)=\"$event.preventDefault()\">\n                </igx-days-view>\n            </ng-container>\n        </ng-container>\n\n        <ng-container *ngIf=\"isYearView\">\n            <igx-months-view\n                #months\n                role=\"rowgroup\"\n                [tabIndex]=\"-1\"\n                [date]=\"viewDate\"\n                [locale]=\"locale\"\n                [formatView]=\"formatViews.month\"\n                [monthFormat]=\"formatOptions.month\"\n                [showActive]=\"showActiveDay\"\n                [standalone]=\"false\"\n                (swiperight)=\"previousPage()\"\n                (swipeleft)=\"nextPage()\"\n                (pageChanged)=\"updateYear($event)\"\n                (activeDateChanged)=\"updateActiveDescendant($event)\"\n                (selected)=\"changeMonth($event)\"\n                (mousedown)=\"$event.preventDefault()\">\n            </igx-months-view>\n        </ng-container>\n\n        <ng-container *ngIf=\"isDecadeView\">\n            <igx-years-view\n                #decade\n                role=\"rowgroup\"\n                [tabIndex]=\"-1\"\n                [date]=\"viewDate\"\n                [locale]=\"locale\"\n                [formatView]=\"formatViews.year\"\n                [yearFormat]=\"formatOptions.year\"\n                [showActive]=\"showActiveDay\"\n                [standalone]=\"false\"\n                (swiperight)=\"previousPage()\"\n                (swipeleft)=\"nextPage()\"\n                (pageChanged)=\"updateYear($event)\"\n                (activeDateChanged)=\"updateActiveDescendant($event)\"\n                (selected)=\"changeYear($event)\"\n                (mousedown)=\"$event.preventDefault()\">\n            </igx-years-view>\n        </ng-container>\n    </section>\n</div>\n", dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "directive", type: IgxCalendarScrollPageDirective, selector: "[igxCalendarScrollPage]", inputs: ["startScroll", "stopScroll"] }, { kind: "component", type: IgxIconComponent, selector: "igx-icon", inputs: ["family", "name", "active"] }, { kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: IgxDaysViewComponent, selector: "igx-days-view", inputs: ["id", "tabIndex", "role", "standalone", "showWeekNumbers", "activeDate", "previewRangeDate", "hideLeadingDays", "hideTrailingDays", "showActiveDay"], outputs: ["dateSelected", "pageChanged", "activeDateChange", "previewRangeDateChange"] }, { kind: "component", type: IgxMonthsViewComponent, selector: "igx-months-view", inputs: ["id", "standalone", "monthFormat", "formatView"] }, { kind: "component", type: IgxYearsViewComponent, selector: "igx-years-view", inputs: ["standalone", "yearFormat"] }, { kind: "pipe", type: DatePipe, name: "date" }, { kind: "pipe", type: IgxMonthViewSlotsCalendar, name: "IgxMonthViewSlots" }, { kind: "pipe", type: IgxGetViewDateCalendar, name: "IgxGetViewDate" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxCalendarComponent, decorators: [{
            type: Component,
            args: [{ providers: [
                        {
                            multi: true,
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: IgxCalendarComponent,
                        },
                        {
                            multi: false,
                            provide: KeyboardNavigationService,
                        },
                    ], selector: 'igx-calendar', standalone: true, imports: [NgIf, NgTemplateOutlet, IgxCalendarScrollPageDirective, NgStyle, IgxIconComponent, NgFor, IgxDaysViewComponent, IgxMonthsViewComponent, IgxYearsViewComponent, DatePipe, IgxMonthViewSlotsCalendar, IgxGetViewDateCalendar], template: "<ng-template let-result #defaultHeaderTitle>\n    <ng-container *ngIf=\"selection === 'single'\">\n        <span>{{ resourceStrings.igx_calendar_select_date }}</span>\n    </ng-container>\n    <ng-container *ngIf=\"selection === 'range'\">\n        <span>{{ resourceStrings.igx_calendar_range_placeholder }}</span>\n    </ng-container>\n</ng-template>\n\n<ng-template let-result #defaultHeaderDate>\n    <ng-container *ngIf=\"selection === 'single'\">\n        <span>{{ getFormattedDate().weekday }},&nbsp;</span>\n        <span>{{ getFormattedDate().monthday }}</span>\n    </ng-container>\n    <ng-container *ngIf=\"selection === 'range'\">\n        <span>{{ selectedDates.length === 0 ? 'Start' : getFormattedRange().start}}</span>\n        <span>&nbsp;-&nbsp;</span>\n        <span>{{ selectedDates.length <= 1 ? 'End' : getFormattedRange().end}}</span>\n    </ng-container>\n</ng-template>\n\n<!-- Month -->\n<ng-template #defaultMonth let-obj>\n    <span\n        #monthsBtn\n        tabindex=\"0\"\n        role=\"button\"\n        [attr.aria-label]=\"(obj.date | date: 'LLLL') + ', ' + resourceStrings.igx_calendar_select_month\"\n        (keydown)=\"onActiveViewYearKB(obj.date, $event, obj.index)\"\n        (mousedown)=\"onActiveViewYear($event, obj.date, obj.index)\"\n        class=\"igx-calendar-picker__date\">\n        {{ formattedMonth(obj.date) }}\n    </span>\n</ng-template>\n\n<!-- Year -->\n<ng-template #defaultYear let-obj>\n    <span *ngIf=\"activeView === 'year'\" class=\"igx-calendar__aria-off-screen\" aria-live=\"polite\">{{ formattedYear(obj.date) }}</span>\n    <span\n        #yearsBtn\n        tabindex=\"0\"\n        role=\"button\"\n        [attr.aria-label]=\"(obj.date | date: 'yyyy') + ', ' + resourceStrings.igx_calendar_select_year\"\n        (keydown)=\"onActiveViewDecadeKB(obj.date, $event, obj.index)\"\n        (mousedown)=\"onActiveViewDecade($event, obj.date, obj.index)\"\n        class=\"igx-calendar-picker__date\">\n        {{ formattedYear(obj.date) }}\n    </span>\n</ng-template>\n\n<!-- Month Year -->\n<ng-template #defaultMonthYear let-obj let-result>\n    <span *ngIf=\"monthsViewNumber < 2 || obj.index < 1\" class=\"igx-calendar__aria-off-screen\" aria-live=\"polite\">\n            {{ monthsViewNumber > 1 ?\n        (resourceStrings.igx_calendar_first_picker_of.replace('{0}', monthsViewNumber.toString()) + ' ' +\n            (obj.date | date: 'LLLL yyyy')) :\n        resourceStrings.igx_calendar_selected_month_is + (obj.date | date: 'LLLL yyyy')}}\n    </span>\n    <ng-container *ngTemplateOutlet=\"defaultMonth; context: {$implicit: obj}\"></ng-container>\n    <ng-container *ngTemplateOutlet=\"defaultYear; context: {$implicit: obj}\"></ng-container>\n</ng-template>\n\n<!-- Decade -->\n<ng-template #defaultDecade>\n    <span>{{ getDecadeRange().start }} - {{ getDecadeRange().end }}</span>\n</ng-template>\n\n<!-- Previous arrow icon -->\n<ng-template #prevArrow let-obj>\n    <igx-icon aria-hidden=\"true\" family=\"default\" name=\"arrow_prev\"></igx-icon>\n</ng-template>\n\n<!-- Next arrow icon -->\n<ng-template #nextArrow let-obj>\n    <igx-icon aria-hidden=\"true\" family=\"default\" name=\"arrow_next\"></igx-icon>\n</ng-template>\n\n<!-- Previous picker button -->\n<ng-template #prevPageButton let-obj>\n    <div\n        #prevPageBtn\n        tabindex=\"0\"\n        class=\"igx-calendar-picker__prev\"\n        role=\"button\"\n        [attr.aria-label]=\"prevNavLabel((getPrevMonth(viewDate) | date: 'LLLL'))\"\n        data-action=\"prev\"\n        igxCalendarScrollPage\n        [startScroll]=\"startPrevPageScroll\"\n        [stopScroll]=\"stopPageScroll\"\n        (keydown)=\"$event.stopPropagation()\"\n    >\n        <ng-container *ngTemplateOutlet=\"prevArrow\"></ng-container>\n    </div>\n</ng-template>\n\n<!-- Next picker button -->\n<ng-template #nextPageButton let-obj>\n    <div\n        #nextPageBtn\n        tabindex=\"0\"\n        class=\"igx-calendar-picker__next\"\n        role=\"button\"\n        [attr.aria-label]=\"nextNavLabel((getNextMonth(viewDate, monthsViewNumber) | date: 'LLLL'))\"\n        data-action=\"next\"\n        igxCalendarScrollPage\n        [startScroll]=\"startNextPageScroll\"\n        [stopScroll]=\"stopPageScroll\"\n        (keydown)=\"$event.stopPropagation()\"\n    >\n        <ng-container *ngTemplateOutlet=\"nextArrow\"></ng-container>\n    </div>\n</ng-template>\n\n<!-- PICKER IN DAYS -->\n<ng-template #calendarDaysPicker let-i>\n    <section class=\"igx-calendar-picker\" [style.--calendar-row-start]=\"1 + (2 * i)\">\n        <div class=\"igx-calendar-picker__dates\" [attr.data-month]=\"i | IgxGetViewDate:viewDate:false\">\n            <ng-container\n                    *ngTemplateOutlet=\"subheaderTemplate ? subheaderTemplate : defaultMonthYear; context: getContext(i)\">\n            </ng-container>\n        </div>\n        <div\n            class=\"igx-calendar-picker__nav\"\n            *ngIf=\"this.orientation === 'horizontal' ? i === monthsViewNumber - 1 : i === 0\"\n        >\n            <ng-container *ngTemplateOutlet=\"prevPageButton\"></ng-container>\n            <ng-container *ngTemplateOutlet=\"nextPageButton\"></ng-container>\n        </div>\n    </section>\n</ng-template>\n\n<!-- PICKER IN MONTHS -->\n<ng-template #calendarYearPicker>\n    <section class=\"igx-calendar-picker\">\n        <div class=\"igx-calendar-picker__dates\">\n            <ng-container\n                *ngTemplateOutlet=\"subheaderTemplate ? subheaderTemplate : defaultYear; context: getContext(0)\">\n            </ng-container>\n        </div>\n        <div class=\"igx-calendar-picker__nav\">\n            <ng-container *ngTemplateOutlet=\"prevPageButton\"></ng-container>\n            <ng-container *ngTemplateOutlet=\"nextPageButton\"></ng-container>\n        </div>\n    </section>\n</ng-template>\n\n<!-- PICKER IN YEARS -->\n<ng-template #calendarDecadePicker>\n    <section class=\"igx-calendar-picker\">\n        <div class=\"igx-calendar-picker__dates\" aria-live=\"polite\">\n            <ng-container\n                    *ngTemplateOutlet=\"subheaderTemplate ? subheaderTemplate : defaultDecade;\">\n            </ng-container>\n        </div>\n        <div class=\"igx-calendar-picker__nav\">\n            <ng-container *ngTemplateOutlet=\"prevPageButton\"></ng-container>\n            <ng-container *ngTemplateOutlet=\"nextPageButton\"></ng-container>\n        </div>\n    </section>\n</ng-template>\n\n\n<header\n    aria-labelledby=\"igx-aria-calendar-title-month igx-aria-calendar-title-year\"\n    class=\"igx-calendar__header\"\n    *ngIf=\"selection === 'single' && hasHeader || selection === 'range' && hasHeader\">\n    <h5 id=\"igx-aria-calendar-title-year\" class=\"igx-calendar__header-year\">\n        <ng-container *ngTemplateOutlet=\"headerTitleTemplate ?? defaultHeaderTitle; context: headerContext\"></ng-container>\n    </h5>\n    <h2 id=\"igx-aria-calendar-title-month\" class=\"igx-calendar__header-date\">\n        <ng-container *ngTemplateOutlet=\"headerTemplate ? headerTemplate : defaultHeaderDate; context: headerContext\">\n        </ng-container>\n    </h2>\n</header>\n\n\n<div\n    #wrapper\n    [style.--calendar-months]=\"monthsViewNumber\"\n    [tabIndex]=\"0\"\n    class=\"igx-calendar__wrapper\"\n    [class.igx-calendar__wrapper--vertical]=\"orientation === 'vertical'\"\n    [attr.aria-activedescendant]=\"activeDescendant\"\n    [attr.aria-multiselectable]=\"selection !== 'single'\"\n    aria-labelledby=\"calendar-desc\"\n    role=\"grid\"\n    >\n    <caption id=\"calendar-desc\" tabindex=\"-1\" class=\"igx-calendar__aria-off-screen\">\n        <ng-container *ngIf=\"selection === 'multi'\">\n            {{ monthsViewNumber && monthsViewNumber > 1 ?\n            resourceStrings.igx_calendar_multi_selection.replace('{0}', monthsViewNumber.toString()) :\n            resourceStrings.igx_calendar_singular_multi_selection}}\n        </ng-container>\n        <ng-container *ngIf=\"selection === 'range'\">\n            {{ monthsViewNumber && monthsViewNumber > 1 ?\n            resourceStrings.igx_calendar_range_selection.replace('{0}', monthsViewNumber.toString()) :\n            resourceStrings.igx_calendar_singular_range_selection}}\n        </ng-container>\n        <ng-container *ngIf=\"selection === 'single'\">\n            {{ monthsViewNumber && monthsViewNumber > 1 ?\n            resourceStrings.igx_calendar_single_selection.replace('{0}', monthsViewNumber.toString()) :\n            resourceStrings.igx_calendar_singular_single_selection}}\n        </ng-container>\n    </caption>\n    <section\n        class=\"igx-calendar__pickers\"\n        [class.igx-calendar__pickers--days]=\"isDefaultView\"\n        [class.igx-calendar__pickers--vertical]=\"orientation === 'vertical'\"\n    >\n        <ng-container *ngIf=\"isDefaultView\">\n            <ng-container *ngFor=\"let view of monthsViewNumber | IgxMonthViewSlots; index as i\">\n                <ng-container *ngTemplateOutlet=\"calendarDaysPicker; context: {$implicit: i}\"></ng-container>\n            </ng-container>\n        </ng-container>\n\n        <ng-container *ngIf=\"isYearView\">\n            <ng-container *ngTemplateOutlet=\"calendarYearPicker\"></ng-container>\n        </ng-container>\n\n        <ng-container *ngIf=\"isDecadeView\">\n            <ng-container *ngTemplateOutlet=\"calendarDecadePicker\"></ng-container>\n        </ng-container>\n    </section>\n\n    <section class=\"igx-calendar__body\" [class.igx-calendar__body--vertical]=\"orientation === 'vertical'\" role=\"presentation\">\n        <ng-container *ngIf=\"isDefaultView\">\n            <ng-container *ngFor=\"let view of monthsViewNumber | IgxMonthViewSlots; index as i\">\n                <igx-days-view\n                    #days\n                    role=\"rowgroup\"\n                    [tabIndex]=\"-1\"\n                    [selection]=\"selection\"\n                    [locale]=\"locale\"\n                    [value]=\"value\"\n                    [(activeDate)]=\"activeDate\"\n                    [(previewRangeDate)]=\"previewRangeDate\"\n                    [viewDate]=\"i | IgxGetViewDate: viewDate\"\n                    [weekStart]=\"weekStart\"\n                    [formatOptions]=\"formatOptions\"\n                    [formatViews]=\"formatViews\"\n                    [disabledDates]=\"disabledDates\"\n                    [specialDates]=\"specialDates\"\n                    [style.--calendar-row-start]=\"(i + 1) * 2\"\n                    [hideLeadingDays]=\"hideOutsideDays || i !== 0\"\n                    [hideTrailingDays]=\"hideOutsideDays || i !== monthsViewNumber - 1\"\n                    [showWeekNumbers]=\"showWeekNumbers\"\n                    [showActiveDay]=\"showActiveDay\"\n                    [standalone]=\"false\"\n                    (swiperight)=\"previousPage()\"\n                    (swipeleft)=\"nextPage()\"\n                    (dateSelected)=\"handleDateSelection($event)\"\n                    (mousedown)=\"$event.preventDefault()\">\n                </igx-days-view>\n            </ng-container>\n        </ng-container>\n\n        <ng-container *ngIf=\"isYearView\">\n            <igx-months-view\n                #months\n                role=\"rowgroup\"\n                [tabIndex]=\"-1\"\n                [date]=\"viewDate\"\n                [locale]=\"locale\"\n                [formatView]=\"formatViews.month\"\n                [monthFormat]=\"formatOptions.month\"\n                [showActive]=\"showActiveDay\"\n                [standalone]=\"false\"\n                (swiperight)=\"previousPage()\"\n                (swipeleft)=\"nextPage()\"\n                (pageChanged)=\"updateYear($event)\"\n                (activeDateChanged)=\"updateActiveDescendant($event)\"\n                (selected)=\"changeMonth($event)\"\n                (mousedown)=\"$event.preventDefault()\">\n            </igx-months-view>\n        </ng-container>\n\n        <ng-container *ngIf=\"isDecadeView\">\n            <igx-years-view\n                #decade\n                role=\"rowgroup\"\n                [tabIndex]=\"-1\"\n                [date]=\"viewDate\"\n                [locale]=\"locale\"\n                [formatView]=\"formatViews.year\"\n                [yearFormat]=\"formatOptions.year\"\n                [showActive]=\"showActiveDay\"\n                [standalone]=\"false\"\n                (swiperight)=\"previousPage()\"\n                (swipeleft)=\"nextPage()\"\n                (pageChanged)=\"updateYear($event)\"\n                (activeDateChanged)=\"updateActiveDescendant($event)\"\n                (selected)=\"changeYear($event)\"\n                (mousedown)=\"$event.preventDefault()\">\n            </igx-years-view>\n        </ng-container>\n    </section>\n</div>\n" }]
        }], propDecorators: { wrapper: [{
                type: ViewChild,
                args: ["wrapper"]
            }], id: [{
                type: HostBinding,
                args: ['attr.id']
            }, {
                type: Input
            }], hasHeader: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], vertical: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], orientation: [{
                type: Input
            }], headerOrientation: [{
                type: Input
            }], monthsViewNumber: [{
                type: Input
            }], showWeekNumbers: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], styleVerticalClass: [{
                type: HostBinding,
                args: ['class.igx-calendar--vertical']
            }], styleClass: [{
                type: HostBinding,
                args: ['class.igx-calendar']
            }], monthsBtns: [{
                type: ViewChildren,
                args: ['monthsBtn']
            }], dacadeView: [{
                type: ViewChild,
                args: ['decade', { read: IgxYearsViewComponent }]
            }], monthsView: [{
                type: ViewChild,
                args: ['months', { read: IgxMonthsViewComponent }]
            }], daysView: [{
                type: ViewChild,
                args: ['days', { read: IgxDaysViewComponent }]
            }], monthViews: [{
                type: ViewChildren,
                args: ['days', { read: IgxDaysViewComponent }]
            }], prevPageBtn: [{
                type: ViewChild,
                args: ['prevPageBtn']
            }], nextPageBtn: [{
                type: ViewChild,
                args: ['nextPageBtn']
            }], headerTemplateDirective: [{
                type: ContentChild,
                args: [forwardRef(() => IgxCalendarHeaderTemplateDirective), { read: IgxCalendarHeaderTemplateDirective, static: true }]
            }], headerTitleTemplateDirective: [{
                type: ContentChild,
                args: [forwardRef(() => IgxCalendarHeaderTitleTemplateDirective), { read: IgxCalendarHeaderTitleTemplateDirective, static: true }]
            }], subheaderTemplateDirective: [{
                type: ContentChild,
                args: [forwardRef(() => IgxCalendarSubheaderTemplateDirective), { read: IgxCalendarSubheaderTemplateDirective, static: true }]
            }], onMouseDown: [{
                type: HostListener,
                args: ['mousedown', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,