import { Input, Output, EventEmitter, Directive, Inject, LOCALE_ID, HostListener, booleanAttribute, ViewChildren } from '@angular/core';
import { IgxCalendarView, CalendarSelection } from './calendar';
import { noop, Subject } from 'rxjs';
import { isDate, isEqual } from '../core/utils';
import { CalendarResourceStringsEN } from '../core/i18n/calendar-resources';
import { DateTimeUtil } from '../date-common/util/date-time.util';
import { getLocaleFirstDayOfWeek } from "@angular/common";
import { getCurrentResourceStrings } from '../core/i18n/resources';
import { KeyboardNavigationService } from './calendar.services';
import { getYearRange, isDateInRanges } from './common/helpers';
import { CalendarDay } from './common/model';
import * as i0 from "@angular/core";
import * as i1 from "../core/utils";
import * as i2 from "./calendar.services";
/** @hidden @internal */
export class IgxCalendarBaseDirective {
    /**
     * An accessor that sets the resource strings.
     * By default it uses EN resources.
     */
    set resourceStrings(value) {
        this._resourceStrings = Object.assign({}, this._resourceStrings, value);
    }
    /**
     * An accessor that returns the resource strings.
     */
    get resourceStrings() {
        return this._resourceStrings;
    }
    /**
     * Gets the start day of the week.
     * Can return a numeric or an enum representation of the week day.
     * If not set, defaults to the first day of the week for the application locale.
     */
    get weekStart() {
        return this._weekStart;
    }
    /**
     * Sets the start day of the week.
     * Can be assigned to a numeric value or to `WEEKDAYS` enum value.
     */
    set weekStart(value) {
        this._weekStart = value;
    }
    /**
     * Gets the `locale` of the calendar.
     * If not set, defaults to application's locale.
     */
    get locale() {
        return this._locale;
    }
    /**
     * Sets the `locale` of the calendar.
     * Expects a valid BCP 47 language tag.
     */
    set locale(value) {
        this._locale = value;
        // if value is not a valid BCP 47 tag, set it back to _localeId
        try {
            getLocaleFirstDayOfWeek(this._locale);
        }
        catch (e) {
            this._locale = this._localeId;
        }
        // changing locale runtime needs to update the `weekStart` too, if `weekStart` is not explicitly set
        if (!this.weekStart) {
            this.weekStart = getLocaleFirstDayOfWeek(this._locale);
        }
        this.initFormatters();
    }
    /**
     * Gets the date format options of the views.
     */
    get formatOptions() {
        return this._formatOptions;
    }
    /**
     * Sets the date format options of the views.
     * Default is { day: 'numeric', month: 'short', weekday: 'short', year: 'numeric' }
     */
    set formatOptions(formatOptions) {
        this._formatOptions = { ...this._formatOptions, ...formatOptions };
        this.initFormatters();
    }
    /**
     * Gets whether the `day`, `month` and `year` should be rendered
     * according to the locale and formatOptions, if any.
     */
    get formatViews() {
        return this._formatViews;
    }
    /**
     * Sets whether the `day`, `month` and `year` should be rendered
     * according to the locale and formatOptions, if any.
     */
    set formatViews(formatViews) {
        this._formatViews = Object.assign(this._formatViews, formatViews);
    }
    /**
     * Gets the current active view.
     * ```typescript
     * this.activeView = calendar.activeView;
     * ```
     */
    get activeView() {
        return this._activeView;
    }
    /**
     * Sets the current active view.
     * ```html
     * <igx-calendar [activeView]="year" #calendar></igx-calendar>
     * ```
     * ```typescript
     * calendar.activeView = IgxCalendarView.YEAR;
     * ```
     */
    set activeView(val) {
        this._activeView = val;
        this.activeViewSubject.next(val);
    }
    /**
     * @hidden
     */
    get isDefaultView() {
        return this._activeView === IgxCalendarView.Month;
    }
    /**
     * @hidden
     */
    get isDecadeView() {
        return this._activeView === IgxCalendarView.Decade;
    }
    /**
     * @hidden
     */
    activeViewDecade(activeViewIdx = 0) {
        this.activeView = IgxCalendarView.Decade;
        this.activeViewIdx = activeViewIdx;
    }
    /**
     * @hidden
     */
    activeViewDecadeKB(event, activeViewIdx = 0) {
        event.stopPropagation();
        if (this.platform.isActivationKey(event)) {
            event.preventDefault();
            this.activeViewDecade(activeViewIdx);
        }
    }
    /**
     * @hidden
     */
    changeYear(date) {
        this.previousViewDate = this.viewDate;
        this.viewDate = CalendarDay.from(date).add('month', -this.activeViewIdx).native;
        this.activeView = IgxCalendarView.Month;
    }
    /**
     * Returns the locale representation of the year in the year view if enabled,
     * otherwise returns the default `Date.getFullYear()` value.
     *
     * @hidden
     */
    formattedYear(value) {
        if (Array.isArray(value)) {
            return;
        }
        if (this.formatViews.year) {
            return this.formatterYear.format(value);
        }
        return `${value.getFullYear()}`;
    }
    formattedYears(value) {
        const dates = value;
        return dates.map(date => this.formattedYear(date)).join(' - ');
    }
    prevNavLabel(detail) {
        switch (this.activeView) {
            case 'month':
                return `${this.resourceStrings.igx_calendar_previous_month}, ${detail}`;
            case 'year':
                return this.resourceStrings.igx_calendar_previous_year.replace('{0}', '15');
            case 'decade':
                return this.resourceStrings.igx_calendar_previous_years.replace('{0}', '15');
        }
    }
    nextNavLabel(detail) {
        switch (this.activeView) {
            case 'month':
                return `${this.resourceStrings.igx_calendar_next_month}, ${detail}`;
            case 'year':
                return this.resourceStrings.igx_calendar_next_year.replace('{0}', '15');
            case 'decade':
                return this.resourceStrings.igx_calendar_next_years.replace('{0}', '15');
        }
    }
    getDecadeRange() {
        const range = getYearRange(this.viewDate, 15);
        const start = CalendarDay.from(this.viewDate).set({ date: 1, year: range.start });
        const end = CalendarDay.from(this.viewDate).set({ date: 1, year: range.end });
        return {
            start: this.formatterYear.format(start.native),
            end: this.formatterYear.format(end.native)
        };
    }
    /**
     *
     * Gets the selection type.
     * Default value is `"single"`.
     * Changing the type of selection resets the currently
     * selected values if any.
     */
    get selection() {
        return this._selection;
    }
    /**
     * Sets the selection.
     */
    set selection(value) {
        switch (value) {
            case CalendarSelection.SINGLE:
                this.selectedDates = null;
                break;
            case CalendarSelection.MULTI:
            case CalendarSelection.RANGE:
                this.selectedDates = [];
                break;
            default:
                throw new Error('Invalid selection value');
        }
        this._onChangeCallback(this.selectedDates);
        this.rangeStarted = false;
        this._selection = value;
    }
    /**
     * Gets the date that is presented. By default it is the current date.
     */
    get viewDate() {
        return this._viewDate;
    }
    /**
     * Sets the date that will be presented in the default view when the component renders.
     */
    set viewDate(value) {
        if (Array.isArray(value)) {
            return;
        }
        if (typeof value === 'string') {
            value = DateTimeUtil.parseIsoDate(value);
        }
        const validDate = this.validateDate(value);
        if (this._viewDate) {
            this.initialSelection = validDate;
        }
        const date = this.getDateOnly(validDate).setDate(1);
        this._viewDate = new Date(date);
    }
    /**
     * Gets the disabled dates descriptors.
     */
    get disabledDates() {
        return this._disabledDates;
    }
    /**
     * Sets the disabled dates' descriptors.
     * ```typescript
     * @ViewChild("MyCalendar")
     * public calendar: IgxCalendarComponent;
     * ngOnInit(){
     *    this.calendar.disabledDates = [
     *     {type: DateRangeType.Between, dateRange: [new Date("2020-1-1"), new Date("2020-1-15")]},
     *     {type: DateRangeType.Weekends}];
     * }
     * ```
     */
    set disabledDates(value) {
        this._disabledDates = value;
    }
    /**
     * Checks whether a date is disabled.
     *
     * @hidden
     */
    isDateDisabled(date) {
        if (!this.disabledDates) {
            return false;
        }
        if (typeof date === 'string') {
            date = DateTimeUtil.parseIsoDate(date);
        }
        return isDateInRanges(date, this.disabledDates);
    }
    /**
     * Gets the special dates descriptors.
     */
    get specialDates() {
        return this._specialDates;
    }
    /**
     * Sets the special dates' descriptors.
     * ```typescript
     * @ViewChild("MyCalendar")
     * public calendar: IgxCalendarComponent;
     * ngOnInit(){
     *    this.calendar.specialDates = [
     *     {type: DateRangeType.Between, dateRange: [new Date("2020-1-1"), new Date("2020-1-15")]},
     *     {type: DateRangeType.Weekends}];
     * }
     * ```
     */
    set specialDates(value) {
        this._specialDates = value;
    }
    /**
     * Gets the selected date(s).
     *
     * When selection is set to `single`, it returns
     * a single `Date` object.
     * Otherwise it is an array of `Date` objects.
     */
    get value() {
        if (this.selection === CalendarSelection.SINGLE) {
            return this.selectedDates?.at(0);
        }
        return this.selectedDates;
    }
    /**
     * Sets the selected date(s).
     *
     * When selection is set to `single`, it accepts
     * a single `Date` object.
     * Otherwise it is an array of `Date` objects.
     */
    set value(value) {
        // Validate the date if it is of type string and it is IsoDate
        if (typeof value === 'string') {
            value = DateTimeUtil.parseIsoDate(value);
        }
        // Check if value is set initially by the user,
        // if it's not set the initial selection to the current date
        if (!value || (Array.isArray(value) && value.length === 0)) {
            this.initialSelection = new Date();
            return;
        }
        // Value is provided, but there's no initial selection, set the initial selection to the passed value
        if (!this.initialSelection) {
            this.viewDate = Array.isArray(value) ? new Date(Math.min(...value)) : value;
        }
        // we then call selectDate with either a single date or an array of dates
        // we also set the initial selection to the provided value
        this.selectDate(value);
        this.initialSelection = value;
    }
    /**
     * @hidden
     */
    constructor(platform, _localeId, keyboardNavigation, cdr) {
        this.platform = platform;
        this._localeId = _localeId;
        this.keyboardNavigation = keyboardNavigation;
        this.cdr = cdr;
        /**
         * Holds month view index we are operating on.
         */
        this.activeViewIdx = 0;
        /**
         * @hidden
         */
        this._activeView = IgxCalendarView.Month;
        /**
         * @hidden
         */
        this.activeViewSubject = new Subject();
        /**
         * @hidden
         */
        this.activeView$ = this.activeViewSubject.asObservable();
        /**
         * Sets/gets whether the outside dates (dates that are out of the current month) will be hidden.
         * Default value is `false`.
         * ```html
         * <igx-calendar [hideOutsideDays]="true"></igx-calendar>
         * ```
         * ```typescript
         * let hideOutsideDays = this.calendar.hideOutsideDays;
         * ```
         */
        this.hideOutsideDays = false;
        /**
         * Emits an event when a date is selected.
         * Provides reference the `selectedDates` property.
         */
        this.selected = new EventEmitter();
        /**
         * Emits an event when the month in view is changed.
         * ```html
         * <igx-calendar (viewDateChanged)="viewDateChanged($event)"></igx-calendar>
         * ```
         * ```typescript
         * public viewDateChanged(event: IViewDateChangeEventArgs) {
         *  let viewDate = event.currentValue;
         * }
         * ```
         */
        this.viewDateChanged = new EventEmitter();
        /**
         * Emits an event when the active view is changed.
         * ```html
         * <igx-calendar (activeViewChanged)="activeViewChanged($event)"></igx-calendar>
         * ```
         * ```typescript
         * public activeViewChanged(event: CalendarView) {
         *  let activeView = event;
         * }
         * ```
         */
        this.activeViewChanged = new EventEmitter();
        /**
         * @hidden
         */
        this.rangeStarted = false;
        /**
         * @hidden
         */
        this.pageScrollDirection = "none" /* ScrollDirection.NONE */;
        /**
         * @hidden
         */
        this.scrollPage$ = new Subject();
        /**
         * @hidden
         */
        this.stopPageScroll$ = new Subject();
        /**
         * @hidden
         */
        this.startPageScroll$ = new Subject();
        /**
         * @hidden
         */
        this.shiftKey = false;
        /**
         * @hidden
         */
        this._onTouchedCallback = noop;
        /**
         * @hidden
         */
        this._onChangeCallback = noop;
        /**
         * @hidden
         */
        this._disabledDates = [];
        /**
         * @hidden
         */
        this._specialDates = [];
        /**
         * @hidden
         */
        this._selection = CalendarSelection.SINGLE;
        /** @hidden @internal */
        this._resourceStrings = getCurrentResourceStrings(CalendarResourceStringsEN);
        /**
         * @hidden
         */
        this._formatOptions = {
            day: 'numeric',
            month: 'long',
            weekday: 'narrow',
            year: 'numeric'
        };
        /**
         * @hidden
         */
        this._formatViews = {
            day: false,
            month: true,
            year: false
        };
        this.locale = _localeId;
        this.viewDate = this.viewDate ? this.viewDate : new Date();
        this.initFormatters();
    }
    /**
     * Multi/Range selection with shift key
     *
     * @hidden
     * @internal
     */
    onPointerdown(event) {
        this.shiftKey = event.button === 0 && event.shiftKey;
    }
    /**
     * @hidden
     */
    registerOnChange(fn) {
        this._onChangeCallback = fn;
    }
    /**
     * @hidden
     */
    registerOnTouched(fn) {
        this._onTouchedCallback = fn;
    }
    /**
     * @hidden
     */
    writeValue(value) {
        this.value = value;
    }
    /**
     * Selects date(s) (based on the selection type).
     */
    selectDate(value) {
        if (typeof value === 'string') {
            value = DateTimeUtil.parseIsoDate(value);
        }
        if (value === null || value === undefined || (Array.isArray(value) && value.length === 0)) {
            return;
        }
        switch (this.selection) {
            case CalendarSelection.SINGLE:
                if (isDate(value) && !this.isDateDisabled(value)) {
                    this.selectSingle(value);
                }
                break;
            case CalendarSelection.MULTI:
                this.selectMultiple(value);
                break;
            case CalendarSelection.RANGE:
                this.selectRange(value, true);
                break;
        }
    }
    /**
     * Deselects date(s) (based on the selection type).
     */
    deselectDate(value) {
        if (!this.selectedDates || this.selectedDates.length === 0) {
            return;
        }
        if (typeof value === 'string') {
            value = DateTimeUtil.parseIsoDate(value);
        }
        if (value === null || value === undefined) {
            this.selectedDates = this.selection === CalendarSelection.SINGLE ? null : [];
            this.rangeStarted = false;
            this._onChangeCallback(this.selectedDates);
            return;
        }
        switch (this.selection) {
            case CalendarSelection.SINGLE:
                this.deselectSingle(value);
                break;
            case CalendarSelection.MULTI:
                this.deselectMultiple(value);
                break;
            case CalendarSelection.RANGE:
                this.deselectRange(value);
                break;
        }
    }
    /**
     * Performs a single selection.
     *
     * @hidden
     */
    selectSingle(value) {
        if (!isEqual(this.selectedDates?.at(0), value)) {
            this.selectedDates = [this.getDateOnly(value)];
            this._onChangeCallback(this.selectedDates.at(0));
        }
    }
    /**
     * Performs a single deselection.
     *
     * @hidden
     */
    deselectSingle(value) {
        if (this.selectedDates !== null &&
            this.getDateOnlyInMs(value) === this.getDateOnlyInMs(this.selectedDates.at(0))) {
            this.selectedDates = null;
            this._onChangeCallback(this.selectedDates);
        }
    }
    /**
     * Performs a multiple selection
     *
     * @hidden
     */
    selectMultiple(value) {
        if (Array.isArray(value)) {
            const newDates = value.map(v => this.getDateOnly(v).getTime());
            const selDates = this.selectedDates.map(v => this.getDateOnly(v).getTime());
            if (JSON.stringify(newDates) === JSON.stringify(selDates)) {
                return;
            }
            if (selDates.length === 0 || selDates.length > newDates.length) {
                // deselect the dates that are part of currently selectedDates and not part of updated new values
                this.selectedDates = newDates.map(v => new Date(v));
            }
            else {
                this.selectedDates = Array.from(new Set([...newDates, ...selDates])).map(v => new Date(v));
            }
        }
        else {
            let newSelection = [];
            if (this.shiftKey && this.lastSelectedDate) {
                [this._startDate, this._endDate] = this.lastSelectedDate.getTime() < value.getTime()
                    ? [this.lastSelectedDate, value]
                    : [value, this.lastSelectedDate];
                const unselectedDates = [this._startDate, ...this.generateDateRange(this._startDate, this._endDate)]
                    .filter(date => !this.isDateDisabled(date)
                    && this.selectedDates.every((d) => d.getTime() !== date.getTime()));
                // select all dates from last selected to shift clicked date
                if (this.selectedDates.some((date) => date.getTime() === this.lastSelectedDate.getTime())
                    && unselectedDates.length) {
                    newSelection = unselectedDates;
                }
                else {
                    // delesect all dates from last clicked to shift clicked date (excluding)
                    this.selectedDates = this.selectedDates.filter((date) => date.getTime() < this._startDate.getTime() || date.getTime() > this._endDate.getTime());
                    this.selectedDates.push(value);
                    this._deselectDate = true;
                }
                this._startDate = this._endDate = undefined;
            }
            else if (this.selectedDates.every((date) => date.getTime() !== value.getTime())) {
                newSelection.push(value);
            }
            else {
                this.selectedDates = this.selectedDates.filter((date) => date.getTime() !== value.getTime());
                this._deselectDate = true;
            }
            if (newSelection.length > 0) {
                this.selectedDates = this.selectedDates.concat(newSelection);
                this._deselectDate = false;
            }
            this.lastSelectedDate = value;
        }
        this.selectedDates = this.selectedDates.filter(d => !this.isDateDisabled(d));
        this.selectedDates.sort((a, b) => a.valueOf() - b.valueOf());
        this._onChangeCallback(this.selectedDates);
    }
    /**
     * Performs a multiple deselection.
     *
     * @hidden
     */
    deselectMultiple(value) {
        value = value.filter(v => v !== null);
        const selectedDatesCount = this.selectedDates.length;
        const datesInMsToDeselect = new Set(value.map(v => this.getDateOnlyInMs(v)));
        for (let i = this.selectedDates.length - 1; i >= 0; i--) {
            if (datesInMsToDeselect.has(this.getDateOnlyInMs(this.selectedDates[i]))) {
                this.selectedDates.splice(i, 1);
            }
        }
        if (this.selectedDates.length !== selectedDatesCount) {
            this._onChangeCallback(this.selectedDates);
        }
    }
    /**
     * @hidden
     */
    selectRange(value, excludeDisabledDates = false) {
        if (Array.isArray(value)) {
            value.sort((a, b) => a.valueOf() - b.valueOf());
            this._startDate = this.getDateOnly(value[0]);
            this._endDate = this.getDateOnly(value[value.length - 1]);
        }
        else {
            if (this.shiftKey && this.lastSelectedDate) {
                if (this.lastSelectedDate.getTime() === value.getTime()) {
                    this.selectedDates = this.selectedDates.length === 1 ? [] : [value];
                    this.rangeStarted = !!this.selectedDates.length;
                    this._onChangeCallback(this.selectedDates);
                    return;
                }
                // shortens the range when selecting a date inside of it
                if (this.selectedDates.some((date) => date.getTime() === value.getTime())) {
                    this.lastSelectedDate.getTime() < value.getTime()
                        ? this._startDate = value
                        : this._endDate = value;
                }
                else {
                    // extends the range when selecting a date outside of it
                    // allows selection from last deselected to current selected date
                    if (this.lastSelectedDate.getTime() < value.getTime()) {
                        this._startDate = this._startDate ?? this.lastSelectedDate;
                        this._endDate = value;
                    }
                    else {
                        this._startDate = value;
                        this._endDate = this._endDate ?? this.lastSelectedDate;
                    }
                }
                this.rangeStarted = false;
            }
            else if (!this.rangeStarted) {
                this.rangeStarted = true;
                this.selectedDates = [value];
                this._startDate = this._endDate = undefined;
            }
            else {
                this.rangeStarted = false;
                if (this.selectedDates?.at(0)?.getTime() === value.getTime()) {
                    this.selectedDates = [];
                    this._onChangeCallback(this.selectedDates);
                    return;
                }
                [this._startDate, this._endDate] = this.lastSelectedDate.getTime() < value.getTime()
                    ? [this.lastSelectedDate, value]
                    : [value, this.lastSelectedDate];
            }
            this.lastSelectedDate = value;
        }
        if (this._startDate && this._endDate) {
            this.selectedDates = [this._startDate, ...this.generateDateRange(this._startDate, this._endDate)];
        }
        if (excludeDisabledDates) {
            this.selectedDates = this.selectedDates.filter(d => !this.isDateDisabled(d));
        }
        this._onChangeCallback(this.selectedDates);
    }
    /**
     * Performs a range deselection.
     *
     * @hidden
     */
    deselectRange(value) {
        value = value.filter(v => v !== null);
        if (value.length < 1) {
            return;
        }
        value.sort((a, b) => a.valueOf() - b.valueOf());
        const valueStart = this.getDateOnlyInMs(value[0]);
        const valueEnd = this.getDateOnlyInMs(value[value.length - 1]);
        this.selectedDates.sort((a, b) => a.valueOf() - b.valueOf());
        const selectedDatesStart = this.getDateOnlyInMs(this.selectedDates[0]);
        const selectedDatesEnd = this.getDateOnlyInMs(this.selectedDates[this.selectedDates.length - 1]);
        if (!(valueEnd < selectedDatesStart) && !(valueStart > selectedDatesEnd)) {
            this.selectedDates = [];
            this.rangeStarted = false;
            this._onChangeCallback(this.selectedDates);
        }
    }
    /**
     * @hidden
     */
    initFormatters() {
        this.formatterDay = new Intl.DateTimeFormat(this._locale, { day: this._formatOptions.day });
        this.formatterWeekday = new Intl.DateTimeFormat(this._locale, { weekday: this._formatOptions.weekday });
        this.formatterMonth = new Intl.DateTimeFormat(this._locale, { month: this._formatOptions.month });
        this.formatterYear = new Intl.DateTimeFormat(this._locale, { year: this._formatOptions.year });
        this.formatterMonthday = new Intl.DateTimeFormat(this._locale, { month: this._formatOptions.month, day: this._formatOptions.day });
        this.formatterRangeday = new Intl.DateTimeFormat(this._locale, { day: this._formatOptions.day, month: 'short' });
    }
    /**
     * @hidden
     */
    getDateOnly(date) {
        const validDate = this.validateDate(date);
        return new Date(validDate.getFullYear(), validDate.getMonth(), validDate.getDate());
    }
    /**
     * @hidden
     */
    getDateOnlyInMs(date) {
        return this.getDateOnly(date).getTime();
    }
    /**
     * @hidden
     */
    generateDateRange(start, end) {
        const result = [];
        start = this.getDateOnly(start);
        end = this.getDateOnly(end);
        while (start.getTime() < end.getTime()) {
            start = CalendarDay.from(start).add('day', 1).native;
            result.push(start);
        }
        return result;
    }
    validateDate(value) {
        return DateTimeUtil.isValidDate(value) ? value : new Date();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxCalendarBaseDirective, deps: [{ token: i1.PlatformUtil }, { token: LOCALE_ID }, { token: i2.KeyboardNavigationService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "16.1.0", version: "18.2.4", type: IgxCalendarBaseDirective, isStandalone: true, selector: "[igxCalendarBase]", inputs: { hideOutsideDays: ["hideOutsideDays", "hideOutsideDays", booleanAttribute], resourceStrings: "resourceStrings", weekStart: "weekStart", locale: "locale", formatOptions: "formatOptions", formatViews: "formatViews", activeView: "activeView", selection: "selection", viewDate: "viewDate", disabledDates: "disabledDates", specialDates: "specialDates", value: "value" }, outputs: { selected: "selected", viewDateChanged: "viewDateChanged", activeViewChanged: "activeViewChanged" }, host: { listeners: { "pointerdown": "onPointerdown($event)" } }, providers: [KeyboardNavigationService], viewQueries: [{ propertyName: "yearsBtns", predicate: ["yearsBtn"], descendants: true }], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxCalendarBaseDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxCalendarBase]',
                    standalone: true,
                    providers: [KeyboardNavigationService]
                }]
        }], ctorParameters: () => [{ type: i1.PlatformUtil }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [LOCALE_ID]
                }] }, { type: i2.KeyboardNavigationService }, { type: i0.ChangeDetectorRef }], propDecorators: { hideOutsideDays: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], selected: [{
                type: Output
            }], viewDateChanged: [{
                type: Output
            }], activeViewChanged: [{
                type: Output
            }], resourceStrings: [{
                type: Input
            }], weekStart: [{
                type: Input
            }], locale: [{
                type: Input
            }], formatOptions: [{
                type: Input
            }], formatViews: [{
                type: Input
            }], activeView: [{
                type: Input
            }], yearsBtns: [{
                type: ViewChildren,
                args: ['yearsBtn']
            }], selection: [{
                type: Input
            }], viewDate: [{
                type: Input
            }], disabledDates: [{
                type: Input
            }], specialDates: [{
                type: Input
            }], value: [{
                type: Input
            }], onPointerdown: [{
                type: HostListener,
                args: ['pointerdown', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,