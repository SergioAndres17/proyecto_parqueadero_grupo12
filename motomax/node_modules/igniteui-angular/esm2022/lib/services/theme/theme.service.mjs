import { Inject, Injectable } from "@angular/core";
import { mkenum } from "../../core/utils";
import { BehaviorSubject } from "rxjs";
import { DOCUMENT } from "@angular/common";
import * as i0 from "@angular/core";
const Theme = /*@__PURE__*/ mkenum({
    Material: "material",
    Fluent: "fluent",
    Bootstrap: "bootstrap",
    IndigoDesign: "indigo",
});
export class ThemeService {
    constructor(document) {
        this.document = document;
        this.theme$ = new BehaviorSubject("material");
        this.theme$.asObservable().subscribe((value) => {
            this.globalTheme = value;
        });
        this.init();
    }
    init() {
        const theme = globalThis.window
            ?.getComputedStyle(this.document.body)
            .getPropertyValue("--ig-theme")
            .trim();
        if (theme !== "") {
            this.theme$.next(theme);
        }
    }
    getComponentTheme(el) {
        return globalThis.window
            ?.getComputedStyle(el.nativeElement)
            .getPropertyValue('--theme')
            .trim();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: ThemeService, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: ThemeService, providedIn: "root" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: ThemeService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: "root",
                }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGhlbWUuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9zZXJ2aWNlcy90aGVtZS90aGVtZS5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBYyxNQUFNLEVBQUUsVUFBVSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQy9ELE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxrQkFBa0IsQ0FBQztBQUMxQyxPQUFPLEVBQUUsZUFBZSxFQUFFLE1BQU0sTUFBTSxDQUFDO0FBQ3ZDLE9BQU8sRUFBRSxRQUFRLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7QUFFM0MsTUFBTSxLQUFLLEdBQUcsYUFBYSxDQUFDLE1BQU0sQ0FBQztJQUMvQixRQUFRLEVBQUUsVUFBVTtJQUNwQixNQUFNLEVBQUUsUUFBUTtJQUNoQixTQUFTLEVBQUUsV0FBVztJQUN0QixZQUFZLEVBQUUsUUFBUTtDQUN6QixDQUFDLENBQUM7QUFVSCxNQUFNLE9BQU8sWUFBWTtJQVFyQixZQUVZLFFBQWE7UUFBYixhQUFRLEdBQVIsUUFBUSxDQUFLO1FBSmpCLFdBQU0sR0FBRyxJQUFJLGVBQWUsQ0FBVyxVQUFVLENBQUMsQ0FBQztRQU12RCxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksRUFBRSxDQUFDLFNBQVMsQ0FBQyxDQUFDLEtBQUssRUFBRSxFQUFFO1lBQzNDLElBQUksQ0FBQyxXQUFXLEdBQUcsS0FBaUIsQ0FBQztRQUN6QyxDQUFDLENBQUMsQ0FBQztRQUVILElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztJQUNoQixDQUFDO0lBRU8sSUFBSTtRQUNSLE1BQU0sS0FBSyxHQUFHLFVBQVUsQ0FBQyxNQUFNO1lBQzNCLEVBQUUsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7YUFDckMsZ0JBQWdCLENBQUMsWUFBWSxDQUFDO2FBQzlCLElBQUksRUFBRSxDQUFDO1FBRVosSUFBSSxLQUFLLEtBQUssRUFBRSxFQUFFLENBQUM7WUFDZixJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFpQixDQUFDLENBQUM7UUFDeEMsQ0FBQztJQUNMLENBQUM7SUFFTSxpQkFBaUIsQ0FBQyxFQUFjO1FBQ25DLE9BQU8sVUFBVSxDQUFDLE1BQU07WUFDeEIsRUFBRSxnQkFBZ0IsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDO2FBQ25DLGdCQUFnQixDQUFDLFNBQVMsQ0FBQzthQUMzQixJQUFJLEVBQWMsQ0FBQztJQUN4QixDQUFDOzhHQW5DUSxZQUFZLGtCQVNULFFBQVE7a0hBVFgsWUFBWSxjQUZULE1BQU07OzJGQUVULFlBQVk7a0JBSHhCLFVBQVU7bUJBQUM7b0JBQ1IsVUFBVSxFQUFFLE1BQU07aUJBQ3JCOzswQkFVUSxNQUFNOzJCQUFDLFFBQVEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFbGVtZW50UmVmLCBJbmplY3QsIEluamVjdGFibGUgfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHsgbWtlbnVtIH0gZnJvbSBcIi4uLy4uL2NvcmUvdXRpbHNcIjtcbmltcG9ydCB7IEJlaGF2aW9yU3ViamVjdCB9IGZyb20gXCJyeGpzXCI7XG5pbXBvcnQgeyBET0NVTUVOVCB9IGZyb20gXCJAYW5ndWxhci9jb21tb25cIjtcblxuY29uc3QgVGhlbWUgPSAvKkBfX1BVUkVfXyovIG1rZW51bSh7XG4gICAgTWF0ZXJpYWw6IFwibWF0ZXJpYWxcIixcbiAgICBGbHVlbnQ6IFwiZmx1ZW50XCIsXG4gICAgQm9vdHN0cmFwOiBcImJvb3RzdHJhcFwiLFxuICAgIEluZGlnb0Rlc2lnbjogXCJpbmRpZ29cIixcbn0pO1xuXG4vKipcbiAqIERldGVybWluZXMgdGhlIGNvbXBvbmVudCB0aGVtZS5cbiAqL1xuZXhwb3J0IHR5cGUgSWd4VGhlbWUgPSAodHlwZW9mIFRoZW1lKVtrZXlvZiB0eXBlb2YgVGhlbWVdO1xuXG5ASW5qZWN0YWJsZSh7XG4gICAgcHJvdmlkZWRJbjogXCJyb290XCIsXG59KVxuZXhwb3J0IGNsYXNzIFRoZW1lU2VydmljZSB7XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdGhlbWUgb2YgdGhlIGNvbXBvbmVudC5cbiAgICAgKiBBbGxvd2VkIHZhbHVlcyBvZiB0eXBlIElneFRoZW1lLlxuICAgICAqL1xuICAgIHB1YmxpYyBnbG9iYWxUaGVtZTogSWd4VGhlbWU7XG4gICAgcHJpdmF0ZSB0aGVtZSQgPSBuZXcgQmVoYXZpb3JTdWJqZWN0PElneFRoZW1lPihcIm1hdGVyaWFsXCIpO1xuXG4gICAgY29uc3RydWN0b3IoXG4gICAgICAgIEBJbmplY3QoRE9DVU1FTlQpXG4gICAgICAgIHByaXZhdGUgZG9jdW1lbnQ6IGFueSxcbiAgICApIHtcbiAgICAgICAgdGhpcy50aGVtZSQuYXNPYnNlcnZhYmxlKCkuc3Vic2NyaWJlKCh2YWx1ZSkgPT4ge1xuICAgICAgICAgICAgdGhpcy5nbG9iYWxUaGVtZSA9IHZhbHVlIGFzIElneFRoZW1lO1xuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmluaXQoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGluaXQoKSB7XG4gICAgICAgIGNvbnN0IHRoZW1lID0gZ2xvYmFsVGhpcy53aW5kb3dcbiAgICAgICAgICAgID8uZ2V0Q29tcHV0ZWRTdHlsZSh0aGlzLmRvY3VtZW50LmJvZHkpXG4gICAgICAgICAgICAuZ2V0UHJvcGVydHlWYWx1ZShcIi0taWctdGhlbWVcIilcbiAgICAgICAgICAgIC50cmltKCk7XG5cbiAgICAgICAgaWYgKHRoZW1lICE9PSBcIlwiKSB7XG4gICAgICAgICAgICB0aGlzLnRoZW1lJC5uZXh0KHRoZW1lIGFzIElneFRoZW1lKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBnZXRDb21wb25lbnRUaGVtZShlbDogRWxlbWVudFJlZikge1xuICAgICAgICByZXR1cm4gZ2xvYmFsVGhpcy53aW5kb3dcbiAgICAgICAgPy5nZXRDb21wdXRlZFN0eWxlKGVsLm5hdGl2ZUVsZW1lbnQpXG4gICAgICAgIC5nZXRQcm9wZXJ0eVZhbHVlKCctLXRoZW1lJylcbiAgICAgICAgLnRyaW0oKSBhcyBJZ3hUaGVtZTtcbiAgICB9XG59XG4iXX0=