import { ExportUtilities } from '../exporter-common/export-utilities';
/** @hidden */
export class WorksheetDataDictionary {
    static { this.DEFAULT_FONT = '11pt Calibri'; }
    static { this.TEXT_PADDING = 5; }
    constructor(columnCount, columnWidth, columnWidthsList) {
        this.hasNumberValues = false;
        this.hasDateValues = false;
        this._dictionary = {};
        this._widthsDictionary = {};
        this._counter = 0;
        this.dirtyKeyCollections();
        this._columnWidths = new Array(columnCount);
        if (columnWidth) {
            this._columnWidths.fill(columnWidth);
        }
        else {
            this._columnWidths = columnWidthsList;
        }
        this.stringsCount = 0;
    }
    get columnWidths() {
        return this._columnWidths;
    }
    saveValue(value, isHeader, shouldSanitizeValue = true) {
        let sanitizedValue = '';
        const isDate = value instanceof Date;
        const isSavedAsString = isHeader || (typeof value !== 'number' && value !== Number(value) && !Number.isFinite(value) && !isDate);
        if (isSavedAsString) {
            sanitizedValue = shouldSanitizeValue ? ExportUtilities.sanitizeValue(value) : value;
            if (this._dictionary[sanitizedValue] === undefined) {
                this._dictionary[sanitizedValue] = this._counter++;
                this.dirtyKeyCollections();
            }
            this.stringsCount++;
        }
        else if (isDate) {
            this.hasDateValues = true;
        }
        else {
            this.hasNumberValues = true;
        }
        return isSavedAsString ? this.getSanitizedValue(sanitizedValue) : -1;
    }
    getValue(value) {
        return this.getSanitizedValue(ExportUtilities.sanitizeValue(value));
    }
    getSanitizedValue(sanitizedValue) {
        return this._dictionary[sanitizedValue];
    }
    getKeys() {
        if (!this._keysAreValid) {
            this._keys = Object.keys(this._dictionary);
            this._keysAreValid = true;
        }
        return this._keys;
    }
    getTextWidth(value) {
        if (this._widthsDictionary[value] === undefined) {
            const context = this.getContext();
            const metrics = context.measureText(value);
            this._widthsDictionary[value] = metrics.width + WorksheetDataDictionary.TEXT_PADDING;
        }
        return this._widthsDictionary[value];
    }
    getContext() {
        if (!this._context) {
            const canvas = document.createElement('canvas');
            this._context = canvas.getContext('2d');
            this._context.font = WorksheetDataDictionary.DEFAULT_FONT;
        }
        return this._context;
    }
    dirtyKeyCollections() {
        this._keysAreValid = false;
    }
}
//# sourceMappingURL=data:application/json;base64,