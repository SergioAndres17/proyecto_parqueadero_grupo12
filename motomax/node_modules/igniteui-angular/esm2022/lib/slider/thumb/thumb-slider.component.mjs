import { Component, Input, HostListener, HostBinding, Output, EventEmitter, booleanAttribute } from '@angular/core';
import { takeUntil } from 'rxjs/operators';
import { SliderHandle } from '../slider.common';
import { Subject } from 'rxjs';
import { NgClass } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "../../services/direction/directionality";
/**
 * @hidden
 */
export class IgxSliderThumbComponent {
    get ariaValueNow() {
        return this.value;
    }
    get ariaValueMin() {
        return this.min;
    }
    get ariaValueMax() {
        return this.max;
    }
    get ariaValueText() {
        if (this.labels && this.labels[this.value] !== undefined) {
            return this.labels[this.value];
        }
        return this.value;
    }
    get ariaLabelAttr() {
        return `Slider thumb ${this.type}`;
    }
    get ariaDisabled() {
        return this.disabled;
    }
    get thumbFromClass() {
        return this.type === SliderHandle.FROM;
    }
    get thumbToClass() {
        return this.type === SliderHandle.TO;
    }
    get thumbFromActiveClass() {
        return this.type === SliderHandle.FROM && this._isActive;
    }
    get thumbToActiveClass() {
        return this.type === SliderHandle.TO && this._isActive;
    }
    get thumbFromDisabledClass() {
        return this.type === SliderHandle.FROM && this.disabled;
    }
    get thumbToDisabledClass() {
        return this.type === SliderHandle.TO && this.disabled;
    }
    get thumbFromPressedClass() {
        return this.type === SliderHandle.FROM && this.isActive && this._isPressed;
    }
    get thumbToPressedClass() {
        return this.type === SliderHandle.TO && this.isActive && this._isPressed;
    }
    get getDotClass() {
        return {
            'igx-slider-thumb-from__dot': this.type === SliderHandle.FROM,
            'igx-slider-thumb-to__dot': this.type === SliderHandle.TO
        };
    }
    get nativeElement() {
        return this._elementRef.nativeElement;
    }
    get destroy() {
        return this._destroy$;
    }
    get thumbPositionX() {
        const thumbBounderies = this.nativeElement.getBoundingClientRect();
        const thumbCenter = (thumbBounderies.right - thumbBounderies.left) / 2;
        return thumbBounderies.left + thumbCenter;
    }
    constructor(_elementRef, _dir) {
        this._elementRef = _elementRef;
        this._dir = _dir;
        this.thumbValueChange = new EventEmitter();
        this.thumbChange = new EventEmitter();
        this.thumbBlur = new EventEmitter();
        this.hoverChange = new EventEmitter();
        this.tabindex = 0;
        this.role = 'slider';
        this.ariaOrientation = 'horizontal';
        this.zIndex = 0;
        this.focused = false;
        this.isActive = false;
        this._isActive = false;
        this._isPressed = false;
        this._destroy$ = new Subject();
    }
    onPointerEnter() {
        this.focused = false;
        this.hoverChange.emit(true);
    }
    onPointerLeave() {
        this.hoverChange.emit(false);
    }
    onKeyUp(event) {
        event.stopPropagation();
        this.focused = true;
    }
    onKeyDown(event) {
        if (this.disabled) {
            return;
        }
        let increment = 0;
        const stepWithDir = (rtl) => rtl ? this.step * -1 : this.step;
        if (event.key.endsWith('Left')) {
            increment = stepWithDir(!this._dir.rtl);
        }
        else if (event.key.endsWith('Right')) {
            increment = stepWithDir(this._dir.rtl);
        }
        else {
            return;
        }
        this.thumbChange.emit();
        this.thumbValueChange.emit(increment);
    }
    onBlur() {
        this.isActive = false;
        this.zIndex = 0;
        this.focused = false;
        this.thumbBlur.emit();
    }
    onFocusListener() {
        this.isActive = true;
        this.zIndex = 1;
    }
    /**
     * @hidden
     */
    ngOnInit() {
        this.onPan
            .pipe(takeUntil(this._destroy$))
            .subscribe(mouseX => this.updateThumbValue(mouseX));
    }
    /**
     * @hidden
     */
    ngOnDestroy() {
        this._destroy$.next(true);
        this._destroy$.complete();
    }
    /**
     * Show thumb label and ripple.
     */
    showThumbIndicators() {
        this.toggleThumbIndicators(true);
    }
    /**
     * Hide thumb label and ripple.
     */
    hideThumbIndicators() {
        this.toggleThumbIndicators(false);
    }
    updateThumbValue(mouseX) {
        const updateValue = this.calculateTrackUpdate(mouseX);
        if (this.isActive && updateValue !== 0) {
            this.thumbValueChange.emit(updateValue);
        }
    }
    calculateTrackUpdate(mouseX) {
        const scaleX = this._dir.rtl ? this.thumbPositionX - mouseX : mouseX - this.thumbPositionX;
        const stepDistanceCenter = this.stepDistance / 2;
        // If the thumb scale range (slider update) is less thàn a half step,
        // the position stays the same.
        const scaleXPositive = Math.abs(scaleX);
        if (scaleXPositive < stepDistanceCenter) {
            return 0;
        }
        return this.stepToProceed(scaleX, this.stepDistance);
    }
    stepToProceed(scaleX, stepDist) {
        return Math.round(scaleX / stepDist) * this.step;
    }
    toggleThumbIndicators(visible) {
        this._isPressed = visible;
        if (this.continuous || this.deactiveState) {
            this._isActive = false;
        }
        else {
            this._isActive = visible;
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxSliderThumbComponent, deps: [{ token: i0.ElementRef }, { token: i1.IgxDirectionality }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "18.2.4", type: IgxSliderThumbComponent, isStandalone: true, selector: "igx-thumb", inputs: { value: "value", continuous: ["continuous", "continuous", booleanAttribute], thumbLabelVisibilityDuration: "thumbLabelVisibilityDuration", disabled: ["disabled", "disabled", booleanAttribute], onPan: "onPan", stepDistance: "stepDistance", step: "step", templateRef: "templateRef", context: "context", type: "type", deactiveState: ["deactiveState", "deactiveState", booleanAttribute], min: "min", max: "max", labels: "labels" }, outputs: { thumbValueChange: "thumbValueChange", thumbChange: "thumbChange", thumbBlur: "thumbBlur", hoverChange: "hoverChange" }, host: { listeners: { "pointerenter": "onPointerEnter()", "pointerleave": "onPointerLeave()", "keyup": "onKeyUp($event)", "keydown": "onKeyDown($event)", "blur": "onBlur()", "focus": "onFocusListener()" }, properties: { "attr.tabindex": "this.tabindex", "attr.role": "this.role", "attr.aria-valuenow": "this.ariaValueNow", "attr.aria-valuemin": "this.ariaValueMin", "attr.aria-valuemax": "this.ariaValueMax", "attr.aria-valuetext": "this.ariaValueText", "attr.aria-label": "this.ariaLabelAttr", "attr.aria-orientation": "this.ariaOrientation", "attr.aria-disabled": "this.ariaDisabled", "attr.z-index": "this.zIndex", "class.igx-slider-thumb-to--focused": "this.focused", "class.igx-slider-thumb-from": "this.thumbFromClass", "class.igx-slider-thumb-to": "this.thumbToClass", "class.igx-slider-thumb-from--active": "this.thumbFromActiveClass", "class.igx-slider-thumb-to--active": "this.thumbToActiveClass", "class.igx-slider-thumb-from--disabled": "this.thumbFromDisabledClass", "class.igx-slider-thumb-to--disabled": "this.thumbToDisabledClass", "class.igx-slider-thumb-from--pressed": "this.thumbFromPressedClass", "class.igx-slider-thumb-to--pressed": "this.thumbToPressedClass" } }, ngImport: i0, template: "<div [ngClass]=\"getDotClass\"></div>\n", dependencies: [{ kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxSliderThumbComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igx-thumb', standalone: true, imports: [NgClass], template: "<div [ngClass]=\"getDotClass\"></div>\n" }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.IgxDirectionality }], propDecorators: { value: [{
                type: Input
            }], continuous: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], thumbLabelVisibilityDuration: [{
                type: Input
            }], disabled: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], onPan: [{
                type: Input
            }], stepDistance: [{
                type: Input
            }], step: [{
                type: Input
            }], templateRef: [{
                type: Input
            }], context: [{
                type: Input
            }], type: [{
                type: Input
            }], deactiveState: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], min: [{
                type: Input
            }], max: [{
                type: Input
            }], labels: [{
                type: Input
            }], thumbValueChange: [{
                type: Output
            }], thumbChange: [{
                type: Output
            }], thumbBlur: [{
                type: Output
            }], hoverChange: [{
                type: Output
            }], tabindex: [{
                type: HostBinding,
                args: ['attr.tabindex']
            }], role: [{
                type: HostBinding,
                args: ['attr.role']
            }], ariaValueNow: [{
                type: HostBinding,
                args: ['attr.aria-valuenow']
            }], ariaValueMin: [{
                type: HostBinding,
                args: ['attr.aria-valuemin']
            }], ariaValueMax: [{
                type: HostBinding,
                args: ['attr.aria-valuemax']
            }], ariaValueText: [{
                type: HostBinding,
                args: ['attr.aria-valuetext']
            }], ariaLabelAttr: [{
                type: HostBinding,
                args: ['attr.aria-label']
            }], ariaOrientation: [{
                type: HostBinding,
                args: ['attr.aria-orientation']
            }], ariaDisabled: [{
                type: HostBinding,
                args: [`attr.aria-disabled`]
            }], zIndex: [{
                type: HostBinding,
                args: ['attr.z-index']
            }], focused: [{
                type: HostBinding,
                args: ['class.igx-slider-thumb-to--focused']
            }], thumbFromClass: [{
                type: HostBinding,
                args: ['class.igx-slider-thumb-from']
            }], thumbToClass: [{
                type: HostBinding,
                args: ['class.igx-slider-thumb-to']
            }], thumbFromActiveClass: [{
                type: HostBinding,
                args: ['class.igx-slider-thumb-from--active']
            }], thumbToActiveClass: [{
                type: HostBinding,
                args: ['class.igx-slider-thumb-to--active']
            }], thumbFromDisabledClass: [{
                type: HostBinding,
                args: ['class.igx-slider-thumb-from--disabled']
            }], thumbToDisabledClass: [{
                type: HostBinding,
                args: ['class.igx-slider-thumb-to--disabled']
            }], thumbFromPressedClass: [{
                type: HostBinding,
                args: ['class.igx-slider-thumb-from--pressed']
            }], thumbToPressedClass: [{
                type: HostBinding,
                args: ['class.igx-slider-thumb-to--pressed']
            }], onPointerEnter: [{
                type: HostListener,
                args: ['pointerenter']
            }], onPointerLeave: [{
                type: HostListener,
                args: ['pointerleave']
            }], onKeyUp: [{
                type: HostListener,
                args: ['keyup', ['$event']]
            }], onKeyDown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }], onBlur: [{
                type: HostListener,
                args: ['blur']
            }], onFocusListener: [{
                type: HostListener,
                args: ['focus']
            }] } });
//# sourceMappingURL=data:application/json;base64,