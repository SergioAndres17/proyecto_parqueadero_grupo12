import { ExpressionsTreeUtil } from './expressions-tree-util';
/* mustCoerceToInt */
export var FilteringExpressionsTreeType;
(function (FilteringExpressionsTreeType) {
    FilteringExpressionsTreeType[FilteringExpressionsTreeType["Regular"] = 0] = "Regular";
    FilteringExpressionsTreeType[FilteringExpressionsTreeType["Advanced"] = 1] = "Advanced";
})(FilteringExpressionsTreeType || (FilteringExpressionsTreeType = {}));
/* marshalByValue */
/* jsonAPIPlainObject */
export class FilteringExpressionsTree {
    constructor(operator, fieldName) {
        /**
         * Sets/gets the filtering operands.
         * ```typescript
         * const gridExpressionsTree = new FilteringExpressionsTree(FilteringLogic.And);
         * const expression = [
         * {
         *   condition: IgxStringFilteringOperand.instance().condition('contains'),
         *   fieldName: 'Column Field',
         *   searchVal: 'Value',
         *   ignoreCase: false
         * }];
         * gridExpressionsTree.filteringOperands.push(expression);
         * this.grid.filteringExpressionsTree = gridExpressionsTree;
         * ```
         * ```typescript
         * let filteringOperands = gridExpressionsTree.filteringOperands;
         * ```
         *
         * @memberof FilteringExpressionsTree
         */
        this.filteringOperands = [];
        this.operator = operator;
        this.fieldName = fieldName;
    }
    /**
     * Checks if filtering expressions tree is empty.
     *
     * @param expressionTree filtering expressions tree.
     */
    static empty(expressionTree) {
        return !expressionTree || !expressionTree.filteringOperands || !expressionTree.filteringOperands.length;
    }
    /**
     * Returns the filtering expression for a column with the provided fieldName.
     * ```typescript
     * let filteringExpression = gridExpressionTree.find('Column Field');
     * ```
     *
     * @memberof FilteringExpressionsTree
     * @deprecated in version 18.2.0. Use `ExpressionsTreeUtil.find` instead.
     */
    find(fieldName) {
        return ExpressionsTreeUtil.find(this, fieldName);
    }
    /**
     * Returns the index of the filtering expression for a column with the provided fieldName.
     * ```typescript
     * let filteringExpressionIndex = gridExpressionTree.findIndex('Column Field');
     * ```
     *
     * @memberof FilteringExpressionsTree
     * @deprecated in version 18.2.0. Use `ExpressionsTreeUtil.findIndex` instead.
     */
    findIndex(fieldName) {
        return ExpressionsTreeUtil.findIndex(this, fieldName);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmlsdGVyaW5nLWV4cHJlc3Npb25zLXRyZWUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy9saWIvZGF0YS1vcGVyYXRpb25zL2ZpbHRlcmluZy1leHByZXNzaW9ucy10cmVlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUVBLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHlCQUF5QixDQUFDO0FBRTlELHFCQUFxQjtBQUNyQixNQUFNLENBQU4sSUFBWSw0QkFHWDtBQUhELFdBQVksNEJBQTRCO0lBQ3BDLHFGQUFPLENBQUE7SUFDUCx1RkFBUSxDQUFBO0FBQ1osQ0FBQyxFQUhXLDRCQUE0QixLQUE1Qiw0QkFBNEIsUUFHdkM7QUF5QkQsb0JBQW9CO0FBQ3BCLHdCQUF3QjtBQUN4QixNQUFNLE9BQU8sd0JBQXdCO0lBZ0VqQyxZQUFZLFFBQXdCLEVBQUUsU0FBa0I7UUE5RHhEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O1dBbUJHO1FBQ0ksc0JBQWlCLEdBQXlELEVBQUUsQ0FBQztRQTJDaEYsSUFBSSxDQUFDLFFBQVEsR0FBRyxRQUFRLENBQUM7UUFDekIsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDL0IsQ0FBQztJQUdEOzs7O09BSUc7SUFDSSxNQUFNLENBQUMsS0FBSyxDQUFDLGNBQXlDO1FBQ3pELE9BQU8sQ0FBQyxjQUFjLElBQUksQ0FBQyxjQUFjLENBQUMsaUJBQWlCLElBQUksQ0FBQyxjQUFjLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDO0lBQzVHLENBQUM7SUFFRDs7Ozs7Ozs7T0FRRztJQUNJLElBQUksQ0FBQyxTQUFpQjtRQUN6QixPQUFPLG1CQUFtQixDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsU0FBUyxDQUFDLENBQUM7SUFDckQsQ0FBQztJQUVEOzs7Ozs7OztPQVFHO0lBQ0ksU0FBUyxDQUFDLFNBQWlCO1FBQzlCLE9BQU8sbUJBQW1CLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxTQUFTLENBQUMsQ0FBQztJQUMxRCxDQUFDO0NBQ0oiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBGaWx0ZXJpbmdMb2dpYywgSUZpbHRlcmluZ0V4cHJlc3Npb24gfSBmcm9tICcuL2ZpbHRlcmluZy1leHByZXNzaW9uLmludGVyZmFjZSc7XG5pbXBvcnQgeyBJQmFzZUV2ZW50QXJncyB9IGZyb20gJy4uL2NvcmUvdXRpbHMnO1xuaW1wb3J0IHsgRXhwcmVzc2lvbnNUcmVlVXRpbCB9IGZyb20gJy4vZXhwcmVzc2lvbnMtdHJlZS11dGlsJztcblxuLyogbXVzdENvZXJjZVRvSW50ICovXG5leHBvcnQgZW51bSBGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWVUeXBlIHtcbiAgICBSZWd1bGFyLFxuICAgIEFkdmFuY2VkXG59XG5cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBJRXhwcmVzc2lvblRyZWUge1xuICAgIGZpbHRlcmluZ09wZXJhbmRzOiAoSUV4cHJlc3Npb25UcmVlIHwgSUZpbHRlcmluZ0V4cHJlc3Npb24pW107XG4gICAgb3BlcmF0b3I6IEZpbHRlcmluZ0xvZ2ljO1xuICAgIGZpZWxkTmFtZT86IHN0cmluZztcbn1cblxuLyogbWFyc2hhbEJ5VmFsdWUgKi9cbmV4cG9ydCBkZWNsYXJlIGludGVyZmFjZSBJRmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlIGV4dGVuZHMgSUJhc2VFdmVudEFyZ3MsIElFeHByZXNzaW9uVHJlZSB7XG4gICAgZmlsdGVyaW5nT3BlcmFuZHM6IChJRmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlIHwgSUZpbHRlcmluZ0V4cHJlc3Npb24pW107XG4gICAgLyogYWx0ZXJuYXRlTmFtZTogdHJlZVR5cGUgKi9cbiAgICB0eXBlPzogRmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlVHlwZTtcblxuICAgIC8qKlxuICAgICAqIEBkZXByZWNhdGVkIGluIHZlcnNpb24gMTguMi4wLiBVc2UgYEV4cHJlc3Npb25zVHJlZVV0aWwuZmluZGAgaW5zdGVhZC5cbiAgICAgKi9cbiAgICBmaW5kKGZpZWxkTmFtZTogc3RyaW5nKTogSUZpbHRlcmluZ0V4cHJlc3Npb25zVHJlZSB8IElGaWx0ZXJpbmdFeHByZXNzaW9uO1xuXG4gICAgLyoqXG4gICAgICogQGRlcHJlY2F0ZWQgaW4gdmVyc2lvbiAxOC4yLjAuIFVzZSBgRXhwcmVzc2lvbnNUcmVlVXRpbC5maW5kSW5kZXhgIGluc3RlYWQuXG4gICAgICovXG4gICAgZmluZEluZGV4KGZpZWxkTmFtZTogc3RyaW5nKTogbnVtYmVyO1xufVxuXG4vKiBtYXJzaGFsQnlWYWx1ZSAqL1xuLyoganNvbkFQSVBsYWluT2JqZWN0ICovXG5leHBvcnQgY2xhc3MgRmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlIGltcGxlbWVudHMgSUZpbHRlcmluZ0V4cHJlc3Npb25zVHJlZSB7XG5cbiAgICAvKipcbiAgICAgKiBTZXRzL2dldHMgdGhlIGZpbHRlcmluZyBvcGVyYW5kcy5cbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogY29uc3QgZ3JpZEV4cHJlc3Npb25zVHJlZSA9IG5ldyBGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWUoRmlsdGVyaW5nTG9naWMuQW5kKTtcbiAgICAgKiBjb25zdCBleHByZXNzaW9uID0gW1xuICAgICAqIHtcbiAgICAgKiAgIGNvbmRpdGlvbjogSWd4U3RyaW5nRmlsdGVyaW5nT3BlcmFuZC5pbnN0YW5jZSgpLmNvbmRpdGlvbignY29udGFpbnMnKSxcbiAgICAgKiAgIGZpZWxkTmFtZTogJ0NvbHVtbiBGaWVsZCcsXG4gICAgICogICBzZWFyY2hWYWw6ICdWYWx1ZScsXG4gICAgICogICBpZ25vcmVDYXNlOiBmYWxzZVxuICAgICAqIH1dO1xuICAgICAqIGdyaWRFeHByZXNzaW9uc1RyZWUuZmlsdGVyaW5nT3BlcmFuZHMucHVzaChleHByZXNzaW9uKTtcbiAgICAgKiB0aGlzLmdyaWQuZmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlID0gZ3JpZEV4cHJlc3Npb25zVHJlZTtcbiAgICAgKiBgYGBcbiAgICAgKiBgYGB0eXBlc2NyaXB0XG4gICAgICogbGV0IGZpbHRlcmluZ09wZXJhbmRzID0gZ3JpZEV4cHJlc3Npb25zVHJlZS5maWx0ZXJpbmdPcGVyYW5kcztcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWVcbiAgICAgKi9cbiAgICBwdWJsaWMgZmlsdGVyaW5nT3BlcmFuZHM6IChJRmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlIHwgSUZpbHRlcmluZ0V4cHJlc3Npb24pW10gPSBbXTtcblxuICAgIC8qKlxuICAgICAqIFNldHMvZ2V0cyB0aGUgb3BlcmF0b3IuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGdyaWRFeHByZXNzaW9uc1RyZWUub3BlcmF0b3IgPSBGaWx0ZXJpbmdMb2dpYy5BbmQ7XG4gICAgICogYGBgXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBvcGVyYXRvciA9IGdyaWRFeHByZXNzaW9uc1RyZWUub3BlcmF0b3I7XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBAbWVtYmVyb2YgRmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlXG4gICAgICovXG4gICAgcHVibGljIG9wZXJhdG9yOiBGaWx0ZXJpbmdMb2dpYztcblxuICAgIC8qKlxuICAgICAqIFNldHMvZ2V0cyB0aGUgZmllbGQgbmFtZSBvZiB0aGUgY29sdW1uIHdoZXJlIHRoZSBmaWx0ZXJpbmcgZXhwcmVzc2lvbiBpcyBwbGFjZWQuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqICBncmlkRXhwcmVzc2lvblRyZWUuZmllbGROYW1lID0gJ0NvbHVtbiBGaWVsZCc7XG4gICAgICogYGBgXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBjb2x1bW5GaWVsZCA9IGV4cHJlc3Npb25UcmVlLmZpZWxkTmFtZTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWVcbiAgICAgKi9cbiAgICBwdWJsaWMgZmllbGROYW1lPzogc3RyaW5nO1xuXG4gICAgLyogYWx0ZXJuYXRlTmFtZTogdHJlZVR5cGUgKi9cbiAgICAvKipcbiAgICAgKiBTZXRzL2dldHMgdGhlIHR5cGUgb2YgdGhlIGZpbHRlcmluZyBleHByZXNzaW9ucyB0cmVlLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiAgZ3JpZEV4cHJlc3Npb25UcmVlLnR5cGUgPSBGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWUuQWR2YW5jZWQ7XG4gICAgICogYGBgXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCB0eXBlID0gZXhwcmVzc2lvblRyZWUudHlwZTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWVcbiAgICAgKi9cbiAgICBwdWJsaWMgdHlwZT86IEZpbHRlcmluZ0V4cHJlc3Npb25zVHJlZVR5cGU7XG5cbiAgICBjb25zdHJ1Y3RvcihvcGVyYXRvcjogRmlsdGVyaW5nTG9naWMsIGZpZWxkTmFtZT86IHN0cmluZykge1xuICAgICAgICB0aGlzLm9wZXJhdG9yID0gb3BlcmF0b3I7XG4gICAgICAgIHRoaXMuZmllbGROYW1lID0gZmllbGROYW1lO1xuICAgIH1cblxuXG4gICAgLyoqXG4gICAgICogQ2hlY2tzIGlmIGZpbHRlcmluZyBleHByZXNzaW9ucyB0cmVlIGlzIGVtcHR5LlxuICAgICAqXG4gICAgICogQHBhcmFtIGV4cHJlc3Npb25UcmVlIGZpbHRlcmluZyBleHByZXNzaW9ucyB0cmVlLlxuICAgICAqL1xuICAgIHB1YmxpYyBzdGF0aWMgZW1wdHkoZXhwcmVzc2lvblRyZWU6IElGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWUpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICFleHByZXNzaW9uVHJlZSB8fCAhZXhwcmVzc2lvblRyZWUuZmlsdGVyaW5nT3BlcmFuZHMgfHwgIWV4cHJlc3Npb25UcmVlLmZpbHRlcmluZ09wZXJhbmRzLmxlbmd0aDtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBmaWx0ZXJpbmcgZXhwcmVzc2lvbiBmb3IgYSBjb2x1bW4gd2l0aCB0aGUgcHJvdmlkZWQgZmllbGROYW1lLlxuICAgICAqIGBgYHR5cGVzY3JpcHRcbiAgICAgKiBsZXQgZmlsdGVyaW5nRXhwcmVzc2lvbiA9IGdyaWRFeHByZXNzaW9uVHJlZS5maW5kKCdDb2x1bW4gRmllbGQnKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWVcbiAgICAgKiBAZGVwcmVjYXRlZCBpbiB2ZXJzaW9uIDE4LjIuMC4gVXNlIGBFeHByZXNzaW9uc1RyZWVVdGlsLmZpbmRgIGluc3RlYWQuXG4gICAgICovXG4gICAgcHVibGljIGZpbmQoZmllbGROYW1lOiBzdHJpbmcpOiBJRmlsdGVyaW5nRXhwcmVzc2lvbnNUcmVlIHwgSUZpbHRlcmluZ0V4cHJlc3Npb24ge1xuICAgICAgICByZXR1cm4gRXhwcmVzc2lvbnNUcmVlVXRpbC5maW5kKHRoaXMsIGZpZWxkTmFtZSk7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGZpbHRlcmluZyBleHByZXNzaW9uIGZvciBhIGNvbHVtbiB3aXRoIHRoZSBwcm92aWRlZCBmaWVsZE5hbWUuXG4gICAgICogYGBgdHlwZXNjcmlwdFxuICAgICAqIGxldCBmaWx0ZXJpbmdFeHByZXNzaW9uSW5kZXggPSBncmlkRXhwcmVzc2lvblRyZWUuZmluZEluZGV4KCdDb2x1bW4gRmllbGQnKTtcbiAgICAgKiBgYGBcbiAgICAgKlxuICAgICAqIEBtZW1iZXJvZiBGaWx0ZXJpbmdFeHByZXNzaW9uc1RyZWVcbiAgICAgKiBAZGVwcmVjYXRlZCBpbiB2ZXJzaW9uIDE4LjIuMC4gVXNlIGBFeHByZXNzaW9uc1RyZWVVdGlsLmZpbmRJbmRleGAgaW5zdGVhZC5cbiAgICAgKi9cbiAgICBwdWJsaWMgZmluZEluZGV4KGZpZWxkTmFtZTogc3RyaW5nKTogbnVtYmVyIHtcbiAgICAgICAgcmV0dXJuIEV4cHJlc3Npb25zVHJlZVV0aWwuZmluZEluZGV4KHRoaXMsIGZpZWxkTmFtZSk7XG4gICAgfVxufVxuIl19