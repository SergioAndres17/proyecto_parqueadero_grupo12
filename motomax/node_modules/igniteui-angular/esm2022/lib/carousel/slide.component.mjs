import { Component, Input, HostBinding, Output, EventEmitter, booleanAttribute, Inject } from '@angular/core';
import { Subject } from 'rxjs';
import { IgxCarouselComponent } from './carousel.component';
import * as i0 from "@angular/core";
import * as i1 from "./carousel.component";
/**
 * A slide component that usually holds an image and/or a caption text.
 * IgxSlideComponent is usually a child component of an IgxCarouselComponent.
 *
 * ```
 * <igx-slide [input bindings] >
 *    <ng-content></ng-content>
 * </igx-slide>
 * ```
 *
 * @export
 */
export class IgxSlideComponent {
    /**
     * Returns the `tabIndex` of the slide component.
     * ```typescript
     * let tabIndex =  this.carousel.tabIndex;
     * ```
     *
     * @memberof IgxSlideComponent
     */
    get tabIndex() {
        return this.active && this.carousel.keyboardSupport ? 0 : null;
    }
    /**
     * Gets/sets the `active` state of the slide.
     * ```html
     * <igx-carousel>
     *  <igx-slide [active] ="false"></igx-slide>
     * <igx-carousel>
     * ```
     *
     * Two-way data binding.
     * ```html
     * <igx-carousel>
     *  <igx-slide [(active)] ="model.isActive"></igx-slide>
     * <igx-carousel>
     * ```
     *
     * @memberof IgxSlideComponent
     */
    get active() {
        return this._active;
    }
    set active(value) {
        this._active = value;
        this.activeChange.emit(this._active);
    }
    constructor(elementRef, carousel) {
        this.elementRef = elementRef;
        this.carousel = carousel;
        /**
         * Returns the `role` of the slide component.
         * By default is set to `tabpanel`
         *
         * @memberof IgxSlideComponent
         */
        this.tab = 'tabpanel';
        /**
         * Returns the class of the slide component.
         * ```typescript
         * let class =  this.slide.cssClass;
         * ```
         *
         * @memberof IgxSlideComponent
         */
        this.cssClass = 'igx-slide';
        this.previous = false;
        /**
         * @hidden
         */
        this.activeChange = new EventEmitter();
        this._active = false;
        this._destroy$ = new Subject();
    }
    /**
     * Returns a reference to the carousel element in the DOM.
     * ```typescript
     * let nativeElement =  this.slide.nativeElement;
     * ```
     *
     * @memberof IgxSlideComponent
     */
    get nativeElement() {
        return this.elementRef.nativeElement;
    }
    /**
     * @hidden
     */
    get isDestroyed() {
        return this._destroy$;
    }
    ngAfterContentChecked() {
        this.id = `panel-${this.index}`;
        this.ariaLabelledBy = `tab-${this.index}-${this.total}`;
    }
    /**
     * @hidden
     */
    ngOnDestroy() {
        this._destroy$.next(true);
        this._destroy$.complete();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxSlideComponent, deps: [{ token: i0.ElementRef }, { token: IgxCarouselComponent }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "18.2.4", type: IgxSlideComponent, isStandalone: true, selector: "igx-slide", inputs: { index: "index", direction: "direction", total: "total", active: ["active", "active", booleanAttribute], previous: ["previous", "previous", booleanAttribute] }, outputs: { activeChange: "activeChange" }, host: { properties: { "attr.tabindex": "this.tabIndex", "attr.id": "this.id", "attr.role": "this.tab", "attr.aria-labelledby": "this.ariaLabelledBy", "class.igx-slide": "this.cssClass", "class.igx-slide--current": "this.active", "class.igx-slide--previous": "this.previous" } }, ngImport: i0, template: "<ng-content></ng-content>\n" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxSlideComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igx-slide', standalone: true, template: "<ng-content></ng-content>\n" }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.IgxCarouselComponent, decorators: [{
                    type: Inject,
                    args: [IgxCarouselComponent]
                }] }], propDecorators: { index: [{
                type: Input
            }], direction: [{
                type: Input
            }], total: [{
                type: Input
            }], tabIndex: [{
                type: HostBinding,
                args: ['attr.tabindex']
            }], id: [{
                type: HostBinding,
                args: ['attr.id']
            }], tab: [{
                type: HostBinding,
                args: ['attr.role']
            }], ariaLabelledBy: [{
                type: HostBinding,
                args: ['attr.aria-labelledby']
            }], cssClass: [{
                type: HostBinding,
                args: ['class.igx-slide']
            }], active: [{
                type: HostBinding,
                args: ['class.igx-slide--current']
            }, {
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], previous: [{
                type: HostBinding,
                args: ['class.igx-slide--previous']
            }, {
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], activeChange: [{
                type: Output
            }] } });
//# sourceMappingURL=data:application/json;base64,