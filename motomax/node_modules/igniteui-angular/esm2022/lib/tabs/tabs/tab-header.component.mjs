import { Component, HostBinding, HostListener } from '@angular/core';
import { IgxTabHeaderDirective } from '../tab-header.directive';
import { IgxTabHeaderBase } from '../tabs.base';
import { getResizeObserver } from '../../core/utils';
import * as i0 from "@angular/core";
import * as i1 from "./tabs.component";
import * as i2 from "../tab-item.directive";
import * as i3 from "../../core/utils";
import * as i4 from "../../services/direction/directionality";
export class IgxTabHeaderComponent extends IgxTabHeaderDirective {
    /** @hidden @internal */
    get provideCssClassSelected() {
        return this.tab.selected;
    }
    /** @hidden @internal */
    get provideCssClassDisabled() {
        return this.tab.disabled;
    }
    /** @hidden @internal */
    constructor(tabs, tab, elementRef, platform, ngZone, dir) {
        super(tabs, tab, elementRef, platform);
        this.tabs = tabs;
        this.ngZone = ngZone;
        this.dir = dir;
        /** @hidden @internal */
        this.cssClass = true;
    }
    /** @hidden @internal */
    keyDown(event) {
        let unsupportedKey = false;
        const itemsArray = this.tabs.items.toArray();
        const previousIndex = itemsArray.indexOf(this.tab);
        let newIndex = previousIndex;
        const hasDisabledItems = itemsArray.some((item) => item.disabled);
        switch (event.key) {
            case this.platform.KEYMAP.ARROW_RIGHT:
                newIndex = this.getNewSelectionIndex(newIndex, itemsArray, event.key, hasDisabledItems);
                break;
            case this.platform.KEYMAP.ARROW_LEFT:
                newIndex = this.getNewSelectionIndex(newIndex, itemsArray, event.key, hasDisabledItems);
                break;
            case this.platform.KEYMAP.HOME:
                event.preventDefault();
                newIndex = 0;
                while (itemsArray[newIndex].disabled && newIndex < itemsArray.length) {
                    newIndex = newIndex === itemsArray.length - 1 ? 0 : newIndex + 1;
                }
                break;
            case this.platform.KEYMAP.END:
                event.preventDefault();
                newIndex = itemsArray.length - 1;
                while (hasDisabledItems && itemsArray[newIndex].disabled && newIndex > 0) {
                    newIndex = newIndex === 0 ? itemsArray.length - 1 : newIndex - 1;
                }
                break;
            case this.platform.KEYMAP.ENTER:
            case this.platform.KEYMAP.SPACE:
                event.preventDefault();
                if (this.tabs.activation === 'manual') {
                    this.nativeElement.click();
                }
                unsupportedKey = true;
                break;
            default:
                unsupportedKey = true;
                break;
        }
        if (!unsupportedKey) {
            itemsArray[newIndex].headerComponent.nativeElement.focus({ preventScroll: true });
            if (this.tabs.activation === 'auto') {
                this.tabs.selectedIndex = newIndex;
            }
        }
    }
    /** @hidden @internal */
    ngAfterViewInit() {
        this.ngZone.runOutsideAngular(() => {
            this._resizeObserver = new (getResizeObserver())(() => {
                this.tabs.realignSelectedIndicator();
            });
            this._resizeObserver.observe(this.nativeElement);
        });
    }
    /** @hidden @internal */
    ngOnDestroy() {
        this.ngZone.runOutsideAngular(() => {
            this._resizeObserver?.disconnect();
        });
    }
    getNewSelectionIndex(newIndex, itemsArray, key, hasDisabledItems) {
        if ((key === this.platform.KEYMAP.ARROW_RIGHT && !this.dir.rtl) || (key === this.platform.KEYMAP.ARROW_LEFT && this.dir.rtl)) {
            newIndex = newIndex === itemsArray.length - 1 ? 0 : newIndex + 1;
            while (hasDisabledItems && itemsArray[newIndex].disabled && newIndex < itemsArray.length) {
                newIndex = newIndex === itemsArray.length - 1 ? 0 : newIndex + 1;
            }
        }
        else {
            newIndex = newIndex === 0 ? itemsArray.length - 1 : newIndex - 1;
            while (hasDisabledItems && itemsArray[newIndex].disabled && newIndex >= 0) {
                newIndex = newIndex === 0 ? itemsArray.length - 1 : newIndex - 1;
            }
        }
        return newIndex;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxTabHeaderComponent, deps: [{ token: i1.IgxTabsComponent }, { token: i2.IgxTabItemDirective }, { token: i0.ElementRef }, { token: i3.PlatformUtil }, { token: i0.NgZone }, { token: i4.IgxDirectionality }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.4", type: IgxTabHeaderComponent, isStandalone: true, selector: "igx-tab-header", host: { listeners: { "keydown": "keyDown($event)" }, properties: { "class.igx-tabs__header-item--selected": "this.provideCssClassSelected", "class.igx-tabs__header-item--disabled": "this.provideCssClassDisabled", "class.igx-tabs__header-item": "this.cssClass" } }, providers: [{ provide: IgxTabHeaderBase, useExisting: IgxTabHeaderComponent }], usesInheritance: true, ngImport: i0, template: "<ng-content select=\"igx-prefix,[igxPrefix]\"></ng-content>\n\n<div class=\"igx-tabs__header-item-inner\">\n    <ng-content></ng-content>\n</div>\n\n<ng-content select=\"igx-suffix,[igxSuffix]\"></ng-content>\n" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxTabHeaderComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igx-tab-header', providers: [{ provide: IgxTabHeaderBase, useExisting: IgxTabHeaderComponent }], standalone: true, template: "<ng-content select=\"igx-prefix,[igxPrefix]\"></ng-content>\n\n<div class=\"igx-tabs__header-item-inner\">\n    <ng-content></ng-content>\n</div>\n\n<ng-content select=\"igx-suffix,[igxSuffix]\"></ng-content>\n" }]
        }], ctorParameters: () => [{ type: i1.IgxTabsComponent }, { type: i2.IgxTabItemDirective }, { type: i0.ElementRef }, { type: i3.PlatformUtil }, { type: i0.NgZone }, { type: i4.IgxDirectionality }], propDecorators: { provideCssClassSelected: [{
                type: HostBinding,
                args: ['class.igx-tabs__header-item--selected']
            }], provideCssClassDisabled: [{
                type: HostBinding,
                args: ['class.igx-tabs__header-item--disabled']
            }], cssClass: [{
                type: HostBinding,
                args: ['class.igx-tabs__header-item']
            }], keyDown: [{
                type: HostListener,
                args: ['keydown', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,