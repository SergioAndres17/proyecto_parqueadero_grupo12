import { Injectable } from '@angular/core';
import { first, takeUntil } from 'rxjs/operators';
import { FilteringLogic } from '../../data-operations/filtering-expression.interface';
import { FilteringExpressionsTree } from '../../data-operations/filtering-expressions-tree';
import { DimensionValuesFilteringStrategy } from '../../data-operations/pivot-strategy';
import { IgxFilteringService } from '../filtering/grid-filtering.service';
import { PivotUtil } from './pivot-util';
import * as i0 from "@angular/core";
export class IgxPivotFilteringService extends IgxFilteringService {
    clearFilter(field) {
        this.clear_filter(field);
    }
    clear_filter(fieldName) {
        super.clear_filter(fieldName);
        const grid = this.grid;
        const allDimensions = grid.allDimensions;
        const allDimensionsFlat = PivotUtil.flatten(allDimensions);
        const dim = allDimensionsFlat.find(x => x.memberName === fieldName);
        dim.filter = undefined;
        grid.filteringPipeTrigger++;
        if (allDimensions.indexOf(dim) !== -1) {
            // update columns
            grid.setupColumns();
        }
    }
    filter_internal(fieldName, term, conditionOrExpressionsTree, ignoreCase) {
        super.filter_internal(fieldName, term, conditionOrExpressionsTree, ignoreCase);
        const grid = this.grid;
        const config = grid.pivotConfiguration;
        const allDimensions = PivotUtil.flatten(config.rows.concat(config.columns).concat(config.filters).filter(x => x !== null && x !== undefined));
        const enabledDimensions = allDimensions.filter(x => x && x.enabled);
        const dim = enabledDimensions.find(x => x.memberName === fieldName || x.member === fieldName);
        const filteringTree = dim.filter || new FilteringExpressionsTree(FilteringLogic.And);
        const fieldFilterIndex = filteringTree.findIndex(fieldName);
        if (fieldFilterIndex > -1) {
            filteringTree.filteringOperands.splice(fieldFilterIndex, 1);
        }
        this.prepare_filtering_expression(filteringTree, fieldName, term, conditionOrExpressionsTree, ignoreCase, fieldFilterIndex);
        dim.filter = filteringTree;
        grid.filteringPipeTrigger++;
        grid.filterStrategy = grid.filterStrategy ?? new DimensionValuesFilteringStrategy();
        if (allDimensions.indexOf(dim) !== -1) {
            // update columns
            grid.setupColumns();
        }
    }
    toggleFiltersESF(dropdown, element, column, shouldReattach) {
        const filterIcon = column.filteringExpressionsTree ? 'igx-excel-filter__icon--filtered' : 'igx-excel-filter__icon';
        const filterIconTarget = element.querySelector(`.${filterIcon}`) || element;
        const { id, ref } = this.grid.createFilterESF(dropdown, column, {
            ...this._filterMenuOverlaySettings,
            ...{ target: filterIconTarget }
        }, shouldReattach);
        this.filtersESFId = id;
        if (shouldReattach) {
            this._overlayService.opening
                .pipe(first(overlay => overlay.id === id), takeUntil(this.destroy$))
                .subscribe(() => this.lastActiveNode = this.grid.navigation.activeNode);
            this._overlayService.closed
                .pipe(first(overlay => overlay.id === id), takeUntil(this.destroy$))
                .subscribe(() => {
                this._overlayService.detach(id);
                ref?.destroy();
                this.grid.navigation.activeNode = this.lastActiveNode;
                this.grid.theadRow.nativeElement.focus();
            });
            this.grid.columnPinned.pipe(first()).subscribe(() => ref?.destroy());
            this._overlayService.show(id);
        }
    }
    hideESF() {
        this._overlayService.hide(this.filtersESFId);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxPivotFilteringService, deps: null, target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxPivotFilteringService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxPivotFilteringService, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,