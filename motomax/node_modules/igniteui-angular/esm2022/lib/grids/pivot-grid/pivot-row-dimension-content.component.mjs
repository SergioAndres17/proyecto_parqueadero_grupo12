import { ChangeDetectionStrategy, Component, createComponent, HostBinding, Inject, Input, TemplateRef, ViewChild, ViewChildren } from '@angular/core';
import { IgxColumnComponent } from '../columns/column.component';
import { IGX_GRID_BASE } from '../common/grid.interface';
import { IgxGridHeaderRowComponent } from '../headers/grid-header-row.component';
import { IgxPivotRowDimensionHeaderGroupComponent } from './pivot-row-dimension-header-group.component';
import { PivotUtil } from './pivot-util';
import { IgxHeaderGroupWidthPipe, IgxHeaderGroupStylePipe } from '../headers/pipes';
import { IgxIconComponent } from '../../icon/icon.component';
import { NgClass, NgStyle } from '@angular/common';
import * as i0 from "@angular/core";
/**
 *
 * For all intents & purposes treat this component as what a <thead> usually is in the default <table> element.
 *
 * This container holds the pivot grid header elements and their behavior/interactions.
 *
 * @hidden @internal
 */
export class IgxPivotRowDimensionContentComponent extends IgxGridHeaderRowComponent {
    get rowStart() {
        return this.layout ? `${this.layout.rowStart}` : "";
    }
    get rowsEnd() {
        return this.layout ? `${this.layout.rowEnd}` : "";
    }
    get colStart() {
        return this.layout ? `${this.layout.colStart}` : "";
    }
    get colEnd() {
        return this.layout ? `${this.layout.colEnd}` : "";
    }
    constructor(grid, ref, injector, envInjector, cdr, viewRef) {
        super(ref, cdr);
        this.grid = grid;
        this.injector = injector;
        this.envInjector = envInjector;
        this.viewRef = viewRef;
    }
    get rowDimensionColumn() {
        return this.rowDimensionData?.column;
    }
    /**
    * @hidden
    * @internal
    */
    ngOnChanges(changes) {
        if (changes.rowData) {
            // generate new rowDimension on row data change
            this.rowDimensionData = null;
            this.viewRef.clear();
            this.extractFromDimensions();
            this.viewRef.clear();
        }
        if (changes.width && this.rowDimensionData) {
            const data = this.rowDimensionData;
            data.column.width = this.grid.rowDimensionWidthToPixels(this.rootDimension) + 'px';
        }
    }
    /**
    * @hidden
    * @internal
    */
    toggleRowDimension(event) {
        this.grid.toggleRow(this.getRowDimensionKey());
        this.grid.navigation.onRowToggle(this.getExpandState(), this.dimension, this.rowData, this.layout);
        event?.stopPropagation();
    }
    /**
     * @hidden
     * @internal
     */
    getRowDimensionKey() {
        const dimData = this.rowDimensionData;
        const key = PivotUtil.getRecordKey(this.rowData, dimData.dimension);
        return key;
    }
    getExpandState() {
        return this.grid.gridAPI.get_row_expansion_state(this.getRowDimensionKey());
    }
    getLevel() {
        return this.grid.hasHorizontalLayout ? 0 : this.dimension.level;
    }
    getHeaderWidthFromDimension() {
        if (this.grid.hasHorizontalLayout) {
            return this.width === -1 ? 'fit-content' : this.width;
        }
        return this.grid.rowDimensionWidth(this.rootDimension);
    }
    extractFromDimensions() {
        if (this.dimension && this.rowData) {
            const col = this.extractFromDimension(this.dimension, this.rowData);
            const prevDims = [];
            this.rowDimensionData = {
                column: col,
                dimension: this.dimension,
                prevDimensions: prevDims
            };
        }
    }
    extractFromDimension(dim, rowData) {
        const field = dim.memberName;
        const header = rowData?.dimensionValues.get(field);
        const col = this._createColComponent(field, header, dim);
        return col;
    }
    _createColComponent(field, header, dim) {
        const ref = createComponent(IgxColumnComponent, { environmentInjector: this.envInjector, elementInjector: this.injector });
        ref.instance.field = field;
        ref.instance.header = header;
        ref.instance.width = this.grid.rowDimensionWidthToPixels(this.rootDimension) + 'px';
        ref.instance.resizable = this.grid.rowDimensionResizing;
        ref.instance._vIndex = this.grid.columns.length + this.rowIndex + this.rowIndex * this.grid.pivotConfiguration.rows.length;
        if (header && dim.childLevel && (!this.rowData.totalRecordDimensionName || this.rowData.totalRecordDimensionName !== dim.memberName)) {
            ref.instance.headerTemplate = this.headerTemplate;
        }
        else {
            ref.instance.headerTemplate = this.headerTemplateDefault;
        }
        return ref.instance;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxPivotRowDimensionContentComponent, deps: [{ token: IGX_GRID_BASE }, { token: i0.ElementRef }, { token: i0.Injector }, { token: i0.EnvironmentInjector }, { token: i0.ChangeDetectorRef }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.4", type: IgxPivotRowDimensionContentComponent, isStandalone: true, selector: "igx-pivot-row-dimension-content", inputs: { rowIndex: "rowIndex", colIndex: "colIndex", layout: "layout", dimension: "dimension", rootDimension: "rootDimension", rowData: "rowData" }, host: { properties: { "style.grid-row-start": "this.rowStart", "style.grid-row-end": "this.rowsEnd", "style.grid-column-start": "this.colStart", "style.grid-column-end": "this.colEnd" } }, viewQueries: [{ propertyName: "headerTemplate", first: true, predicate: ["headerTemplate"], descendants: true, read: TemplateRef, static: true }, { propertyName: "headerTemplateDefault", first: true, predicate: ["headerDefaultTemplate"], descendants: true, read: TemplateRef, static: true }, { propertyName: "headerGroups", predicate: IgxPivotRowDimensionHeaderGroupComponent, descendants: true }], usesInheritance: true, usesOnChanges: true, ngImport: i0, template: "<div role=\"rowgroup\" class=\"igx-grid-thead__wrapper\" [style.width.px]=\"width\"\n    [class.igx-grid__tr--mrl]=\"hasMRL\">\n    <div class=\"igx-grid__tr igx-grid__tr-header-row\" role=\"row\" [style.width.px]=\"width\">\n            <igx-pivot-row-dimension-header-group [ngClass]=\"rowDimensionColumn.headerGroupClasses\"\n                [ngStyle]=\"rowDimensionColumn.headerGroupStyles | igxHeaderGroupStyle:rowDimensionColumn:grid.pipeTrigger\" [column]=\"rowDimensionColumn\"\n                [style.min-width]=\"getHeaderWidthFromDimension() | igxHeaderGroupWidth:grid.defaultHeaderGroupMinWidth:hasMRL\"\n                [style.width]=\"getHeaderWidthFromDimension() | igxHeaderGroupWidth:grid.defaultHeaderGroupMinWidth:hasMRL\"\n                [style.flex-basis]=\"getHeaderWidthFromDimension() | igxHeaderGroupWidth:grid.defaultHeaderGroupMinWidth:hasMRL\"\n                [rowIndex]=\"rowIndex\"\n                [colIndex]=\"colIndex\"\n                [layout]=\"layout\"\n                [parent]='this'>\n            </igx-pivot-row-dimension-header-group>\n    </div>\n</div>\n\n<ng-template #headerTemplate let-column>\n    <div class='igx-grid__tr--header igx-grid__row-indentation--level-{{getLevel()}}'>\n        <igx-icon\n            family=\"default\"\n            [name]=\"getExpandState() ? 'tree_collapse' : 'tree_expand'\"\n            [attr.draggable]=\"false\"\n            (click)=\"toggleRowDimension($event)\"\n            >\n        </igx-icon>\n        {{column.header}}\n    </div>\n</ng-template>\n\n<ng-template #headerDefaultTemplate let-column>\n    <div class='igx-grid__tr--header igx-grid__row-indentation--level-{{getLevel()}}' style=\"--component-size: 3\">\n        <!--Using the igx-icon as a sizable spacer spacer here-->\n        <igx-icon style='flex-shrink: 0;' [attr.draggable]=\"false\"></igx-icon>\n        {{column.header}}\n    </div>\n</ng-template>\n", dependencies: [{ kind: "component", type: IgxPivotRowDimensionHeaderGroupComponent, selector: "igx-pivot-row-dimension-header-group", inputs: ["rowIndex", "colIndex", "layout", "parent"] }, { kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "component", type: IgxIconComponent, selector: "igx-icon", inputs: ["family", "name", "active"] }, { kind: "pipe", type: IgxHeaderGroupWidthPipe, name: "igxHeaderGroupWidth" }, { kind: "pipe", type: IgxHeaderGroupStylePipe, name: "igxHeaderGroupStyle" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxPivotRowDimensionContentComponent, decorators: [{
            type: Component,
            args: [{ changeDetection: ChangeDetectionStrategy.OnPush, selector: 'igx-pivot-row-dimension-content', standalone: true, imports: [IgxPivotRowDimensionHeaderGroupComponent, NgClass, NgStyle, IgxIconComponent, IgxHeaderGroupWidthPipe, IgxHeaderGroupStylePipe], template: "<div role=\"rowgroup\" class=\"igx-grid-thead__wrapper\" [style.width.px]=\"width\"\n    [class.igx-grid__tr--mrl]=\"hasMRL\">\n    <div class=\"igx-grid__tr igx-grid__tr-header-row\" role=\"row\" [style.width.px]=\"width\">\n            <igx-pivot-row-dimension-header-group [ngClass]=\"rowDimensionColumn.headerGroupClasses\"\n                [ngStyle]=\"rowDimensionColumn.headerGroupStyles | igxHeaderGroupStyle:rowDimensionColumn:grid.pipeTrigger\" [column]=\"rowDimensionColumn\"\n                [style.min-width]=\"getHeaderWidthFromDimension() | igxHeaderGroupWidth:grid.defaultHeaderGroupMinWidth:hasMRL\"\n                [style.width]=\"getHeaderWidthFromDimension() | igxHeaderGroupWidth:grid.defaultHeaderGroupMinWidth:hasMRL\"\n                [style.flex-basis]=\"getHeaderWidthFromDimension() | igxHeaderGroupWidth:grid.defaultHeaderGroupMinWidth:hasMRL\"\n                [rowIndex]=\"rowIndex\"\n                [colIndex]=\"colIndex\"\n                [layout]=\"layout\"\n                [parent]='this'>\n            </igx-pivot-row-dimension-header-group>\n    </div>\n</div>\n\n<ng-template #headerTemplate let-column>\n    <div class='igx-grid__tr--header igx-grid__row-indentation--level-{{getLevel()}}'>\n        <igx-icon\n            family=\"default\"\n            [name]=\"getExpandState() ? 'tree_collapse' : 'tree_expand'\"\n            [attr.draggable]=\"false\"\n            (click)=\"toggleRowDimension($event)\"\n            >\n        </igx-icon>\n        {{column.header}}\n    </div>\n</ng-template>\n\n<ng-template #headerDefaultTemplate let-column>\n    <div class='igx-grid__tr--header igx-grid__row-indentation--level-{{getLevel()}}' style=\"--component-size: 3\">\n        <!--Using the igx-icon as a sizable spacer spacer here-->\n        <igx-icon style='flex-shrink: 0;' [attr.draggable]=\"false\"></igx-icon>\n        {{column.header}}\n    </div>\n</ng-template>\n" }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [IGX_GRID_BASE]
                }] }, { type: i0.ElementRef }, { type: i0.Injector }, { type: i0.EnvironmentInjector }, { type: i0.ChangeDetectorRef }, { type: i0.ViewContainerRef }], propDecorators: { rowStart: [{
                type: HostBinding,
                args: ['style.grid-row-start']
            }], rowsEnd: [{
                type: HostBinding,
                args: ['style.grid-row-end']
            }], colStart: [{
                type: HostBinding,
                args: ['style.grid-column-start']
            }], colEnd: [{
                type: HostBinding,
                args: ['style.grid-column-end']
            }], rowIndex: [{
                type: Input
            }], colIndex: [{
                type: Input
            }], layout: [{
                type: Input
            }], dimension: [{
                type: Input
            }], rootDimension: [{
                type: Input
            }], rowData: [{
                type: Input
            }], headerTemplate: [{
                type: ViewChild,
                args: ['headerTemplate', { read: TemplateRef, static: true }]
            }], headerTemplateDefault: [{
                type: ViewChild,
                args: ['headerDefaultTemplate', { read: TemplateRef, static: true }]
            }], headerGroups: [{
                type: ViewChildren,
                args: [IgxPivotRowDimensionHeaderGroupComponent]
            }] } });
//# sourceMappingURL=data:application/json;base64,