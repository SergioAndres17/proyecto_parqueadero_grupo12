import { ChangeDetectionStrategy, Component, HostBinding, Inject, Input, ViewChildren } from '@angular/core';
import { IGX_GRID_BASE } from '../common/grid.interface';
import { IgxGridHeaderRowComponent } from '../headers/grid-header-row.component';
import { IgxHeaderGroupWidthPipe, IgxHeaderGroupStylePipe } from '../headers/pipes';
import { IgxIconComponent } from '../../icon/icon.component';
import { NgClass, NgFor, NgStyle } from '@angular/common';
import { IgxPivotRowDimensionContentComponent } from './pivot-row-dimension-content.component';
import { IgxPivotGridHorizontalRowCellMerging } from './pivot-grid.pipes';
import * as i0 from "@angular/core";
/**
 *
 * For all intents & purposes treat this component as what a <thead> usually is in the default <table> element.
 *
 * This container holds the pivot grid header elements and their behavior/interactions.
 *
 * @hidden @internal
 */
export class IgxPivotRowDimensionMrlRowComponent extends IgxGridHeaderRowComponent {
    get rowsTemplate() {
        return this.getRowMRLTemplate(true, this.rowGroup);
    }
    get colsTemplate() {
        return this.getRowMRLTemplate(false, this.rowGroup);
    }
    constructor(grid, ref, injector, envInjector, cdr, viewRef) {
        super(ref, cdr);
        this.grid = grid;
        this.injector = injector;
        this.envInjector = envInjector;
        this.viewRef = viewRef;
        this.pivotDim = true;
        this.mrlBlock = true;
    }
    getRowMRLTemplate(forRows, rows) {
        if (forRows) {
            return `repeat(${rows.length},1fr)`;
        }
        else if (this.grid.visibleRowDimensions && this.grid.dimensionDataColumns) {
            const res = [];
            this.grid.visibleRowDimensions.forEach(dim => {
                res.push(this.grid.rowDimensionWidth(dim));
            });
            return res.join(' ');
        }
    }
    rowDimensionWidthCombined(dims) {
        let resWidth = 0;
        for (const dim of (dims || [])) {
            const rowDimWidth = this.grid.rowDimensionWidth(dim);
            if (rowDimWidth === 'fit-content') {
                return -1;
            }
            else {
                resWidth += parseFloat(rowDimWidth);
            }
        }
        return resWidth;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxPivotRowDimensionMrlRowComponent, deps: [{ token: IGX_GRID_BASE }, { token: i0.ElementRef }, { token: i0.Injector }, { token: i0.EnvironmentInjector }, { token: i0.ChangeDetectorRef }, { token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.4", type: IgxPivotRowDimensionMrlRowComponent, isStandalone: true, selector: "igx-pivot-row-dimension-mrl-row", inputs: { rowIndex: "rowIndex", rowGroup: "rowGroup", groupedData: "groupedData" }, host: { properties: { "class.igx-grid__tbody-pivot-dimension": "this.pivotDim", "class.igx-grid__mrl-block": "this.mrlBlock", "style.grid-template-rows": "this.rowsTemplate", "style.grid-template-columns": "this.colsTemplate" } }, viewQueries: [{ propertyName: "contentCells", predicate: IgxPivotRowDimensionContentComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<ng-template ngFor let-cell let-cellIndex=\"index\" [ngForOf]=\"rowGroup\n    | pivotGridHorizontalRowCellMerging:grid.pivotConfiguration:grid.pipeTrigger\">\n    <igx-pivot-row-dimension-content role=\"row\" class=\"igx-grid-thead\"\n        [grid]=\"grid\"\n        [dimension]=\"cell.rootDimension\"\n        [rootDimension]=\"cell.rootDimension\"\n        [rowIndex]=\"rowIndex\"\n        [colIndex]=\"cellIndex\"\n        [rowData]=\"cell.records[0]\"\n        [width]=\"rowDimensionWidthCombined(cell.dimensions)\"\n        [layout]=\"{\n            rowStart: cell.rowStart,\n            rowEnd: cell.rowStart + cell.rowSpan,\n            colStart: cell.colStart,\n            colEnd: cell.colStart + cell.colSpan,\n            columnVisibleIndex: cellIndex\n        }\">\n    </igx-pivot-row-dimension-content>\n</ng-template>\n", dependencies: [{ kind: "directive", type: NgFor, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "component", type: IgxPivotRowDimensionContentComponent, selector: "igx-pivot-row-dimension-content", inputs: ["rowIndex", "colIndex", "layout", "dimension", "rootDimension", "rowData"] }, { kind: "pipe", type: IgxPivotGridHorizontalRowCellMerging, name: "pivotGridHorizontalRowCellMerging" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxPivotRowDimensionMrlRowComponent, decorators: [{
            type: Component,
            args: [{ changeDetection: ChangeDetectionStrategy.OnPush, selector: 'igx-pivot-row-dimension-mrl-row', standalone: true, imports: [NgClass, NgStyle, NgFor, IgxIconComponent, IgxHeaderGroupWidthPipe, IgxHeaderGroupStylePipe,
                        IgxPivotRowDimensionContentComponent, IgxPivotGridHorizontalRowCellMerging], template: "<ng-template ngFor let-cell let-cellIndex=\"index\" [ngForOf]=\"rowGroup\n    | pivotGridHorizontalRowCellMerging:grid.pivotConfiguration:grid.pipeTrigger\">\n    <igx-pivot-row-dimension-content role=\"row\" class=\"igx-grid-thead\"\n        [grid]=\"grid\"\n        [dimension]=\"cell.rootDimension\"\n        [rootDimension]=\"cell.rootDimension\"\n        [rowIndex]=\"rowIndex\"\n        [colIndex]=\"cellIndex\"\n        [rowData]=\"cell.records[0]\"\n        [width]=\"rowDimensionWidthCombined(cell.dimensions)\"\n        [layout]=\"{\n            rowStart: cell.rowStart,\n            rowEnd: cell.rowStart + cell.rowSpan,\n            colStart: cell.colStart,\n            colEnd: cell.colStart + cell.colSpan,\n            columnVisibleIndex: cellIndex\n        }\">\n    </igx-pivot-row-dimension-content>\n</ng-template>\n" }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [IGX_GRID_BASE]
                }] }, { type: i0.ElementRef }, { type: i0.Injector }, { type: i0.EnvironmentInjector }, { type: i0.ChangeDetectorRef }, { type: i0.ViewContainerRef }], propDecorators: { pivotDim: [{
                type: HostBinding,
                args: ['class.igx-grid__tbody-pivot-dimension']
            }], mrlBlock: [{
                type: HostBinding,
                args: ['class.igx-grid__mrl-block']
            }], rowsTemplate: [{
                type: HostBinding,
                args: ['style.grid-template-rows']
            }], colsTemplate: [{
                type: HostBinding,
                args: ['style.grid-template-columns']
            }], rowIndex: [{
                type: Input
            }], rowGroup: [{
                type: Input
            }], groupedData: [{
                type: Input
            }], contentCells: [{
                type: ViewChildren,
                args: [IgxPivotRowDimensionContentComponent]
            }] } });
//# sourceMappingURL=data:application/json;base64,