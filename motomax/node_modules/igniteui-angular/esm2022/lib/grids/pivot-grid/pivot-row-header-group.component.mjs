import { ChangeDetectionStrategy, Component, HostBinding, Inject, Input, ViewChild } from '@angular/core';
import { IGX_GRID_BASE } from '../common/grid.interface';
import { IgxGridHeaderGroupComponent } from '../headers/grid-header-group.component';
import { IgxPivotRowDimensionHeaderComponent } from './pivot-row-dimension-header.component';
import { IgxHeaderGroupStylePipe } from '../headers/pipes';
import { IgxPivotResizeHandleDirective } from '../resizing/pivot-grid/pivot-resize-handle.directive';
import { IgxGridFilteringCellComponent } from '../filtering/base/grid-filtering-cell.component';
import { IgxColumnMovingDropDirective } from '../moving/moving.drop.directive';
import { IgxColumnMovingDragDirective } from '../moving/moving.drag.directive';
import { NgIf, NgClass, NgStyle } from '@angular/common';
import { IgxIconComponent } from '../../icon/icon.component';
import { SortingDirection } from '../../data-operations/sorting-strategy';
import * as i0 from "@angular/core";
import * as i1 from "../resizing/pivot-grid/pivot-resizing.service";
import * as i2 from "../filtering/grid-filtering.service";
import * as i3 from "../../core/utils";
/**
 * @hidden
 */
export class IgxPivotRowHeaderGroupComponent extends IgxGridHeaderGroupComponent {
    constructor(cdRef, grid, elementRef, colResizingService, filteringService, platform, zone) {
        super(cdRef, grid, elementRef, colResizingService, filteringService, platform);
        this.cdRef = cdRef;
        this.grid = grid;
        this.elementRef = elementRef;
        this.colResizingService = colResizingService;
        this.zone = zone;
        /**
         * @hidden
         */
        this.userSelect = 'none';
    }
    set dimWidth(value) {
        this.column.width = value + 'px';
    }
    get dimWidth() {
        return parseFloat(this.column.width);
    }
    get parent() {
        return this;
    }
    ;
    get headerID() {
        return `${this.grid.id}_-2_${this.rootDimension.memberName}_${this.visibleIndex}`;
    }
    get title() {
        return this.rootDimension.displayName;
    }
    /**
     * @hidden
     * @internal
     */
    get visibleIndex() {
        const rows = this.grid.visibleRowDimensions;
        return rows.indexOf(this.rootDimension);
    }
    get active() {
        const nav = this.grid.navigation;
        const node = nav.activeNode;
        return node && !this.column.columnGroup ?
            nav.isRowDimensionHeaderActive &&
                node.row === this.rowIndex &&
                node.column === this.visibleIndex :
            false;
    }
    get sortAscendingStyle() {
        return this.rootDimension.sortDirection === SortingDirection.Asc;
    }
    get sortDescendingStyle() {
        return this.rootDimension.sortDirection === SortingDirection.Desc;
    }
    get sortableStyle() {
        return true;
    }
    get sortedStyle() {
        return this.rootDimension.sortDirection !== undefined && this.rootDimension.sortDirection !== SortingDirection.None;
    }
    get activeNode() {
        this.grid.navigation.isRowDimensionHeaderActive = true;
        this.grid.navigation.isRowHeaderActive = false;
        return {
            row: this.rowIndex, column: this.visibleIndex, level: null,
            mchCache: {
                level: 0,
                visibleIndex: this.visibleIndex
            },
            layout: null
        };
    }
    activate() {
        this.grid.navigation.setActiveNode(this.activeNode);
    }
    /**
     * @hidden @internal
     */
    pointerdown(_event) {
        this.activate();
    }
    /**
     * @hidden @internal
     */
    onMouseDown(_event) {
        this.activate();
    }
    get selectable() {
        return false;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxPivotRowHeaderGroupComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: IGX_GRID_BASE }, { token: i0.ElementRef }, { token: i1.IgxPivotColumnResizingService }, { token: i2.IgxFilteringService }, { token: i3.PlatformUtil }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.4", type: IgxPivotRowHeaderGroupComponent, isStandalone: true, selector: "igx-pivot-row-header-group", inputs: { rowIndex: "rowIndex", dimWidth: "dimWidth", rootDimension: "rootDimension" }, host: { properties: { "style.user-select": "this.userSelect", "attr.id": "this.headerID", "attr.title": "this.title", "class.igx-grid-th--active": "this.active", "class.asc": "this.sortAscendingStyle", "class.desc": "this.sortDescendingStyle", "class.igx-grid-th--sortable": "this.sortableStyle", "class.igx-grid-th--sorted": "this.sortedStyle" } }, viewQueries: [{ propertyName: "header", first: true, predicate: IgxPivotRowDimensionHeaderComponent, descendants: true }], usesInheritance: true, ngImport: i0, template: "<ng-template #defaultColumn>\n    <span class=\"igx-grid-th__group-title\" [title]=\"title\">{{column.header}}</span>\n</ng-template>\n\n<ng-template #defaultCollapseIndicator>\n    <igx-icon\n        family=\"default\"\n        [name]=\"column.expanded ? 'tree_collapse' : 'tree_expand'\">\n    </igx-icon>\n</ng-template>\n\n<ng-container *ngIf=\"!column.columnGroup\">\n    <span *ngIf=\"grid.hasMovableColumns\" class=\"igx-grid-th__drop-indicator-left\"></span>\n    <igx-pivot-row-dimension-header\n        role=\"columnheader\"\n        class=\"igx-grid-th--fw\"\n        [id]=\"grid.id + '_' + column.field\"\n        [ngClass]=\"column.headerClasses\"\n        [ngStyle]=\"column.headerStyles | igxHeaderGroupStyle:column:grid.pipeTrigger\"\n        [igxColumnMovingDrag]=\"column\"\n        [ghostHost]=\"grid.outlet.nativeElement\"\n        [attr.droppable]=\"true\"\n        (pointerdown)=\"pointerdown($event)\"\n        [igxColumnMovingDrop]=\"column\"\n        [column]=\"column\"\n        (keydown)=\"grid.navigation.headerNavigation($event)\"\n    >\n    </igx-pivot-row-dimension-header>\n    <span *ngIf=\"!column.columnGroup && column.resizable\" class=\"igx-grid-th__resize-handle\"\n        [igxPivotResizeHandle]=\"column\"\n        [igxPivotResizeHandleHeader]=\"this\"\n        [attr.draggable]=\"false\"\n        [style.cursor]=\"colResizingService.resizeCursor\">\n    </span>\n    <span *ngIf=\"grid.hasMovableColumns\" class=\"igx-grid-th__drop-indicator-right\"></span>\n</ng-container>\n", dependencies: [{ kind: "component", type: IgxIconComponent, selector: "igx-icon", inputs: ["family", "name", "active"] }, { kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: IgxPivotRowDimensionHeaderComponent, selector: "igx-pivot-row-dimension-header" }, { kind: "directive", type: NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: NgStyle, selector: "[ngStyle]", inputs: ["ngStyle"] }, { kind: "directive", type: IgxColumnMovingDragDirective, selector: "[igxColumnMovingDrag]", inputs: ["igxColumnMovingDrag"] }, { kind: "directive", type: IgxColumnMovingDropDirective, selector: "[igxColumnMovingDrop]", inputs: ["igxColumnMovingDrop"] }, { kind: "directive", type: IgxPivotResizeHandleDirective, selector: "[igxPivotResizeHandle]", inputs: ["igxPivotResizeHandle", "igxPivotResizeHandleHeader"] }, { kind: "pipe", type: IgxHeaderGroupStylePipe, name: "igxHeaderGroupStyle" }], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxPivotRowHeaderGroupComponent, decorators: [{
            type: Component,
            args: [{ changeDetection: ChangeDetectionStrategy.OnPush, selector: 'igx-pivot-row-header-group', standalone: true, imports: [IgxIconComponent, NgIf, IgxPivotRowDimensionHeaderComponent, NgClass, NgStyle, IgxColumnMovingDragDirective, IgxColumnMovingDropDirective, IgxGridFilteringCellComponent, IgxPivotResizeHandleDirective, IgxHeaderGroupStylePipe], template: "<ng-template #defaultColumn>\n    <span class=\"igx-grid-th__group-title\" [title]=\"title\">{{column.header}}</span>\n</ng-template>\n\n<ng-template #defaultCollapseIndicator>\n    <igx-icon\n        family=\"default\"\n        [name]=\"column.expanded ? 'tree_collapse' : 'tree_expand'\">\n    </igx-icon>\n</ng-template>\n\n<ng-container *ngIf=\"!column.columnGroup\">\n    <span *ngIf=\"grid.hasMovableColumns\" class=\"igx-grid-th__drop-indicator-left\"></span>\n    <igx-pivot-row-dimension-header\n        role=\"columnheader\"\n        class=\"igx-grid-th--fw\"\n        [id]=\"grid.id + '_' + column.field\"\n        [ngClass]=\"column.headerClasses\"\n        [ngStyle]=\"column.headerStyles | igxHeaderGroupStyle:column:grid.pipeTrigger\"\n        [igxColumnMovingDrag]=\"column\"\n        [ghostHost]=\"grid.outlet.nativeElement\"\n        [attr.droppable]=\"true\"\n        (pointerdown)=\"pointerdown($event)\"\n        [igxColumnMovingDrop]=\"column\"\n        [column]=\"column\"\n        (keydown)=\"grid.navigation.headerNavigation($event)\"\n    >\n    </igx-pivot-row-dimension-header>\n    <span *ngIf=\"!column.columnGroup && column.resizable\" class=\"igx-grid-th__resize-handle\"\n        [igxPivotResizeHandle]=\"column\"\n        [igxPivotResizeHandleHeader]=\"this\"\n        [attr.draggable]=\"false\"\n        [style.cursor]=\"colResizingService.resizeCursor\">\n    </span>\n    <span *ngIf=\"grid.hasMovableColumns\" class=\"igx-grid-th__drop-indicator-right\"></span>\n</ng-container>\n" }]
        }], ctorParameters: () => [{ type: i0.ChangeDetectorRef }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [IGX_GRID_BASE]
                }] }, { type: i0.ElementRef }, { type: i1.IgxPivotColumnResizingService }, { type: i2.IgxFilteringService }, { type: i3.PlatformUtil }, { type: i0.NgZone }], propDecorators: { userSelect: [{
                type: HostBinding,
                args: ['style.user-select']
            }], rowIndex: [{
                type: Input
            }], dimWidth: [{
                type: Input
            }], rootDimension: [{
                type: Input
            }], header: [{
                type: ViewChild,
                args: [IgxPivotRowDimensionHeaderComponent]
            }], headerID: [{
                type: HostBinding,
                args: ['attr.id']
            }], title: [{
                type: HostBinding,
                args: ['attr.title']
            }], active: [{
                type: HostBinding,
                args: ['class.igx-grid-th--active']
            }], sortAscendingStyle: [{
                type: HostBinding,
                args: ['class.asc']
            }], sortDescendingStyle: [{
                type: HostBinding,
                args: ['class.desc']
            }], sortableStyle: [{
                type: HostBinding,
                args: ['class.igx-grid-th--sortable']
            }], sortedStyle: [{
                type: HostBinding,
                args: ['class.igx-grid-th--sorted']
            }] } });
//# sourceMappingURL=data:application/json;base64,