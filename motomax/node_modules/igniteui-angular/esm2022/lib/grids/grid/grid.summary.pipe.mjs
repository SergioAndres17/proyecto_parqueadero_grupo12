import { Inject, Pipe } from '@angular/core';
import { GridSummaryCalculationMode, GridSummaryPosition } from '../common/enums';
import { IGX_GRID_BASE } from '../common/grid.interface';
import * as i0 from "@angular/core";
/** @hidden */
export class IgxGridSummaryPipe {
    constructor(grid) {
        this.grid = grid;
    }
    transform(collection, hasSummary, summaryCalculationMode, summaryPosition, id, showSummary, _, __) {
        if (!collection.data || !hasSummary || summaryCalculationMode === GridSummaryCalculationMode.rootLevelOnly) {
            return collection.data;
        }
        return this.addSummaryRows(id, collection, summaryPosition, showSummary);
    }
    addSummaryRows(gridId, collection, summaryPosition, showSummary) {
        const recordsWithSummary = [];
        const lastChildMap = new Map();
        const maxSummaryHeight = this.grid.summaryService.calcMaxSummaryHeight();
        if (collection.metadata.length && !this.grid.isGroupByRecord(collection.data[0]) &&
            this.grid.isGroupByRecord(collection.metadata[0]) && summaryPosition === GridSummaryPosition.bottom) {
            const groups = [];
            groups.push(collection.metadata[0]);
            while (groups[groups.length - 1].groupParent) {
                groups.push(groups[groups.length - 1].groupParent);
            }
            groups.reverse();
            groups.forEach(g => g.skip = true);
            collection.data.splice(0, 0, ...groups);
        }
        for (const record of collection.data) {
            let skipAdd = false;
            let recordId;
            let groupByRecord = null;
            if (this.grid.isGroupByRecord(record)) {
                skipAdd = !!record.skip;
                record.skip = null;
                groupByRecord = record;
                recordId = this.grid.gridAPI.get_groupBy_record_id(groupByRecord);
            }
            else {
                recordId = this.grid.gridAPI.get_row_id(record);
            }
            if (!skipAdd) {
                recordsWithSummary.push(record);
            }
            if (summaryPosition === GridSummaryPosition.bottom && showSummary &&
                (groupByRecord && !this.grid.isExpandedGroup(groupByRecord))) {
                const records = this.removeDeletedRecord(this.grid, groupByRecord.records.slice());
                const summaries = this.grid.summaryService.calculateSummaries(recordId, records);
                const summaryRecord = {
                    summaries,
                    max: maxSummaryHeight
                };
                recordsWithSummary.push(summaryRecord);
            }
            if (summaryPosition === GridSummaryPosition.bottom && lastChildMap.has(recordId)) {
                const groupRecords = lastChildMap.get(recordId);
                for (const groupRecord of groupRecords) {
                    const groupRecordId = this.grid.gridAPI.get_groupBy_record_id(groupRecord);
                    const records = this.removeDeletedRecord(this.grid, groupRecord.records.slice());
                    const summaries = this.grid.summaryService.calculateSummaries(groupRecordId, records, groupRecord);
                    const summaryRecord = {
                        summaries,
                        max: maxSummaryHeight
                    };
                    recordsWithSummary.push(summaryRecord);
                }
            }
            const showSummaries = showSummary ? false : (groupByRecord && !this.grid.isExpandedGroup(groupByRecord));
            if (groupByRecord === null || showSummaries) {
                continue;
            }
            if (summaryPosition === GridSummaryPosition.top) {
                const records = this.removeDeletedRecord(this.grid, groupByRecord.records.slice());
                const summaries = this.grid.summaryService.calculateSummaries(recordId, records, groupByRecord);
                const summaryRecord = {
                    summaries,
                    max: maxSummaryHeight
                };
                recordsWithSummary.push(summaryRecord);
            }
            else if (summaryPosition === GridSummaryPosition.bottom) {
                let lastChild = groupByRecord;
                while (lastChild.groups && lastChild.groups.length > 0 && this.grid.isExpandedGroup(lastChild)) {
                    lastChild = lastChild.groups[lastChild.groups.length - 1];
                }
                let lastChildId;
                if (this.grid.isExpandedGroup(lastChild)) {
                    lastChildId = this.grid.gridAPI.get_row_id(lastChild.records[lastChild.records.length - 1]);
                }
                else {
                    lastChildId = this.grid.gridAPI.get_groupBy_record_id(lastChild);
                }
                let groupRecords = lastChildMap.get(lastChildId);
                if (!groupRecords) {
                    groupRecords = [];
                    lastChildMap.set(lastChildId, groupRecords);
                }
                groupRecords.unshift(groupByRecord);
            }
        }
        return recordsWithSummary;
    }
    removeDeletedRecord(grid, data) {
        if (!grid.transactions.enabled) {
            return data;
        }
        const deletedRows = grid.transactions.getTransactionLog().filter(t => t.type === 'delete').map(t => t.id);
        deletedRows.forEach(rowID => {
            const tempData = grid.primaryKey ? data.map(rec => rec[grid.primaryKey]) : data;
            const index = tempData.indexOf(rowID);
            if (index !== -1) {
                data.splice(index, 1);
            }
        });
        return data;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxGridSummaryPipe, deps: [{ token: IGX_GRID_BASE }], target: i0.ɵɵFactoryTarget.Pipe }); }
    static { this.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: "14.0.0", version: "18.2.4", ngImport: i0, type: IgxGridSummaryPipe, isStandalone: true, name: "gridSummary" }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxGridSummaryPipe, decorators: [{
            type: Pipe,
            args: [{
                    name: 'gridSummary',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [IGX_GRID_BASE]
                }] }] });
//# sourceMappingURL=data:application/json;base64,