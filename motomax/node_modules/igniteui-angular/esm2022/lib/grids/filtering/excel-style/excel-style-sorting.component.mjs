import { Component, ViewChild, HostBinding } from '@angular/core';
import { IgxButtonGroupComponent } from '../../../buttonGroup/buttonGroup.component';
import { takeUntil } from 'rxjs/operators';
import { Subject } from 'rxjs';
import { IgxIconComponent } from '../../../icon/icon.component';
import { IgxButtonDirective } from '../../../directives/button/button.directive';
import { NgIf } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "./base-filtering.component";
/**
 * A component used for presenting Excel style column sorting UI.
 */
export class IgxExcelStyleSortingComponent {
    constructor(esf, cdr) {
        this.esf = esf;
        this.cdr = cdr;
        /**
         * @hidden @internal
         */
        this.defaultClass = true;
        this.destroy$ = new Subject();
        this.esf.sortingChanged.pipe(takeUntil(this.destroy$)).subscribe(() => {
            this.updateSelectedButtons(this.esf.column.field);
        });
    }
    ngOnDestroy() {
        this.destroy$.next(true);
        this.destroy$.complete();
    }
    /**
     * @hidden @internal
     */
    onSortButtonClicked(sortDirection) {
        if (this.sortButtonGroup.buttons.filter(b => b.selected).length === 0) {
            if (this.esf.grid.isColumnGrouped(this.esf.column.field)) {
                this.sortButtonGroup.selectButton(sortDirection - 1);
            }
            else {
                this.esf.grid.clearSort(this.esf.column.field);
            }
        }
        else {
            this.esf.grid.sort({ fieldName: this.esf.column.field, dir: sortDirection, ignoreCase: true });
        }
    }
    get esfSize() {
        const esf = this.esf;
        return esf.size;
    }
    updateSelectedButtons(fieldName) {
        const sortIndex = this.esf.grid.sortingExpressions.findIndex(s => s.fieldName === fieldName);
        this.cdr.detectChanges();
        this.sortButtonGroup.buttons.forEach((b, i) => {
            this.sortButtonGroup.deselectButton(i);
        });
        if (sortIndex !== -1) {
            const sortDirection = this.esf.grid.sortingExpressions[sortIndex].dir;
            this.sortButtonGroup.selectButton(sortDirection - 1);
        }
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxExcelStyleSortingComponent, deps: [{ token: i1.BaseFilteringComponent }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.4", type: IgxExcelStyleSortingComponent, isStandalone: true, selector: "igx-excel-style-sorting", host: { properties: { "class.igx-excel-filter__sort": "this.defaultClass" } }, viewQueries: [{ propertyName: "sortButtonGroup", first: true, predicate: ["sortButtonGroup"], descendants: true, read: IgxButtonGroupComponent }], ngImport: i0, template: "<ng-container *ngIf=\"esf.column\">\n<header>\n    {{ esf.grid.resourceStrings.igx_grid_excel_filter_sorting_header }}\n</header>\n<igx-buttongroup #sortButtonGroup>\n    <button type=\"button\"\n        igxButton\n        [attr.data-togglable]=\"true\"\n        (buttonSelected)=\"onSortButtonClicked(1)\"\n        >\n        <igx-icon family=\"default\" name=\"sort_asc\"></igx-icon>\n        <span>\n            {{ esfSize === '1'?\n            esf.grid.resourceStrings.igx_grid_excel_filter_sorting_asc_short:\n            esf.grid.resourceStrings.igx_grid_excel_filter_sorting_asc  }}\n        </span>\n    </button>\n\n    <button type=\"button\"\n        igxButton\n        [attr.data-togglable]=\"true\"\n        (buttonSelected)=\"onSortButtonClicked(2)\"\n        >\n        <igx-icon family=\"default\" name=\"sort_desc\"></igx-icon>\n        <span>\n            {{ esfSize === '1' ?\n            esf.grid.resourceStrings.igx_grid_excel_filter_sorting_desc_short:\n            esf.grid.resourceStrings.igx_grid_excel_filter_sorting_desc\n        }}\n        </span>\n    </button>\n</igx-buttongroup>\n</ng-container>\n", dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: IgxButtonGroupComponent, selector: "igx-buttongroup", inputs: ["id", "itemContentCssClass", "multiSelection", "selectionMode", "values", "disabled", "alignment"], outputs: ["selected", "deselected"] }, { kind: "directive", type: IgxButtonDirective, selector: "[igxButton]", inputs: ["selected", "igxButton", "igxLabel"], outputs: ["buttonSelected"] }, { kind: "component", type: IgxIconComponent, selector: "igx-icon", inputs: ["family", "name", "active"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxExcelStyleSortingComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igx-excel-style-sorting', standalone: true, imports: [NgIf, IgxButtonGroupComponent, IgxButtonDirective, IgxIconComponent], template: "<ng-container *ngIf=\"esf.column\">\n<header>\n    {{ esf.grid.resourceStrings.igx_grid_excel_filter_sorting_header }}\n</header>\n<igx-buttongroup #sortButtonGroup>\n    <button type=\"button\"\n        igxButton\n        [attr.data-togglable]=\"true\"\n        (buttonSelected)=\"onSortButtonClicked(1)\"\n        >\n        <igx-icon family=\"default\" name=\"sort_asc\"></igx-icon>\n        <span>\n            {{ esfSize === '1'?\n            esf.grid.resourceStrings.igx_grid_excel_filter_sorting_asc_short:\n            esf.grid.resourceStrings.igx_grid_excel_filter_sorting_asc  }}\n        </span>\n    </button>\n\n    <button type=\"button\"\n        igxButton\n        [attr.data-togglable]=\"true\"\n        (buttonSelected)=\"onSortButtonClicked(2)\"\n        >\n        <igx-icon family=\"default\" name=\"sort_desc\"></igx-icon>\n        <span>\n            {{ esfSize === '1' ?\n            esf.grid.resourceStrings.igx_grid_excel_filter_sorting_desc_short:\n            esf.grid.resourceStrings.igx_grid_excel_filter_sorting_desc\n        }}\n        </span>\n    </button>\n</igx-buttongroup>\n</ng-container>\n" }]
        }], ctorParameters: () => [{ type: i1.BaseFilteringComponent }, { type: i0.ChangeDetectorRef }], propDecorators: { defaultClass: [{
                type: HostBinding,
                args: ['class.igx-excel-filter__sort']
            }], sortButtonGroup: [{
                type: ViewChild,
                args: ['sortButtonGroup', { read: IgxButtonGroupComponent }]
            }] } });
//# sourceMappingURL=data:application/json;base64,