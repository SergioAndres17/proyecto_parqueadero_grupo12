import { Directive } from '@angular/core';
import { ConnectedPositioningStrategy } from '../services/public_api';
import { VerticalAlignment } from '../services/overlay/utilities';
import { IgxForOfSyncService } from '../directives/for-of/for_of.sync.service';
import { scaleInVerBottom, scaleInVerTop } from 'igniteui-angular/animations';
import * as i0 from "@angular/core";
export class IgxGridBodyDirective {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxGridBodyDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.4", type: IgxGridBodyDirective, isStandalone: true, selector: "[igxGridBody]", providers: [IgxForOfSyncService], ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxGridBodyDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxGridBody]',
                    providers: [IgxForOfSyncService],
                    standalone: true
                }]
        }] });
/**
 * @hidden
 */
export class RowEditPositionStrategy extends ConnectedPositioningStrategy {
    constructor() {
        super(...arguments);
        this.isTop = false;
        this.isTopInitialPosition = null;
    }
    position(contentElement, size, document, initialCall, target) {
        const container = this.settings.container; // grid.tbody
        const targetElement = target; // current grid.row
        // Position of the overlay depends on the available space in the grid.
        // If the bottom space is not enough then the the row overlay will show at the top of the row.
        // Once shown, either top or bottom, then this position stays until the overlay is closed (isTopInitialPosition property),
        // which means that when scrolling then overlay may hide, while the row is still visible (UX requirement).
        this.isTop = this.isTopInitialPosition !== null ?
            this.isTopInitialPosition :
            container.getBoundingClientRect().bottom <
                targetElement.getBoundingClientRect().bottom + contentElement.getBoundingClientRect().height;
        // Set width of the row editing overlay to equal row width, otherwise it fits 100% of the grid.
        contentElement.style.width = targetElement.clientWidth + 'px';
        this.settings.verticalStartPoint = this.settings.verticalDirection = this.isTop ? VerticalAlignment.Top : VerticalAlignment.Bottom;
        this.settings.openAnimation = this.isTop ? scaleInVerBottom : scaleInVerTop;
        super.position(contentElement, { width: targetElement.clientWidth, height: targetElement.clientHeight }, document, initialCall, targetElement);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC5jb21tb24uanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy9saWIvZ3JpZHMvZ3JpZC5jb21tb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMxQyxPQUFPLEVBQUUsNEJBQTRCLEVBQUUsTUFBTSx3QkFBd0IsQ0FBQztBQUN0RSxPQUFPLEVBQUUsaUJBQWlCLEVBQTJCLE1BQU0sK0JBQStCLENBQUM7QUFDM0YsT0FBTyxFQUFFLG1CQUFtQixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDL0UsT0FBTyxFQUFFLGdCQUFnQixFQUFFLGFBQWEsRUFBRSxNQUFNLDZCQUE2QixDQUFDOztBQVE5RSxNQUFNLE9BQU8sb0JBQW9COzhHQUFwQixvQkFBb0I7a0dBQXBCLG9CQUFvQiw0REFIbEIsQ0FBQyxtQkFBbUIsQ0FBQzs7MkZBR3ZCLG9CQUFvQjtrQkFMaEMsU0FBUzttQkFBQztvQkFDUCxRQUFRLEVBQUUsZUFBZTtvQkFDekIsU0FBUyxFQUFFLENBQUMsbUJBQW1CLENBQUM7b0JBQ2hDLFVBQVUsRUFBRSxJQUFJO2lCQUNuQjs7QUFXRDs7R0FFRztBQUNILE1BQU0sT0FBTyx1QkFBd0IsU0FBUSw0QkFBNEI7SUFBekU7O1FBQ1csVUFBSyxHQUFHLEtBQUssQ0FBQztRQUNkLHlCQUFvQixHQUFHLElBQUksQ0FBQztJQXdCdkMsQ0FBQztJQXRCbUIsUUFBUSxDQUFDLGNBQTJCLEVBQUUsSUFBdUMsRUFBRSxRQUFtQixFQUFFLFdBQXFCLEVBQ2pJLE1BQTRCO1FBQ2hDLE1BQU0sU0FBUyxHQUFHLElBQUksQ0FBQyxRQUFRLENBQUMsU0FBUyxDQUFDLENBQUMsYUFBYTtRQUN4RCxNQUFNLGFBQWEsR0FBZ0IsTUFBcUIsQ0FBQyxDQUFDLG1CQUFtQjtRQUU3RSxzRUFBc0U7UUFDdEUsOEZBQThGO1FBQzlGLDBIQUEwSDtRQUMxSCwwR0FBMEc7UUFDMUcsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsb0JBQW9CLEtBQUssSUFBSSxDQUFDLENBQUM7WUFDN0MsSUFBSSxDQUFDLG9CQUFvQixDQUFDLENBQUM7WUFDM0IsU0FBUyxDQUFDLHFCQUFxQixFQUFFLENBQUMsTUFBTTtnQkFDcEMsYUFBYSxDQUFDLHFCQUFxQixFQUFFLENBQUMsTUFBTSxHQUFHLGNBQWMsQ0FBQyxxQkFBcUIsRUFBRSxDQUFDLE1BQU0sQ0FBQztRQUVyRywrRkFBK0Y7UUFDL0YsY0FBYyxDQUFDLEtBQUssQ0FBQyxLQUFLLEdBQUcsYUFBYSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUM7UUFDOUQsSUFBSSxDQUFDLFFBQVEsQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsUUFBUSxDQUFDLGlCQUFpQixHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGlCQUFpQixDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsaUJBQWlCLENBQUMsTUFBTSxDQUFDO1FBQ25JLElBQUksQ0FBQyxRQUFRLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUM7UUFFNUUsS0FBSyxDQUFDLFFBQVEsQ0FBQyxjQUFjLEVBQUUsRUFBRSxLQUFLLEVBQUUsYUFBYSxDQUFDLFdBQVcsRUFBRSxNQUFNLEVBQUUsYUFBYSxDQUFDLFlBQVksRUFBRSxFQUMzRixRQUFRLEVBQUUsV0FBVyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBQ3RELENBQUM7Q0FDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQ29ubmVjdGVkUG9zaXRpb25pbmdTdHJhdGVneSB9IGZyb20gJy4uL3NlcnZpY2VzL3B1YmxpY19hcGknO1xuaW1wb3J0IHsgVmVydGljYWxBbGlnbm1lbnQsIFBvc2l0aW9uU2V0dGluZ3MsIFBvaW50IH0gZnJvbSAnLi4vc2VydmljZXMvb3ZlcmxheS91dGlsaXRpZXMnO1xuaW1wb3J0IHsgSWd4Rm9yT2ZTeW5jU2VydmljZSB9IGZyb20gJy4uL2RpcmVjdGl2ZXMvZm9yLW9mL2Zvcl9vZi5zeW5jLnNlcnZpY2UnO1xuaW1wb3J0IHsgc2NhbGVJblZlckJvdHRvbSwgc2NhbGVJblZlclRvcCB9IGZyb20gJ2lnbml0ZXVpLWFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5cblxuQERpcmVjdGl2ZSh7XG4gICAgc2VsZWN0b3I6ICdbaWd4R3JpZEJvZHldJyxcbiAgICBwcm92aWRlcnM6IFtJZ3hGb3JPZlN5bmNTZXJ2aWNlXSxcbiAgICBzdGFuZGFsb25lOiB0cnVlXG59KVxuZXhwb3J0IGNsYXNzIElneEdyaWRCb2R5RGlyZWN0aXZlIHt9XG5cblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUm93RWRpdFBvc2l0aW9uU2V0dGluZ3MgZXh0ZW5kcyBQb3NpdGlvblNldHRpbmdzIHtcbiAgICBjb250YWluZXI/OiBIVE1MRWxlbWVudDtcbn1cblxuLyoqXG4gKiBAaGlkZGVuXG4gKi9cbmV4cG9ydCBjbGFzcyBSb3dFZGl0UG9zaXRpb25TdHJhdGVneSBleHRlbmRzIENvbm5lY3RlZFBvc2l0aW9uaW5nU3RyYXRlZ3kge1xuICAgIHB1YmxpYyBpc1RvcCA9IGZhbHNlO1xuICAgIHB1YmxpYyBpc1RvcEluaXRpYWxQb3NpdGlvbiA9IG51bGw7XG4gICAgcHVibGljIG92ZXJyaWRlIHNldHRpbmdzOiBSb3dFZGl0UG9zaXRpb25TZXR0aW5ncztcbiAgICBwdWJsaWMgb3ZlcnJpZGUgcG9zaXRpb24oY29udGVudEVsZW1lbnQ6IEhUTUxFbGVtZW50LCBzaXplOiB7IHdpZHRoOiBudW1iZXI7IGhlaWdodDogbnVtYmVyIH0sIGRvY3VtZW50PzogRG9jdW1lbnQsIGluaXRpYWxDYWxsPzogYm9vbGVhbixcbiAgICAgICAgICAgIHRhcmdldD86IFBvaW50IHwgSFRNTEVsZW1lbnQpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgY29udGFpbmVyID0gdGhpcy5zZXR0aW5ncy5jb250YWluZXI7IC8vIGdyaWQudGJvZHlcbiAgICAgICAgY29uc3QgdGFyZ2V0RWxlbWVudDogSFRNTEVsZW1lbnQgPSB0YXJnZXQgYXMgSFRNTEVsZW1lbnQ7IC8vIGN1cnJlbnQgZ3JpZC5yb3dcblxuICAgICAgICAvLyBQb3NpdGlvbiBvZiB0aGUgb3ZlcmxheSBkZXBlbmRzIG9uIHRoZSBhdmFpbGFibGUgc3BhY2UgaW4gdGhlIGdyaWQuXG4gICAgICAgIC8vIElmIHRoZSBib3R0b20gc3BhY2UgaXMgbm90IGVub3VnaCB0aGVuIHRoZSB0aGUgcm93IG92ZXJsYXkgd2lsbCBzaG93IGF0IHRoZSB0b3Agb2YgdGhlIHJvdy5cbiAgICAgICAgLy8gT25jZSBzaG93biwgZWl0aGVyIHRvcCBvciBib3R0b20sIHRoZW4gdGhpcyBwb3NpdGlvbiBzdGF5cyB1bnRpbCB0aGUgb3ZlcmxheSBpcyBjbG9zZWQgKGlzVG9wSW5pdGlhbFBvc2l0aW9uIHByb3BlcnR5KSxcbiAgICAgICAgLy8gd2hpY2ggbWVhbnMgdGhhdCB3aGVuIHNjcm9sbGluZyB0aGVuIG92ZXJsYXkgbWF5IGhpZGUsIHdoaWxlIHRoZSByb3cgaXMgc3RpbGwgdmlzaWJsZSAoVVggcmVxdWlyZW1lbnQpLlxuICAgICAgICB0aGlzLmlzVG9wID0gdGhpcy5pc1RvcEluaXRpYWxQb3NpdGlvbiAhPT0gbnVsbCA/XG4gICAgICAgICAgICB0aGlzLmlzVG9wSW5pdGlhbFBvc2l0aW9uIDpcbiAgICAgICAgICAgIGNvbnRhaW5lci5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5ib3R0b20gPFxuICAgICAgICAgICAgICAgIHRhcmdldEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuYm90dG9tICsgY29udGVudEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0O1xuXG4gICAgICAgIC8vIFNldCB3aWR0aCBvZiB0aGUgcm93IGVkaXRpbmcgb3ZlcmxheSB0byBlcXVhbCByb3cgd2lkdGgsIG90aGVyd2lzZSBpdCBmaXRzIDEwMCUgb2YgdGhlIGdyaWQuXG4gICAgICAgIGNvbnRlbnRFbGVtZW50LnN0eWxlLndpZHRoID0gdGFyZ2V0RWxlbWVudC5jbGllbnRXaWR0aCArICdweCc7XG4gICAgICAgIHRoaXMuc2V0dGluZ3MudmVydGljYWxTdGFydFBvaW50ID0gdGhpcy5zZXR0aW5ncy52ZXJ0aWNhbERpcmVjdGlvbiA9IHRoaXMuaXNUb3AgPyBWZXJ0aWNhbEFsaWdubWVudC5Ub3AgOiBWZXJ0aWNhbEFsaWdubWVudC5Cb3R0b207XG4gICAgICAgIHRoaXMuc2V0dGluZ3Mub3BlbkFuaW1hdGlvbiA9IHRoaXMuaXNUb3AgPyBzY2FsZUluVmVyQm90dG9tIDogc2NhbGVJblZlclRvcDtcblxuICAgICAgICBzdXBlci5wb3NpdGlvbihjb250ZW50RWxlbWVudCwgeyB3aWR0aDogdGFyZ2V0RWxlbWVudC5jbGllbnRXaWR0aCwgaGVpZ2h0OiB0YXJnZXRFbGVtZW50LmNsaWVudEhlaWdodCB9LFxuICAgICAgICAgICAgICAgICAgICBkb2N1bWVudCwgaW5pdGlhbENhbGwsIHRhcmdldEVsZW1lbnQpO1xuICAgIH1cbn1cbiJdfQ==