import { Directive, HostListener, Inject } from '@angular/core';
import { IGX_GRID_BASE } from './common/grid.interface';
import * as i0 from "@angular/core";
/** @hidden @internal */
export class IgxRowEditTemplateDirective {
    static ngTemplateContextGuard(_directive, context) {
        return true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxRowEditTemplateDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.4", type: IgxRowEditTemplateDirective, isStandalone: true, selector: "[igxRowEdit]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxRowEditTemplateDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxRowEdit]',
                    standalone: true
                }]
        }] });
/** @hidden @internal */
export class IgxRowEditTextDirective {
    static ngTemplateContextGuard(_directive, context) {
        return true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxRowEditTextDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.4", type: IgxRowEditTextDirective, isStandalone: true, selector: "[igxRowEditText]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxRowEditTextDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxRowEditText]',
                    standalone: true
                }]
        }] });
/** @hidden @internal */
export class IgxRowAddTextDirective {
    static ngTemplateContextGuard(_directive, context) {
        return true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxRowAddTextDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.4", type: IgxRowAddTextDirective, isStandalone: true, selector: "[igxRowAddText]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxRowAddTextDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxRowAddText]',
                    standalone: true
                }]
        }] });
/** @hidden @internal */
export class IgxRowEditActionsDirective {
    static ngTemplateContextGuard(_directive, context) {
        return true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxRowEditActionsDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.4", type: IgxRowEditActionsDirective, isStandalone: true, selector: "[igxRowEditActions]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxRowEditActionsDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxRowEditActions]',
                    standalone: true
                }]
        }] });
// TODO: Refactor circular ref, deps and logic
/** @hidden @internal */
export class IgxRowEditTabStopDirective {
    constructor(grid, element) {
        this.grid = grid;
        this.element = element;
    }
    handleTab(event) {
        event.stopPropagation();
        if ((this.grid.rowEditTabs.last === this && !event.shiftKey) ||
            (this.grid.rowEditTabs.first === this && event.shiftKey)) {
            this.move(event);
        }
    }
    handleEscape(event) {
        this.grid.crudService.endEdit(false, event);
        this.grid.tbody.nativeElement.focus();
    }
    handleEnter(event) {
        event.stopPropagation();
    }
    /**
     * Moves focus to first/last editable cell in the editable row and put the cell in edit mode.
     * If cell is out of view first scrolls to the cell
     *
     * @param event keyboard event containing information about whether SHIFT key was pressed
     */
    move(event) {
        event.preventDefault();
        this.currentCellIndex = event.shiftKey ? this.grid.lastEditableColumnIndex : this.grid.firstEditableColumnIndex;
        this.grid.navigation.activeNode.row = this.grid.crudService.rowInEditMode.index;
        this.grid.navigation.activeNode.column = this.currentCellIndex;
        this.grid.navigateTo(this.grid.crudService.rowInEditMode.index, this.currentCellIndex, (obj) => {
            obj.target.activate(event);
            this.grid.cdr.detectChanges();
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxRowEditTabStopDirective, deps: [{ token: IGX_GRID_BASE }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.4", type: IgxRowEditTabStopDirective, isStandalone: true, selector: "[igxRowEditTabStop]", host: { listeners: { "keydown.Tab": "handleTab($event)", "keydown.Shift.Tab": "handleTab($event)", "keydown.Escape": "handleEscape($event)", "keydown.Enter": "handleEnter($event)" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxRowEditTabStopDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: `[igxRowEditTabStop]`,
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [IGX_GRID_BASE]
                }] }, { type: i0.ElementRef }], propDecorators: { handleTab: [{
                type: HostListener,
                args: ['keydown.Tab', [`$event`]]
            }, {
                type: HostListener,
                args: ['keydown.Shift.Tab', [`$event`]]
            }], handleEscape: [{
                type: HostListener,
                args: ['keydown.Escape', [`$event`]]
            }], handleEnter: [{
                type: HostListener,
                args: ['keydown.Enter', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,