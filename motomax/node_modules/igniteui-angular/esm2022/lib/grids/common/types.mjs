import { InjectionToken } from '@angular/core';
/**
 * Injection token for accessing the grid transaction object.
 * This allows injecting the grid transaction object into components or services.
 */
export const IgxGridTransaction = /*@__PURE__*/ new InjectionToken('IgxGridTransaction');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidHlwZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi8uLi9wcm9qZWN0cy9pZ25pdGV1aS1hbmd1bGFyL3NyYy9saWIvZ3JpZHMvY29tbW9uL3R5cGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFxRy9DOzs7R0FHRztBQUNILE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLGFBQWEsQ0FBQSxJQUFJLGNBQWMsQ0FBUyxvQkFBb0IsQ0FBQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuLyogdHNQbGFpbkludGVyZmFjZSAqL1xuLyogbWFyc2hhbEJ5VmFsdWUgKi9cbi8qKlxuICogUmVwcmVzZW50cyBhIHJhbmdlIHNlbGVjdGlvbiBiZXR3ZWVuIGNlcnRhaW4gcm93cyBhbmQgY29sdW1ucyBvZiB0aGUgZ3JpZC5cbiAqIFJhbmdlIHNlbGVjdGlvbiBjYW4gYmUgbWFkZSBlaXRoZXIgdGhyb3VnaCBkcmFnIHNlbGVjdGlvbiBvciB0aHJvdWdoIGtleWJvYXJkIHNlbGVjdGlvbi5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBHcmlkU2VsZWN0aW9uUmFuZ2Uge1xuICAgIC8qKiBUaGUgaW5kZXggb2YgdGhlIHN0YXJ0aW5nIHJvdyBvZiB0aGUgc2VsZWN0aW9uIHJhbmdlLiAqL1xuICAgIHJvd1N0YXJ0OiBudW1iZXI7XG4gICAgIC8qKiBUaGUgaW5kZXggb2YgdGhlIGVuZGluZyByb3cgb2YgdGhlIHNlbGVjdGlvbiByYW5nZS4gKi9cbiAgICByb3dFbmQ6IG51bWJlcjtcbiAgICAvKiBibGF6b3JBbHRlcm5hdGVUeXBlOiBkb3VibGUgKi9cbiAgICAvKipcbiAgICAgKiBUaGUgaWRlbnRpZmllciBvciBpbmRleCBvZiB0aGUgc3RhcnRpbmcgY29sdW1uIG9mIHRoZSBzZWxlY3Rpb24gcmFuZ2UuXG4gICAgICogSXQgY2FuIGJlIGVpdGhlciBhIHN0cmluZyByZXByZXNlbnRpbmcgdGhlIGNvbHVtbidzIGZpZWxkIG5hbWUgb3IgYSBudW1lcmljIGluZGV4LlxuICAgICAqL1xuICAgIGNvbHVtblN0YXJ0OiBzdHJpbmcgfCBudW1iZXI7XG4gICAgLyogYmxhem9yQWx0ZXJuYXRlVHlwZTogZG91YmxlICovXG4gICAgLyoqXG4gICAgICogVGhlIGlkZW50aWZpZXIgb3IgaW5kZXggb2YgdGhlIGVuZGluZyBjb2x1bW4gb2YgdGhlIHNlbGVjdGlvbiByYW5nZS5cbiAgICAgKiBJdCBjYW4gYmUgZWl0aGVyIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgY29sdW1uJ3MgZmllbGQgbmFtZSBvciBhIG51bWVyaWMgaW5kZXguXG4gICAgICovXG4gICAgY29sdW1uRW5kOiBzdHJpbmcgfCBudW1iZXI7XG59XG5cbi8qKlxuICogUmVwcmVzZW50cyBhIHNpbmdsZSBzZWxlY3RlZCBjZWxsIG9yIG5vZGUgaW4gYSBncmlkLlxuICovXG5leHBvcnQgaW50ZXJmYWNlIElTZWxlY3Rpb25Ob2RlIHtcbiAgICAvKipcbiAgICAgKiBUaGUgaW5kZXggb2YgdGhlIHNlbGVjdGVkIHJvdy5cbiAgICAgKi9cbiAgICByb3c6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiBUaGUgaW5kZXggb2YgdGhlIHNlbGVjdGVkIGNvbHVtbi5cbiAgICAgKi9cbiAgICBjb2x1bW46IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiAoT3B0aW9uYWwpXG4gICAgICogQWRkaXRpb25hbCBsYXlvdXQgaW5mb3JtYXRpb24gZm9yIG11bHRpLXJvdyBzZWxlY3Rpb24gbm9kZXMuXG4gICAgICovXG4gICAgbGF5b3V0PzogSU11bHRpUm93TGF5b3V0Tm9kZTtcbiAgICAvKipcbiAgICAgKiAoT3B0aW9uYWwpXG4gICAgICogSW5kaWNhdGVzIGlmIHRoZSBzZWxlY3RlZCBub2RlIGlzIGEgc3VtbWFyeSByb3cuXG4gICAgICogVGhpcyBwcm9wZXJ0eSBpcyB0cnVlIGlmIHRoZSBzZWxlY3RlZCByb3cgaXMgYSBzdW1tYXJ5IHJvdzsgb3RoZXJ3aXNlLCBpdCBpcyBmYWxzZS5cbiAgICAgKi9cbiAgICBpc1N1bW1hcnlSb3c/OiBib29sZWFuO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIElNdWx0aVJvd0xheW91dE5vZGUge1xuICAgIHJvd1N0YXJ0OiBudW1iZXI7XG4gICAgY29sU3RhcnQ6IG51bWJlcjtcbiAgICByb3dFbmQ6IG51bWJlcjtcbiAgICBjb2xFbmQ6IG51bWJlcjtcbiAgICBjb2x1bW5WaXNpYmxlSW5kZXg6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBzdGF0ZSBvZiB0aGUga2V5Ym9hcmQgd2hlbiBzZWxlY3RpbmcuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgSVNlbGVjdGlvbktleWJvYXJkU3RhdGUge1xuICAgIC8qKiBUaGUgc2VsZWN0ZWQgbm9kZSBpbiB0aGUgZ3JpZCwgaWYgYW55LiBDYW4gYmUgbnVsbCBpZiBubyBub2RlIGlzIHNlbGVjdGVkLiAqL1xuICAgIG5vZGU6IG51bGwgfCBJU2VsZWN0aW9uTm9kZTtcbiAgICAvKiogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIFNoaWZ0IGtleSBpcyBjdXJyZW50bHkgcHJlc3NlZCBkdXJpbmcgdGhlIHNlbGVjdGlvbi4gKi9cbiAgICBzaGlmdDogYm9vbGVhbjtcbiAgICAvKiogVGhlIHJhbmdlIG9mIHRoZSBzZWxlY3RlZCBjZWxscyBpbiB0aGUgZ3JpZC4gQ2FuIGJlIG51bGwgd2hlbiByZXNldHRpbmcgdGhlIHNlbGVjdGlvbi4gKi9cbiAgICByYW5nZTogR3JpZFNlbGVjdGlvblJhbmdlO1xuICAgIC8qKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgc2VsZWN0aW9uIGlzIGN1cnJlbnRseSBhY3RpdmUgKGJlaW5nIHBlcmZvcm1lZCkuIGBGYWxzZWAgd2hlbiByZXNldHRpbmcgdGhlIHNlbGVjdGlvbi4gICovXG4gICAgYWN0aXZlOiBib29sZWFuO1xufVxuXG4vKipcbiAqIFJlcHJlc2VudHMgdGhlIHN0YXRlIG9mIHRoZSBncmlkIHNlbGVjdGlvbiB1c2luZyBwb2ludGVyIGludGVyYWN0aW9ucyAobW91c2UpLlxuICogRXh0ZW5kcyBJU2VsZWN0aW9uS2V5Ym9hcmRTdGF0ZSB0byBpbmNsdWRlIHBvaW50ZXItc3BlY2lmaWMgcHJvcGVydGllcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJU2VsZWN0aW9uUG9pbnRlclN0YXRlIGV4dGVuZHMgSVNlbGVjdGlvbktleWJvYXJkU3RhdGUge1xuICAgIC8qKiBJbmRpY2F0ZXMgd2hldGhlciB0aGUgQ3RybCBrZXkgaXMgY3VycmVudGx5IHByZXNzZWQgZHVyaW5nIHRoZSBzZWxlY3Rpb24uICovXG4gICAgY3RybDogYm9vbGVhbjtcbiAgICAvKiogSW5kaWNhdGVzIHdoZXRoZXIgdGhlIHByaW1hcnkgcG9pbnRlciBidXR0b24gaXMgcHJlc3NlZCBkdXJpbmcgdGhlIHNlbGVjdGlvbiAoY2xpY2tlZCkuICovXG4gICAgcHJpbWFyeUJ1dHRvbjogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBzdGF0ZSBvZiB0aGUgY29sdW1ucyBpbiB0aGUgZ3JpZC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBJQ29sdW1uU2VsZWN0aW9uU3RhdGUge1xuICAgICAvKiogUmVwcmVzZW50cyB0aGUgZmllbGQgbmFtZSBvZiB0aGUgc2VsZWN0ZWQgY29sdW1uLCBpZiBhbnkuIENhbiBiZSBudWxsIGlmIG5vIGNvbHVtbiBpcyBzZWxlY3RlZC4gKi9cbiAgICBmaWVsZDogbnVsbCB8IHN0cmluZztcbiAgICAvKiogQW4gYXJyYXkgb2Ygc3RyaW5ncyByZXByZXNlbnRpbmcgdGhlIHJhbmdlcyBvZiBzZWxlY3RlZCBjb2x1bW5zIGluIHRoZSBncmlkLiAqL1xuICAgIHJhbmdlOiBzdHJpbmdbXTtcbn1cblxuLyoqXG4gKiBSZXByZXNlbnRzIHRoZSBvdmVyYWxsIHN0YXRlIG9mIGdyaWQgc2VsZWN0aW9uLCBjb21iaW5pbmcgYm90aCBrZXlib2FyZCBhbmQgcG9pbnRlciBpbnRlcmFjdGlvbiBzdGF0ZXMuXG4gKiBJdCBjYW4gYmUgZWl0aGVyIGFuIElTZWxlY3Rpb25LZXlib2FyZFN0YXRlIG9yIGFuIElTZWxlY3Rpb25Qb2ludGVyU3RhdGUuXG4gKi9cbmV4cG9ydCB0eXBlIFNlbGVjdGlvblN0YXRlID0gSVNlbGVjdGlvbktleWJvYXJkU3RhdGUgfCBJU2VsZWN0aW9uUG9pbnRlclN0YXRlO1xuXG4vKipcbiAqIEluamVjdGlvbiB0b2tlbiBmb3IgYWNjZXNzaW5nIHRoZSBncmlkIHRyYW5zYWN0aW9uIG9iamVjdC5cbiAqIFRoaXMgYWxsb3dzIGluamVjdGluZyB0aGUgZ3JpZCB0cmFuc2FjdGlvbiBvYmplY3QgaW50byBjb21wb25lbnRzIG9yIHNlcnZpY2VzLlxuICovXG5leHBvcnQgY29uc3QgSWd4R3JpZFRyYW5zYWN0aW9uID0gLypAX19QVVJFX18qL25ldyBJbmplY3Rpb25Ub2tlbjxzdHJpbmc+KCdJZ3hHcmlkVHJhbnNhY3Rpb24nKTtcbiJdfQ==