import { Component, ContentChild, HostBinding, Inject, Input, booleanAttribute } from '@angular/core';
import { pinLeft, unpinLeft } from '@igniteui/material-icons-extended';
import { IgxGridToolbarActionsComponent } from './common';
import { IGX_GRID_SERVICE_BASE } from '../common/grid.interface';
import { IgxToolbarToken } from './token';
import { IgxLinearProgressBarComponent } from '../../progressbar/progressbar.component';
import { IgxGridToolbarAdvancedFilteringComponent } from './grid-toolbar-advanced-filtering.component';
import { NgIf, NgTemplateOutlet } from '@angular/common';
import * as i0 from "@angular/core";
import * as i1 from "../../icon/icon.service";
/* blazorElement */
/* mustUseNGParentAnchor */
/* wcElementTag: igc-grid-toolbar */
/* blazorIndirectRender */
/* singleInstanceIdentifier */
/* contentParent: GridBaseDirective */
/* contentParent: RowIsland */
/* contentParent: HierarchicalGrid */
/* jsonAPIManageItemInMarkup */
/**
 * Provides a context-aware container component for UI operations for the grid components.
 *
 * @igxModule IgxGridToolbarModule
 * @igxParent IgxGridComponent, IgxTreeGridComponent, IgxHierarchicalGridComponent, IgxPivotGridComponent
 *
 */
export class IgxGridToolbarComponent {
    /**
     * Gets/sets the grid component for the toolbar component.
     *
     * @deprecated since version 17.1.0. No longer required to be set for the Hierarchical Grid child grid template
     *
     * @remarks
     * Usually you should not set this property in the context of the default grid/tree grid.
     * The only grids that demands this to be set are the hierarchical child grids. For additional
     * information check the toolbar topic.
     */
    get grid() {
        if (this._grid) {
            return this._grid;
        }
        return this.api.grid;
    }
    set grid(value) {
        this._grid = value;
    }
    /** Returns the native DOM element of the toolbar component */
    get nativeElement() {
        return this.element.nativeElement;
    }
    constructor(api, iconService, element) {
        this.api = api;
        this.iconService = iconService;
        this.element = element;
        /**
         * When enabled, shows the indeterminate progress bar.
         *
         * @remarks
         * By default this will be toggled, when the default exporter component is present
         * and an exporting is in progress.
         */
        this.showProgress = false;
        /**
         * @hidden
         * @internal
         */
        this.defaultStyle = true;
        this.iconService.addSvgIconFromText(pinLeft.name, pinLeft.value, 'imx-icons');
        this.iconService.addSvgIconFromText(unpinLeft.name, unpinLeft.value, 'imx-icons');
    }
    /** @hidden @internal */
    ngOnDestroy() {
        this.sub?.unsubscribe();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxGridToolbarComponent, deps: [{ token: IGX_GRID_SERVICE_BASE }, { token: i1.IgxIconService }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "18.2.4", type: IgxGridToolbarComponent, isStandalone: true, selector: "igx-grid-toolbar", inputs: { showProgress: ["showProgress", "showProgress", booleanAttribute], grid: "grid" }, host: { properties: { "class.igx-grid-toolbar": "this.defaultStyle" } }, providers: [{ provide: IgxToolbarToken, useExisting: IgxGridToolbarComponent }], queries: [{ propertyName: "hasActions", first: true, predicate: IgxGridToolbarActionsComponent, descendants: true }], ngImport: i0, template: "<ng-content select=\"[igxGridToolbarTitle],igx-grid-toolbar-title,igc-grid-toolbar-title\"></ng-content>\n\n<div class=\"igx-grid-toolbar__custom-content\">\n    <ng-content></ng-content>\n</div>\n\n<ng-template #actions>\n    <ng-content select=\"[igxGridToolbarActions],igx-grid-toolbar-actions,igc-grid-toolbar-actions\"></ng-content>\n</ng-template>\n<igx-grid-toolbar-actions *ngIf=\"!hasActions\">\n    <igx-grid-toolbar-advanced-filtering *ngIf=\"grid?.allowAdvancedFiltering\"></igx-grid-toolbar-advanced-filtering>\n</igx-grid-toolbar-actions>\n<ng-container *ngTemplateOutlet=\"actions\"></ng-container>\n\n<div class=\"igx-grid-toolbar__progress-bar\" *ngIf=\"showProgress\">\n    <igx-linear-bar [indeterminate]=\"true\"></igx-linear-bar>\n</div>\n", dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "component", type: IgxGridToolbarActionsComponent, selector: "igx-grid-toolbar-actions" }, { kind: "component", type: IgxGridToolbarAdvancedFilteringComponent, selector: "igx-grid-toolbar-advanced-filtering", inputs: ["overlaySettings"] }, { kind: "directive", type: NgTemplateOutlet, selector: "[ngTemplateOutlet]", inputs: ["ngTemplateOutletContext", "ngTemplateOutlet", "ngTemplateOutletInjector"] }, { kind: "component", type: IgxLinearProgressBarComponent, selector: "igx-linear-bar", inputs: ["striped", "role", "id", "textAlign", "textVisibility", "textTop", "text", "type"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxGridToolbarComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igx-grid-toolbar', providers: [{ provide: IgxToolbarToken, useExisting: IgxGridToolbarComponent }], standalone: true, imports: [NgIf, IgxGridToolbarActionsComponent, IgxGridToolbarAdvancedFilteringComponent, NgTemplateOutlet, IgxLinearProgressBarComponent], template: "<ng-content select=\"[igxGridToolbarTitle],igx-grid-toolbar-title,igc-grid-toolbar-title\"></ng-content>\n\n<div class=\"igx-grid-toolbar__custom-content\">\n    <ng-content></ng-content>\n</div>\n\n<ng-template #actions>\n    <ng-content select=\"[igxGridToolbarActions],igx-grid-toolbar-actions,igc-grid-toolbar-actions\"></ng-content>\n</ng-template>\n<igx-grid-toolbar-actions *ngIf=\"!hasActions\">\n    <igx-grid-toolbar-advanced-filtering *ngIf=\"grid?.allowAdvancedFiltering\"></igx-grid-toolbar-advanced-filtering>\n</igx-grid-toolbar-actions>\n<ng-container *ngTemplateOutlet=\"actions\"></ng-container>\n\n<div class=\"igx-grid-toolbar__progress-bar\" *ngIf=\"showProgress\">\n    <igx-linear-bar [indeterminate]=\"true\"></igx-linear-bar>\n</div>\n" }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [IGX_GRID_SERVICE_BASE]
                }] }, { type: i1.IgxIconService }, { type: i0.ElementRef }], propDecorators: { showProgress: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], grid: [{
                type: Input
            }], hasActions: [{
                type: ContentChild,
                args: [IgxGridToolbarActionsComponent]
            }], defaultStyle: [{
                type: HostBinding,
                args: ['class.igx-grid-toolbar']
            }] } });
//# sourceMappingURL=data:application/json;base64,