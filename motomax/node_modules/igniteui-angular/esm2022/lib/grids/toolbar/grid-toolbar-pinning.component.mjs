import { Component, ViewChild } from '@angular/core';
import { IgxColumnActionsComponent } from '../column-actions/column-actions.component';
import { IgxColumnPinningDirective } from '../column-actions/column-pinning.directive';
import { BaseToolbarColumnActionsDirective } from './grid-toolbar.base';
import { IgxToggleDirective } from '../../directives/toggle/toggle.directive';
import { IgxIconComponent } from '../../icon/icon.component';
import { IgxButtonDirective } from '../../directives/button/button.directive';
import { NgIf, AsyncPipe } from '@angular/common';
import * as i0 from "@angular/core";
/* blazorElement */
/* wcElementTag: igc-grid-toolbar-pinning */
/* singleInstanceIdentifier */
/* blazorIndirectRender */
/* jsonAPIManageItemInMarkup */
/**
 * Provides a pre-configured column pinning component for the grid.
 *
 *
 * @igxModule IgxGridToolbarModule
 * @igxParent IgxGridToolbarComponent
 *
 * @example
 * ```html
 *  <igx-grid-toolbar-pinning></igx-grid-toolbar-pinning>
 * ```
 */
export class IgxGridToolbarPinningComponent extends BaseToolbarColumnActionsDirective {
    set content(content) {
        this.columnActionsUI = content;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxGridToolbarPinningComponent, deps: null, target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.4", type: IgxGridToolbarPinningComponent, isStandalone: true, selector: "igx-grid-toolbar-pinning", viewQueries: [{ propertyName: "content", first: true, predicate: IgxColumnPinningDirective, descendants: true, read: IgxColumnActionsComponent }], usesInheritance: true, ngImport: i0, template: "<ng-container *ngIf=\"grid.rendered$ | async\">\n    <button\n        [title]=\"grid?.resourceStrings.igx_grid_toolbar_pinning_button_tooltip\"\n        #btn\n        igxButton=\"outlined\"\n        type=\"button\"\n        name=\"btnColumnPinning\" (click)=\"toggle(btn, ref, actions)\">\n        <igx-icon\n            family=\"default\"\n            [name]=\"!grid.pinnedColumnsCount ? 'unpin' : 'pin'\">\n        </igx-icon>\n        <span>{{ grid.pinnedColumnsCount }}</span>\n        <span>{{ buttonText }}</span>\n    </button>\n    <igx-column-actions #actions igxColumnPinning igxToggle (opened)=\"focusSearch(ref.element)\" #ref=\"toggle\"\n        [grid]=\"grid\" [title]=\"title || grid?.resourceStrings.igx_grid_toolbar_pinning_title\"\n        [filterColumnsPrompt]=\"prompt || grid?.resourceStrings.igx_grid_toolbar_actions_filter_prompt\"\n        [hideFilter]=\"hideFilter\" [filterCriteria]=\"filterCriteria\" [columnDisplayOrder]=\"columnDisplayOrder\" [columnsAreaMaxHeight]=\"columnsAreaMaxHeight\"\n        [uncheckAllText]=\"uncheckAllText\" [checkAllText]=\"checkAllText\" [indentation]=\"indentetion\">\n    </igx-column-actions>\n</ng-container>\n", dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: IgxButtonDirective, selector: "[igxButton]", inputs: ["selected", "igxButton", "igxLabel"], outputs: ["buttonSelected"] }, { kind: "component", type: IgxIconComponent, selector: "igx-icon", inputs: ["family", "name", "active"] }, { kind: "component", type: IgxColumnActionsComponent, selector: "igx-column-actions", inputs: ["grid", "indentation", "columnsAreaMaxHeight", "hideFilter", "title", "filterColumnsPrompt", "filterCriteria", "columnDisplayOrder", "uncheckAllText", "checkAllText", "id"], outputs: ["columnToggled"] }, { kind: "directive", type: IgxColumnPinningDirective, selector: "[igxColumnPinning]" }, { kind: "directive", type: IgxToggleDirective, selector: "[igxToggle]", inputs: ["id"], outputs: ["opened", "opening", "closed", "closing", "appended"], exportAs: ["toggle"] }, { kind: "pipe", type: AsyncPipe, name: "async" }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxGridToolbarPinningComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igx-grid-toolbar-pinning', standalone: true, imports: [NgIf, IgxButtonDirective, IgxIconComponent, IgxColumnActionsComponent, IgxColumnPinningDirective, IgxToggleDirective, AsyncPipe], template: "<ng-container *ngIf=\"grid.rendered$ | async\">\n    <button\n        [title]=\"grid?.resourceStrings.igx_grid_toolbar_pinning_button_tooltip\"\n        #btn\n        igxButton=\"outlined\"\n        type=\"button\"\n        name=\"btnColumnPinning\" (click)=\"toggle(btn, ref, actions)\">\n        <igx-icon\n            family=\"default\"\n            [name]=\"!grid.pinnedColumnsCount ? 'unpin' : 'pin'\">\n        </igx-icon>\n        <span>{{ grid.pinnedColumnsCount }}</span>\n        <span>{{ buttonText }}</span>\n    </button>\n    <igx-column-actions #actions igxColumnPinning igxToggle (opened)=\"focusSearch(ref.element)\" #ref=\"toggle\"\n        [grid]=\"grid\" [title]=\"title || grid?.resourceStrings.igx_grid_toolbar_pinning_title\"\n        [filterColumnsPrompt]=\"prompt || grid?.resourceStrings.igx_grid_toolbar_actions_filter_prompt\"\n        [hideFilter]=\"hideFilter\" [filterCriteria]=\"filterCriteria\" [columnDisplayOrder]=\"columnDisplayOrder\" [columnsAreaMaxHeight]=\"columnsAreaMaxHeight\"\n        [uncheckAllText]=\"uncheckAllText\" [checkAllText]=\"checkAllText\" [indentation]=\"indentetion\">\n    </igx-column-actions>\n</ng-container>\n" }]
        }], propDecorators: { content: [{
                type: ViewChild,
                args: [IgxColumnPinningDirective, { read: IgxColumnActionsComponent }]
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JpZC10b29sYmFyLXBpbm5pbmcuY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL2dyaWRzL3Rvb2xiYXIvZ3JpZC10b29sYmFyLXBpbm5pbmcuY29tcG9uZW50LnRzIiwiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL2dyaWRzL3Rvb2xiYXIvZ3JpZC10b29sYmFyLXBpbm5pbmcuY29tcG9uZW50Lmh0bWwiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDckQsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDdkYsT0FBTyxFQUFFLHlCQUF5QixFQUFFLE1BQU0sNENBQTRDLENBQUM7QUFDdkYsT0FBTyxFQUFFLGlDQUFpQyxFQUFFLE1BQU0scUJBQXFCLENBQUM7QUFDeEUsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDOUUsT0FBTyxFQUFFLGdCQUFnQixFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDN0QsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sMENBQTBDLENBQUM7QUFDOUUsT0FBTyxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQzs7QUFFbEQsbUJBQW1CO0FBQ25CLDRDQUE0QztBQUM1Qyw4QkFBOEI7QUFDOUIsMEJBQTBCO0FBQzFCLCtCQUErQjtBQUMvQjs7Ozs7Ozs7Ozs7R0FXRztBQU9ILE1BQU0sT0FBTyw4QkFBK0IsU0FBUSxpQ0FBaUM7SUFFakYsSUFDWSxPQUFPLENBQUMsT0FBa0M7UUFDbEQsSUFBSSxDQUFDLGVBQWUsR0FBRyxPQUFPLENBQUM7SUFDbkMsQ0FBQzs4R0FMUSw4QkFBOEI7a0dBQTlCLDhCQUE4Qiw2SEFFNUIseUJBQXlCLDJCQUFTLHlCQUF5QixvRENsQzFFLHVwQ0FxQkEsNENEU2MsSUFBSSw2RkFBRSxrQkFBa0Isb0lBQUUsZ0JBQWdCLDJGQUFFLHlCQUF5QixrUkFBRSx5QkFBeUIsK0RBQUUsa0JBQWtCLDBKQUFFLFNBQVM7OzJGQUVoSSw4QkFBOEI7a0JBTjFDLFNBQVM7K0JBQ0ksMEJBQTBCLGNBRXhCLElBQUksV0FDUCxDQUFDLElBQUksRUFBRSxrQkFBa0IsRUFBRSxnQkFBZ0IsRUFBRSx5QkFBeUIsRUFBRSx5QkFBeUIsRUFBRSxrQkFBa0IsRUFBRSxTQUFTLENBQUM7OEJBSzlILE9BQU87c0JBRGxCLFNBQVM7dUJBQUMseUJBQXlCLEVBQUUsRUFBQyxJQUFJLEVBQUUseUJBQXlCLEVBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIFZpZXdDaGlsZCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgSWd4Q29sdW1uQWN0aW9uc0NvbXBvbmVudCB9IGZyb20gJy4uL2NvbHVtbi1hY3Rpb25zL2NvbHVtbi1hY3Rpb25zLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJZ3hDb2x1bW5QaW5uaW5nRGlyZWN0aXZlIH0gZnJvbSAnLi4vY29sdW1uLWFjdGlvbnMvY29sdW1uLXBpbm5pbmcuZGlyZWN0aXZlJztcbmltcG9ydCB7IEJhc2VUb29sYmFyQ29sdW1uQWN0aW9uc0RpcmVjdGl2ZSB9IGZyb20gJy4vZ3JpZC10b29sYmFyLmJhc2UnO1xuaW1wb3J0IHsgSWd4VG9nZ2xlRGlyZWN0aXZlIH0gZnJvbSAnLi4vLi4vZGlyZWN0aXZlcy90b2dnbGUvdG9nZ2xlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBJZ3hJY29uQ29tcG9uZW50IH0gZnJvbSAnLi4vLi4vaWNvbi9pY29uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBJZ3hCdXR0b25EaXJlY3RpdmUgfSBmcm9tICcuLi8uLi9kaXJlY3RpdmVzL2J1dHRvbi9idXR0b24uZGlyZWN0aXZlJztcbmltcG9ydCB7IE5nSWYsIEFzeW5jUGlwZSB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbi8qIGJsYXpvckVsZW1lbnQgKi9cbi8qIHdjRWxlbWVudFRhZzogaWdjLWdyaWQtdG9vbGJhci1waW5uaW5nICovXG4vKiBzaW5nbGVJbnN0YW5jZUlkZW50aWZpZXIgKi9cbi8qIGJsYXpvckluZGlyZWN0UmVuZGVyICovXG4vKiBqc29uQVBJTWFuYWdlSXRlbUluTWFya3VwICovXG4vKipcbiAqIFByb3ZpZGVzIGEgcHJlLWNvbmZpZ3VyZWQgY29sdW1uIHBpbm5pbmcgY29tcG9uZW50IGZvciB0aGUgZ3JpZC5cbiAqXG4gKlxuICogQGlneE1vZHVsZSBJZ3hHcmlkVG9vbGJhck1vZHVsZVxuICogQGlneFBhcmVudCBJZ3hHcmlkVG9vbGJhckNvbXBvbmVudFxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBodG1sXG4gKiAgPGlneC1ncmlkLXRvb2xiYXItcGlubmluZz48L2lneC1ncmlkLXRvb2xiYXItcGlubmluZz5cbiAqIGBgYFxuICovXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ2lneC1ncmlkLXRvb2xiYXItcGlubmluZycsXG4gICAgdGVtcGxhdGVVcmw6ICcuL2dyaWQtdG9vbGJhci1waW5uaW5nLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdGFuZGFsb25lOiB0cnVlLFxuICAgIGltcG9ydHM6IFtOZ0lmLCBJZ3hCdXR0b25EaXJlY3RpdmUsIElneEljb25Db21wb25lbnQsIElneENvbHVtbkFjdGlvbnNDb21wb25lbnQsIElneENvbHVtblBpbm5pbmdEaXJlY3RpdmUsIElneFRvZ2dsZURpcmVjdGl2ZSwgQXN5bmNQaXBlXVxufSlcbmV4cG9ydCBjbGFzcyBJZ3hHcmlkVG9vbGJhclBpbm5pbmdDb21wb25lbnQgZXh0ZW5kcyBCYXNlVG9vbGJhckNvbHVtbkFjdGlvbnNEaXJlY3RpdmUge1xuXG4gICAgQFZpZXdDaGlsZChJZ3hDb2x1bW5QaW5uaW5nRGlyZWN0aXZlLCB7cmVhZDogSWd4Q29sdW1uQWN0aW9uc0NvbXBvbmVudH0pXG4gICAgcHJpdmF0ZSBzZXQgY29udGVudChjb250ZW50OiBJZ3hDb2x1bW5BY3Rpb25zQ29tcG9uZW50KSB7XG4gICAgICAgIHRoaXMuY29sdW1uQWN0aW9uc1VJID0gY29udGVudDtcbiAgICB9XG59XG4iLCI8bmctY29udGFpbmVyICpuZ0lmPVwiZ3JpZC5yZW5kZXJlZCQgfCBhc3luY1wiPlxuICAgIDxidXR0b25cbiAgICAgICAgW3RpdGxlXT1cImdyaWQ/LnJlc291cmNlU3RyaW5ncy5pZ3hfZ3JpZF90b29sYmFyX3Bpbm5pbmdfYnV0dG9uX3Rvb2x0aXBcIlxuICAgICAgICAjYnRuXG4gICAgICAgIGlneEJ1dHRvbj1cIm91dGxpbmVkXCJcbiAgICAgICAgdHlwZT1cImJ1dHRvblwiXG4gICAgICAgIG5hbWU9XCJidG5Db2x1bW5QaW5uaW5nXCIgKGNsaWNrKT1cInRvZ2dsZShidG4sIHJlZiwgYWN0aW9ucylcIj5cbiAgICAgICAgPGlneC1pY29uXG4gICAgICAgICAgICBmYW1pbHk9XCJkZWZhdWx0XCJcbiAgICAgICAgICAgIFtuYW1lXT1cIiFncmlkLnBpbm5lZENvbHVtbnNDb3VudCA/ICd1bnBpbicgOiAncGluJ1wiPlxuICAgICAgICA8L2lneC1pY29uPlxuICAgICAgICA8c3Bhbj57eyBncmlkLnBpbm5lZENvbHVtbnNDb3VudCB9fTwvc3Bhbj5cbiAgICAgICAgPHNwYW4+e3sgYnV0dG9uVGV4dCB9fTwvc3Bhbj5cbiAgICA8L2J1dHRvbj5cbiAgICA8aWd4LWNvbHVtbi1hY3Rpb25zICNhY3Rpb25zIGlneENvbHVtblBpbm5pbmcgaWd4VG9nZ2xlIChvcGVuZWQpPVwiZm9jdXNTZWFyY2gocmVmLmVsZW1lbnQpXCIgI3JlZj1cInRvZ2dsZVwiXG4gICAgICAgIFtncmlkXT1cImdyaWRcIiBbdGl0bGVdPVwidGl0bGUgfHwgZ3JpZD8ucmVzb3VyY2VTdHJpbmdzLmlneF9ncmlkX3Rvb2xiYXJfcGlubmluZ190aXRsZVwiXG4gICAgICAgIFtmaWx0ZXJDb2x1bW5zUHJvbXB0XT1cInByb21wdCB8fCBncmlkPy5yZXNvdXJjZVN0cmluZ3MuaWd4X2dyaWRfdG9vbGJhcl9hY3Rpb25zX2ZpbHRlcl9wcm9tcHRcIlxuICAgICAgICBbaGlkZUZpbHRlcl09XCJoaWRlRmlsdGVyXCIgW2ZpbHRlckNyaXRlcmlhXT1cImZpbHRlckNyaXRlcmlhXCIgW2NvbHVtbkRpc3BsYXlPcmRlcl09XCJjb2x1bW5EaXNwbGF5T3JkZXJcIiBbY29sdW1uc0FyZWFNYXhIZWlnaHRdPVwiY29sdW1uc0FyZWFNYXhIZWlnaHRcIlxuICAgICAgICBbdW5jaGVja0FsbFRleHRdPVwidW5jaGVja0FsbFRleHRcIiBbY2hlY2tBbGxUZXh0XT1cImNoZWNrQWxsVGV4dFwiIFtpbmRlbnRhdGlvbl09XCJpbmRlbnRldGlvblwiPlxuICAgIDwvaWd4LWNvbHVtbi1hY3Rpb25zPlxuPC9uZy1jb250YWluZXI+XG4iXX0=