import { Component, Directive, HostBinding } from '@angular/core';
import * as i0 from "@angular/core";
export class IgxExcelTextDirective {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxExcelTextDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.4", type: IgxExcelTextDirective, isStandalone: true, selector: "[excelText],excel-text", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxExcelTextDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[excelText],excel-text',
                    standalone: true
                }]
        }] });
export class IgxCSVTextDirective {
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxCSVTextDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.4", type: IgxCSVTextDirective, isStandalone: true, selector: "[csvText],csv-text", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxCSVTextDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[csvText],csv-text',
                    standalone: true
                }]
        }] });
/* blazorElement */
/* wcElementTag: igc-grid-toolbar-title */
/* blazorAlternateBaseType: GridToolbarContent */
/* blazorIndirectRender */
/* singleInstanceIdentifier */
/**
 * Provides a way to template the title portion of the toolbar in the grid.
 *
 * @igxModule IgxGridToolbarModule
 * @igxParent IgxGridToolbarComponent
 *
 * @example
 * ```html
 * <igx-grid-toolbar-title>My custom title</igx-grid-toolbar-title>
 * ```
 */
export class IgxGridToolbarTitleComponent {
    constructor() {
        /**
         * Host `class.igx-grid-toolbar__title` binding.
         *
         * @hidden
         * @internal
         */
        this.cssClass = 'igx-grid-toolbar__title';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxGridToolbarTitleComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.4", type: IgxGridToolbarTitleComponent, isStandalone: true, selector: "igx-grid-toolbar-title", host: { properties: { "class.igx-grid-toolbar__title": "this.cssClass" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxGridToolbarTitleComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'igx-grid-toolbar-title', template: '<ng-content></ng-content>',
                    standalone: true
                }]
        }], propDecorators: { cssClass: [{
                type: HostBinding,
                args: ['class.igx-grid-toolbar__title']
            }] } });
/* blazorElement */
/* blazorIndirectRender */
/* blazorAlternateBaseType: GridToolbarContent */
/* wcElementTag: igc-grid-toolbar-actions */
/* singleInstanceIdentifier */
/**
 * Provides a way to template the action portion of the toolbar in the grid.
 *
 * @igxModule IgxGridToolbarModule
 * @igxParent IgxGridToolbarComponent
 *
 * @example
 * ```html
 * <igx-grid-toolbar-actions>
 *  <some-toolbar-action-here />
 * </igx-grid-toolbar-actions>
 * ```
 */
export class IgxGridToolbarActionsComponent {
    constructor() {
        /**
         * Host `class.igx-grid-toolbar__actions` binding.
         *
         * @hidden
         * @internal
         */
        this.cssClass = 'igx-grid-toolbar__actions';
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxGridToolbarActionsComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "18.2.4", type: IgxGridToolbarActionsComponent, isStandalone: true, selector: "igx-grid-toolbar-actions", host: { properties: { "class.igx-grid-toolbar__actions": "this.cssClass" } }, ngImport: i0, template: '<ng-content></ng-content>', isInline: true }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxGridToolbarActionsComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'igx-grid-toolbar-actions', template: '<ng-content></ng-content>',
                    standalone: true
                }]
        }], propDecorators: { cssClass: [{
                type: HostBinding,
                args: ['class.igx-grid-toolbar__actions']
            }] } });
export class IgxGridToolbarDirective {
    constructor(template) {
        this.template = template;
    }
    static ngTemplateContextGuard(_dir, ctx) {
        return true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxGridToolbarDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.4", type: IgxGridToolbarDirective, isStandalone: true, selector: "[igxGridToolbar]", ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxGridToolbarDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxGridToolbar]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.TemplateRef }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL2dyaWRzL3Rvb2xiYXIvY29tbW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBZSxNQUFNLGVBQWUsQ0FBQzs7QUFPL0UsTUFBTSxPQUFPLHFCQUFxQjs4R0FBckIscUJBQXFCO2tHQUFyQixxQkFBcUI7OzJGQUFyQixxQkFBcUI7a0JBSmpDLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLHdCQUF3QjtvQkFDbEMsVUFBVSxFQUFFLElBQUk7aUJBQ25COztBQU9ELE1BQU0sT0FBTyxtQkFBbUI7OEdBQW5CLG1CQUFtQjtrR0FBbkIsbUJBQW1COzsyRkFBbkIsbUJBQW1CO2tCQUovQixTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSxvQkFBb0I7b0JBQzlCLFVBQVUsRUFBRSxJQUFJO2lCQUNuQjs7QUFHRCxtQkFBbUI7QUFDbkIsMENBQTBDO0FBQzFDLGlEQUFpRDtBQUNqRCwwQkFBMEI7QUFDMUIsOEJBQThCO0FBQzlCOzs7Ozs7Ozs7O0dBVUc7QUFLSCxNQUFNLE9BQU8sNEJBQTRCO0lBSnpDO1FBS0k7Ozs7O1dBS0c7UUFFSSxhQUFRLEdBQUcseUJBQXlCLENBQUM7S0FDL0M7OEdBVFksNEJBQTRCO2tHQUE1Qiw0QkFBNEIsOEpBSFMsMkJBQTJCOzsyRkFHaEUsNEJBQTRCO2tCQUp4QyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSx3QkFBd0IsRUFBRSxRQUFRLEVBQUUsMkJBQTJCO29CQUN6RSxVQUFVLEVBQUUsSUFBSTtpQkFDbkI7OEJBU1UsUUFBUTtzQkFEZCxXQUFXO3VCQUFDLCtCQUErQjs7QUFJaEQsbUJBQW1CO0FBQ25CLDBCQUEwQjtBQUMxQixpREFBaUQ7QUFDakQsNENBQTRDO0FBQzVDLDhCQUE4QjtBQUM5Qjs7Ozs7Ozs7Ozs7O0dBWUc7QUFLSCxNQUFNLE9BQU8sOEJBQThCO0lBSjNDO1FBS0k7Ozs7O1dBS0c7UUFFSSxhQUFRLEdBQUcsMkJBQTJCLENBQUM7S0FDaEQ7OEdBVFcsOEJBQThCO2tHQUE5Qiw4QkFBOEIsa0tBSFMsMkJBQTJCOzsyRkFHbEUsOEJBQThCO2tCQUoxQyxTQUFTO21CQUFDO29CQUNQLFFBQVEsRUFBRSwwQkFBMEIsRUFBRSxRQUFRLEVBQUUsMkJBQTJCO29CQUMzRSxVQUFVLEVBQUUsSUFBSTtpQkFDbkI7OEJBU1UsUUFBUTtzQkFEZCxXQUFXO3VCQUFDLGlDQUFpQzs7QUFZbEQsTUFBTSxPQUFPLHVCQUF1QjtJQUNoQyxZQUFtQixRQUFvRDtRQUFwRCxhQUFRLEdBQVIsUUFBUSxDQUE0QztJQUFHLENBQUM7SUFFcEUsTUFBTSxDQUFDLHNCQUFzQixDQUFDLElBQTZCLEVBQzlELEdBQVk7UUFDWixPQUFPLElBQUksQ0FBQTtJQUNmLENBQUM7OEdBTlEsdUJBQXVCO2tHQUF2Qix1QkFBdUI7OzJGQUF2Qix1QkFBdUI7a0JBSm5DLFNBQVM7bUJBQUM7b0JBQ1AsUUFBUSxFQUFFLGtCQUFrQjtvQkFDNUIsVUFBVSxFQUFFLElBQUk7aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50LCBEaXJlY3RpdmUsIEhvc3RCaW5kaW5nLCBUZW1wbGF0ZVJlZiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgR3JpZFR5cGUgfSBmcm9tICcuLi9jb21tb24vZ3JpZC5pbnRlcmZhY2UnO1xuXG5ARGlyZWN0aXZlKHsvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQGFuZ3VsYXItZXNsaW50L2RpcmVjdGl2ZS1zZWxlY3RvclxuICAgIHNlbGVjdG9yOiAnW2V4Y2VsVGV4dF0sZXhjZWwtdGV4dCcsXG4gICAgc3RhbmRhbG9uZTogdHJ1ZVxufSlcbmV4cG9ydCBjbGFzcyBJZ3hFeGNlbFRleHREaXJlY3RpdmUgeyB9XG5cbkBEaXJlY3RpdmUoey8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAYW5ndWxhci1lc2xpbnQvZGlyZWN0aXZlLXNlbGVjdG9yXG4gICAgc2VsZWN0b3I6ICdbY3N2VGV4dF0sY3N2LXRleHQnLFxuICAgIHN0YW5kYWxvbmU6IHRydWVcbn0pXG5leHBvcnQgY2xhc3MgSWd4Q1NWVGV4dERpcmVjdGl2ZSB7IH1cblxuLyogYmxhem9yRWxlbWVudCAqL1xuLyogd2NFbGVtZW50VGFnOiBpZ2MtZ3JpZC10b29sYmFyLXRpdGxlICovXG4vKiBibGF6b3JBbHRlcm5hdGVCYXNlVHlwZTogR3JpZFRvb2xiYXJDb250ZW50ICovXG4vKiBibGF6b3JJbmRpcmVjdFJlbmRlciAqL1xuLyogc2luZ2xlSW5zdGFuY2VJZGVudGlmaWVyICovXG4vKipcbiAqIFByb3ZpZGVzIGEgd2F5IHRvIHRlbXBsYXRlIHRoZSB0aXRsZSBwb3J0aW9uIG9mIHRoZSB0b29sYmFyIGluIHRoZSBncmlkLlxuICpcbiAqIEBpZ3hNb2R1bGUgSWd4R3JpZFRvb2xiYXJNb2R1bGVcbiAqIEBpZ3hQYXJlbnQgSWd4R3JpZFRvb2xiYXJDb21wb25lbnRcbiAqXG4gKiBAZXhhbXBsZVxuICogYGBgaHRtbFxuICogPGlneC1ncmlkLXRvb2xiYXItdGl0bGU+TXkgY3VzdG9tIHRpdGxlPC9pZ3gtZ3JpZC10b29sYmFyLXRpdGxlPlxuICogYGBgXG4gKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnaWd4LWdyaWQtdG9vbGJhci10aXRsZScsIHRlbXBsYXRlOiAnPG5nLWNvbnRlbnQ+PC9uZy1jb250ZW50PicsXG4gICAgc3RhbmRhbG9uZTogdHJ1ZVxufSlcbmV4cG9ydCBjbGFzcyBJZ3hHcmlkVG9vbGJhclRpdGxlQ29tcG9uZW50IHtcbiAgICAvKipcbiAgICAgKiBIb3N0IGBjbGFzcy5pZ3gtZ3JpZC10b29sYmFyX190aXRsZWAgYmluZGluZy5cbiAgICAgKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1ncmlkLXRvb2xiYXJfX3RpdGxlJylcbiAgICBwdWJsaWMgY3NzQ2xhc3MgPSAnaWd4LWdyaWQtdG9vbGJhcl9fdGl0bGUnO1xufVxuXG4vKiBibGF6b3JFbGVtZW50ICovXG4vKiBibGF6b3JJbmRpcmVjdFJlbmRlciAqL1xuLyogYmxhem9yQWx0ZXJuYXRlQmFzZVR5cGU6IEdyaWRUb29sYmFyQ29udGVudCAqL1xuLyogd2NFbGVtZW50VGFnOiBpZ2MtZ3JpZC10b29sYmFyLWFjdGlvbnMgKi9cbi8qIHNpbmdsZUluc3RhbmNlSWRlbnRpZmllciAqL1xuLyoqXG4gKiBQcm92aWRlcyBhIHdheSB0byB0ZW1wbGF0ZSB0aGUgYWN0aW9uIHBvcnRpb24gb2YgdGhlIHRvb2xiYXIgaW4gdGhlIGdyaWQuXG4gKlxuICogQGlneE1vZHVsZSBJZ3hHcmlkVG9vbGJhck1vZHVsZVxuICogQGlneFBhcmVudCBJZ3hHcmlkVG9vbGJhckNvbXBvbmVudFxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGBodG1sXG4gKiA8aWd4LWdyaWQtdG9vbGJhci1hY3Rpb25zPlxuICogIDxzb21lLXRvb2xiYXItYWN0aW9uLWhlcmUgLz5cbiAqIDwvaWd4LWdyaWQtdG9vbGJhci1hY3Rpb25zPlxuICogYGBgXG4gKi9cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnaWd4LWdyaWQtdG9vbGJhci1hY3Rpb25zJywgdGVtcGxhdGU6ICc8bmctY29udGVudD48L25nLWNvbnRlbnQ+JyxcbiAgICBzdGFuZGFsb25lOiB0cnVlXG59KVxuZXhwb3J0IGNsYXNzIElneEdyaWRUb29sYmFyQWN0aW9uc0NvbXBvbmVudCB7XG4gICAgLyoqXG4gICAgICogSG9zdCBgY2xhc3MuaWd4LWdyaWQtdG9vbGJhcl9fYWN0aW9uc2AgYmluZGluZy5cbiAgICAgKlxuICAgICAqIEBoaWRkZW5cbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBASG9zdEJpbmRpbmcoJ2NsYXNzLmlneC1ncmlkLXRvb2xiYXJfX2FjdGlvbnMnKVxuICAgIHB1YmxpYyBjc3NDbGFzcyA9ICdpZ3gtZ3JpZC10b29sYmFyX19hY3Rpb25zJztcbiB9XG5cbmV4cG9ydCBpbnRlcmZhY2UgSWd4R3JpZFRvb2xiYXJUZW1wbGF0ZUNvbnRleHQge1xuICAgICRpbXBsaWNpdDogR3JpZFR5cGU7XG59XG5cbkBEaXJlY3RpdmUoe1xuICAgIHNlbGVjdG9yOiAnW2lneEdyaWRUb29sYmFyXScsXG4gICAgc3RhbmRhbG9uZTogdHJ1ZVxufSlcbmV4cG9ydCBjbGFzcyBJZ3hHcmlkVG9vbGJhckRpcmVjdGl2ZSB7XG4gICAgY29uc3RydWN0b3IocHVibGljIHRlbXBsYXRlOiBUZW1wbGF0ZVJlZjxJZ3hHcmlkVG9vbGJhclRlbXBsYXRlQ29udGV4dD4pIHt9XG5cbiAgICBwdWJsaWMgc3RhdGljIG5nVGVtcGxhdGVDb250ZXh0R3VhcmQoX2RpcjogSWd4R3JpZFRvb2xiYXJEaXJlY3RpdmUsXG4gICAgICAgIGN0eDogdW5rbm93bik6IGN0eCBpcyBJZ3hHcmlkVG9vbGJhclRlbXBsYXRlQ29udGV4dCB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgfVxufVxuIl19