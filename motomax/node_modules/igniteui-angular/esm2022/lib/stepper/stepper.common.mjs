import { InjectionToken } from '@angular/core';
import { CarouselAnimationType } from '../carousel/enums';
// Enums
export const IgxStepperOrientation = {
    Horizontal: 'horizontal',
    Vertical: 'vertical'
};
export const IgxStepType = {
    Indicator: 'indicator',
    Title: 'title',
    Full: 'full'
};
export const IgxStepperTitlePosition = {
    Bottom: 'bottom',
    Top: 'top',
    End: 'end',
    Start: 'start'
};
export const VerticalAnimationType = {
    Grow: 'grow',
    Fade: 'fade',
    None: 'none'
};
export const HorizontalAnimationType = {
    ...CarouselAnimationType
};
// Token
export const IGX_STEPPER_COMPONENT = /*@__PURE__*/ new InjectionToken('IgxStepperToken');
export const IGX_STEP_COMPONENT = /*@__PURE__*/ new InjectionToken('IgxStepToken');
//# sourceMappingURL=data:application/json;base64,