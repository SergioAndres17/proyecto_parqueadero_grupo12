import { Injectable } from '@angular/core';
import { IgxStepperOrientation } from './stepper.common';
import * as i0 from "@angular/core";
/** @hidden @internal */
export class IgxStepperService {
    constructor() {
        this.collapsingSteps = new Set();
        this.linearDisabledSteps = new Set();
        this.visitedSteps = new Set();
    }
    /**
     * Activates the step, fires the steps change event and plays animations.
     */
    expand(step) {
        if (this.activeStep === step) {
            return;
        }
        const cancel = this.emitActivatingEvent(step);
        if (cancel) {
            return;
        }
        this.collapsingSteps.delete(step);
        this.previousActiveStep = this.activeStep;
        this.activeStep = step;
        this.activeStep.activeChange.emit(true);
        this.collapsingSteps.add(this.previousActiveStep);
        this.visitedSteps.add(this.activeStep);
        if (this.stepper.orientation === IgxStepperOrientation.Vertical) {
            this.previousActiveStep.playCloseAnimation(this.previousActiveStep.contentContainer);
            this.activeStep.cdr.detectChanges();
            this.activeStep.playOpenAnimation(this.activeStep.contentContainer);
        }
        else {
            this.activeStep.cdr.detectChanges();
            this.stepper.playHorizontalAnimations();
        }
    }
    /**
     * Activates the step and fires the steps change event without playing animations.
     */
    expandThroughApi(step) {
        if (this.activeStep === step) {
            return;
        }
        this.collapsingSteps.clear();
        this.previousActiveStep = this.activeStep;
        this.activeStep = step;
        if (this.previousActiveStep) {
            this.previousActiveStep.tabIndex = -1;
        }
        this.activeStep.tabIndex = 0;
        this.visitedSteps.add(this.activeStep);
        this.activeStep.cdr.markForCheck();
        this.previousActiveStep?.cdr.markForCheck();
        this.activeStep.activeChange.emit(true);
        this.previousActiveStep?.activeChange.emit(false);
    }
    /**
     * Collapses the currently active step and fires the change event.
     */
    collapse(step) {
        if (this.activeStep === step) {
            return;
        }
        step.activeChange.emit(false);
        this.collapsingSteps.delete(step);
    }
    /**
     * Determines the steps that should be marked as visited based on the active step.
     */
    calculateVisitedSteps() {
        this.stepper.steps.forEach(step => {
            if (step.index <= this.activeStep.index) {
                this.visitedSteps.add(step);
            }
            else {
                this.visitedSteps.delete(step);
            }
        });
    }
    /**
     * Determines the steps that should be disabled in linear mode based on the validity of the active step.
     */
    calculateLinearDisabledSteps() {
        if (!this.activeStep) {
            return;
        }
        if (this.activeStep.isValid) {
            const firstRequiredIndex = this.getNextRequiredStep();
            if (firstRequiredIndex !== -1) {
                this.updateLinearDisabledSteps(firstRequiredIndex);
            }
            else {
                this.linearDisabledSteps.clear();
            }
        }
        else {
            this.stepper.steps.forEach(s => {
                if (s.index > this.activeStep.index) {
                    this.linearDisabledSteps.add(s);
                }
            });
        }
    }
    emitActivatingEvent(step) {
        const args = {
            owner: this.stepper,
            newIndex: step.index,
            oldIndex: this.activeStep.index,
            cancel: false
        };
        this.stepper.activeStepChanging.emit(args);
        return args.cancel;
    }
    /**
     * Updates the linearDisabled steps from the current active step to the next required invalid step.
     *
     * @param toIndex the index of the last step that should be enabled.
     */
    updateLinearDisabledSteps(toIndex) {
        this.stepper.steps.forEach(s => {
            if (s.index > this.activeStep.index) {
                if (s.index <= toIndex) {
                    this.linearDisabledSteps.delete(s);
                }
                else {
                    this.linearDisabledSteps.add(s);
                }
            }
        });
    }
    getNextRequiredStep() {
        if (!this.activeStep) {
            return;
        }
        return this.stepper.steps.findIndex(s => s.index > this.activeStep.index && !s.optional && !s.disabled && !s.isValid);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxStepperService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxStepperService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxStepperService, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RlcHBlci5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL3N0ZXBwZXIvc3RlcHBlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFjLHFCQUFxQixFQUEwQixNQUFNLGtCQUFrQixDQUFDOztBQUc3Rix3QkFBd0I7QUFFeEIsTUFBTSxPQUFPLGlCQUFpQjtJQUQ5QjtRQU1XLG9CQUFlLEdBQTBCLElBQUksR0FBRyxFQUFvQixDQUFDO1FBQ3JFLHdCQUFtQixHQUEwQixJQUFJLEdBQUcsRUFBb0IsQ0FBQztRQUN6RSxpQkFBWSxHQUEwQixJQUFJLEdBQUcsRUFBb0IsQ0FBQztLQXFKNUU7SUFsSkc7O09BRUc7SUFDSSxNQUFNLENBQUMsSUFBc0I7UUFDaEMsSUFBSSxJQUFJLENBQUMsVUFBVSxLQUFLLElBQUksRUFBRSxDQUFDO1lBQzNCLE9BQU87UUFDWCxDQUFDO1FBRUQsTUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzlDLElBQUksTUFBTSxFQUFFLENBQUM7WUFDVCxPQUFPO1FBQ1gsQ0FBQztRQUVELElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRWxDLElBQUksQ0FBQyxrQkFBa0IsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDO1FBQzFDLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxVQUFVLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV4QyxJQUFJLENBQUMsZUFBZSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsa0JBQWtCLENBQUMsQ0FBQztRQUNsRCxJQUFJLENBQUMs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QUNsQyxJQUFJLENBQUMsQ0FBQyxLQUFLLElBQUksT0FBTyxFQUFFLENBQUM7b0JBQ3JCLElBQUksQ0FBQyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7Z0JBQ3ZDLENBQUM7cUJBQU0sQ0FBQztvQkFDSixJQUFJLENBQUMsbUJBQW1CLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO2dCQUNwQyxDQUFDO1lBQ0wsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVPLG1CQUFtQjtRQUN2QixJQUFJLENBQUMsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO1lBQ25CLE9BQU87UUFDWCxDQUFDO1FBQ0QsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FBSyxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsS0FBSyxJQUFJLENBQUMsQ0FBQyxDQUFDLFFBQVEsSUFBSSxDQUFDLENBQUMsQ0FBQyxRQUFRLElBQUksQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUM7SUFDMUgsQ0FBQzs4R0EzSlEsaUJBQWlCO2tIQUFqQixpQkFBaUI7OzJGQUFqQixpQkFBaUI7a0JBRDdCLFVBQVUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJZ3hTdGVwcGVyLCBJZ3hTdGVwcGVyT3JpZW50YXRpb24sIElTdGVwQ2hhbmdpbmdFdmVudEFyZ3MgfSBmcm9tICcuL3N0ZXBwZXIuY29tbW9uJztcbmltcG9ydCB7IElneFN0ZXBDb21wb25lbnQgfSBmcm9tICcuL3N0ZXAvc3RlcC5jb21wb25lbnQnO1xuXG4vKiogQGhpZGRlbiBAaW50ZXJuYWwgKi9cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBJZ3hTdGVwcGVyU2VydmljZSB7XG4gICAgcHVibGljIGFjdGl2ZVN0ZXA6IElneFN0ZXBDb21wb25lbnQ7XG4gICAgcHVibGljIHByZXZpb3VzQWN0aXZlU3RlcDogSWd4U3RlcENvbXBvbmVudDtcbiAgICBwdWJsaWMgZm9jdXNlZFN0ZXA6IElneFN0ZXBDb21wb25lbnQ7XG5cbiAgICBwdWJsaWMgY29sbGFwc2luZ1N0ZXBzOiBTZXQ8SWd4U3RlcENvbXBvbmVudD4gPSBuZXcgU2V0PElneFN0ZXBDb21wb25lbnQ+KCk7XG4gICAgcHVibGljIGxpbmVhckRpc2FibGVkU3RlcHM6IFNldDxJZ3hTdGVwQ29tcG9uZW50PiA9IG5ldyBTZXQ8SWd4U3RlcENvbXBvbmVudD4oKTtcbiAgICBwdWJsaWMgdmlzaXRlZFN0ZXBzOiBTZXQ8SWd4U3RlcENvbXBvbmVudD4gPSBuZXcgU2V0PElneFN0ZXBDb21wb25lbnQ+KCk7XG4gICAgcHVibGljIHN0ZXBwZXI6IElneFN0ZXBwZXI7XG5cbiAgICAvKipcbiAgICAgKiBBY3RpdmF0ZXMgdGhlIHN0ZXAsIGZpcmVzIHRoZSBzdGVwcyBjaGFuZ2UgZXZlbnQgYW5kIHBsYXlzIGFuaW1hdGlvbnMuXG4gICAgICovXG4gICAgcHVibGljIGV4cGFuZChzdGVwOiBJZ3hTdGVwQ29tcG9uZW50KTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZVN0ZXAgPT09IHN0ZXApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IGNhbmNlbCA9IHRoaXMuZW1pdEFjdGl2YXRpbmdFdmVudChzdGVwKTtcbiAgICAgICAgaWYgKGNhbmNlbCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5jb2xsYXBzaW5nU3RlcHMuZGVsZXRlKHN0ZXApO1xuXG4gICAgICAgIHRoaXMucHJldmlvdXNBY3RpdmVTdGVwID0gdGhpcy5hY3RpdmVTdGVwO1xuICAgICAgICB0aGlzLmFjdGl2ZVN0ZXAgPSBzdGVwO1xuICAgICAgICB0aGlzLmFjdGl2ZVN0ZXAuYWN0aXZlQ2hhbmdlLmVtaXQodHJ1ZSk7XG5cbiAgICAgICAgdGhpcy5jb2xsYXBzaW5nU3RlcHMuYWRkKHRoaXMucHJldmlvdXNBY3RpdmVTdGVwKTtcbiAgICAgICAgdGhpcy52aXNpdGVkU3RlcHMuYWRkKHRoaXMuYWN0aXZlU3RlcCk7XG5cbiAgICAgICAgaWYgKHRoaXMuc3RlcHBlci5vcmllbnRhdGlvbiA9PT0gSWd4U3RlcHBlck9yaWVudGF0aW9uLlZlcnRpY2FsKSB7XG4gICAgICAgICAgICB0aGlzLnByZXZpb3VzQWN0aXZlU3RlcC5wbGF5Q2xvc2VBbmltYXRpb24oXG4gICAgICAgICAgICAgICAgdGhpcy5wcmV2aW91c0FjdGl2ZVN0ZXAuY29udGVudENvbnRhaW5lclxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZlU3RlcC5jZHIuZGV0ZWN0Q2hhbmdlcygpO1xuXG4gICAgICAgICAgICB0aGlzLmFjdGl2ZVN0ZXAucGxheU9wZW5BbmltYXRpb24oXG4gICAgICAgICAgICAgICAgdGhpcy5hY3RpdmVTdGVwLmNvbnRlbnRDb250YWluZXJcbiAgICAgICAgICAgICk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFjdGl2ZVN0ZXAuY2RyLmRldGVjdENoYW5nZXMoKTtcbiAgICAgICAgICAgIHRoaXMuc3RlcHBlci5wbGF5SG9yaXpvbnRhbEFuaW1hdGlvbnMoKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEFjdGl2YXRlcyB0aGUgc3RlcCBhbmQgZmlyZXMgdGhlIHN0ZXBzIGNoYW5nZSBldmVudCB3aXRob3V0IHBsYXlpbmcgYW5pbWF0aW9ucy5cbiAgICAgKi9cbiAgICBwdWJsaWMgZXhwYW5kVGhyb3VnaEFwaShzdGVwOiBJZ3hTdGVwQ29tcG9uZW50KTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZVN0ZXAgPT09IHN0ZXApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuY29sbGFwc2luZ1N0ZXBzLmNsZWFyKCk7XG5cbiAgICAgICAgdGhpcy5wcmV2aW91c0FjdGl2ZVN0ZXAgPSB0aGlzLmFjdGl2ZVN0ZXA7XG4gICAgICAgIHRoaXMuYWN0aXZlU3RlcCA9IHN0ZXA7XG5cbiAgICAgICAgaWYgKHRoaXMucHJldmlvdXNBY3RpdmVTdGVwKSB7XG4gICAgICAgICAgICB0aGlzLnByZXZpb3VzQWN0aXZlU3RlcC50YWJJbmRleCA9IC0xO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWN0aXZlU3RlcC50YWJJbmRleCA9IDA7XG4gICAgICAgIHRoaXMudmlzaXRlZFN0ZXBzLmFkZCh0aGlzLmFjdGl2ZVN0ZXApO1xuXG4gICAgICAgIHRoaXMuYWN0aXZlU3RlcC5jZHIubWFya0ZvckNoZWNrKCk7XG4gICAgICAgIHRoaXMucHJldmlvdXNBY3RpdmVTdGVwPy5jZHIubWFya0ZvckNoZWNrKCk7XG5cbiAgICAgICAgdGhpcy5hY3RpdmVTdGVwLmFjdGl2ZUNoYW5nZS5lbWl0KHRydWUpO1xuICAgICAgICB0aGlzLnByZXZpb3VzQWN0aXZlU3RlcD8uYWN0aXZlQ2hhbmdlLmVtaXQoZmFsc2UpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIENvbGxhcHNlcyB0aGUgY3VycmVudGx5IGFjdGl2ZSBzdGVwIGFuZCBmaXJlcyB0aGUgY2hhbmdlIGV2ZW50LlxuICAgICAqL1xuICAgIHB1YmxpYyBjb2xsYXBzZShzdGVwOiBJZ3hTdGVwQ29tcG9uZW50KTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmFjdGl2ZVN0ZXAgPT09IHN0ZXApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBzdGVwLmFjdGl2ZUNoYW5nZS5lbWl0KGZhbHNlKTtcbiAgICAgICAgdGhpcy5jb2xsYXBzaW5nU3RlcHMuZGVsZXRlKHN0ZXApO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIERldGVybWluZXMgdGhlIHN0ZXBzIHRoYXQgc2hvdWxkIGJlIG1hcmtlZCBhcyB2aXNpdGVkIGJhc2VkIG9uIHRoZSBhY3RpdmUgc3RlcC5cbiAgICAgKi9cbiAgICBwdWJsaWMgY2FsY3VsYXRlVmlzaXRlZFN0ZXBzKCk6IHZvaWQge1xuICAgICAgICB0aGlzLnN0ZXBwZXIuc3RlcHMuZm9yRWFjaChzdGVwID0+IHtcbiAgICAgICAgICAgIGlmIChzdGVwLmluZGV4IDw9IHRoaXMuYWN0aXZlU3RlcC5pbmRleCkge1xuICAgICAgICAgICAgICAgIHRoaXMudmlzaXRlZFN0ZXBzLmFkZChzdGVwKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy52aXNpdGVkU3RlcHMuZGVsZXRlKHN0ZXApO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBEZXRlcm1pbmVzIHRoZSBzdGVwcyB0aGF0IHNob3VsZCBiZSBkaXNhYmxlZCBpbiBsaW5lYXIgbW9kZSBiYXNlZCBvbiB0aGUgdmFsaWRpdHkgb2YgdGhlIGFjdGl2ZSBzdGVwLlxuICAgICAqL1xuICAgIHB1YmxpYyBjYWxjdWxhdGVMaW5lYXJEaXNhYmxlZFN0ZXBzKCk6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMuYWN0aXZlU3RlcCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlU3RlcC5pc1ZhbGlkKSB7XG4gICAgICAgICAgICBjb25zdCBmaXJzdFJlcXVpcmVkSW5kZXggPSB0aGlzLmdldE5leHRSZXF1aXJlZFN0ZXAoKTtcbiAgICAgICAgICAgIGlmIChmaXJzdFJlcXVpcmVkSW5kZXggIT09IC0xKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51cGRhdGVMaW5lYXJEaXNhYmxlZFN0ZXBzKGZpcnN0UmVxdWlyZWRJbmRleCk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMubGluZWFyRGlzYWJsZWRTdGVwcy5jbGVhcigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zdGVwcGVyLnN0ZXBzLmZvckVhY2gocyA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHMuaW5kZXggPiB0aGlzLmFjdGl2ZVN0ZXAuaW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saW5lYXJEaXNhYmxlZFN0ZXBzLmFkZChzKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBlbWl0QWN0aXZhdGluZ0V2ZW50KHN0ZXA6IElneFN0ZXBDb21wb25lbnQpOiBib29sZWFuIHtcbiAgICAgICAgY29uc3QgYXJnczogSVN0ZXBDaGFuZ2luZ0V2ZW50QXJncyA9IHtcbiAgICAgICAgICAgIG93bmVyOiB0aGlzLnN0ZXBwZXIsXG4gICAgICAgICAgICBuZXdJbmRleDogc3RlcC5pbmRleCxcbiAgICAgICAgICAgIG9sZEluZGV4OiB0aGlzLmFjdGl2ZVN0ZXAuaW5kZXgsXG4gICAgICAgICAgICBjYW5jZWw6IGZhbHNlXG4gICAgICAgIH07XG5cbiAgICAgICAgdGhpcy5zdGVwcGVyLmFjdGl2ZVN0ZXBDaGFuZ2luZy5lbWl0KGFyZ3MpO1xuICAgICAgICByZXR1cm4gYXJncy5jYW5jZWw7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgbGluZWFyRGlzYWJsZWQgc3RlcHMgZnJvbSB0aGUgY3VycmVudCBhY3RpdmUgc3RlcCB0byB0aGUgbmV4dCByZXF1aXJlZCBpbnZhbGlkIHN0ZXAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdG9JbmRleCB0aGUgaW5kZXggb2YgdGhlIGxhc3Qgc3RlcCB0aGF0IHNob3VsZCBiZSBlbmFibGVkLlxuICAgICAqL1xuICAgIHByaXZhdGUgdXBkYXRlTGluZWFyRGlzYWJsZWRTdGVwcyh0b0luZGV4OiBudW1iZXIpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zdGVwcGVyLnN0ZXBzLmZvckVhY2gocyA9PiB7XG4gICAgICAgICAgICBpZiAocy5pbmRleCA+IHRoaXMuYWN0aXZlU3RlcC5pbmRleCkge1xuICAgICAgICAgICAgICAgIGlmIChzLmluZGV4IDw9IHRvSW5kZXgpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5saW5lYXJEaXNhYmxlZFN0ZXBzLmRlbGV0ZShzKTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpbmVhckRpc2FibGVkU3RlcHMuYWRkKHMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBnZXROZXh0UmVxdWlyZWRTdGVwKCk6IG51bWJlciB7XG4gICAgICAgIGlmICghdGhpcy5hY3RpdmVTdGVwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRoaXMuc3RlcHBlci5zdGVwcy5maW5kSW5kZXgocyA9PiBzLmluZGV4ID4gdGhpcy5hY3RpdmVTdGVwLmluZGV4ICYmICFzLm9wdGlvbmFsICYmICFzLmRpc2FibGVkICYmICFzLmlzVmFsaWQpO1xuICAgIH1cbn1cbiJdfQ==