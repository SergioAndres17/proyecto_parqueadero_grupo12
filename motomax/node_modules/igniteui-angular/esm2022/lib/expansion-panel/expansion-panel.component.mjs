import { Component, ContentChild, EventEmitter, HostBinding, Inject, Input, Output, booleanAttribute } from '@angular/core';
import { IgxAngularAnimationService } from '../services/animation/angular-animation-service';
import { IgxExpansionPanelBodyComponent } from './expansion-panel-body.component';
import { IgxExpansionPanelHeaderComponent } from './expansion-panel-header.component';
import { IGX_EXPANSION_PANEL_COMPONENT } from './expansion-panel.common';
import { ToggleAnimationPlayer } from './toggle-animation-component';
import { NgIf } from '@angular/common';
import * as i0 from "@angular/core";
let NEXT_ID = 0;
export class IgxExpansionPanelComponent extends ToggleAnimationPlayer {
    /**
     * Sets/gets the animation settings of the expansion panel component
     * Open and Close animation should be passed
     *
     * Get
     * ```typescript
     *  const currentAnimations = this.panel.animationSettings;
     * ```
     * Set
     * ```typescript
     *  import { slideInLeft, slideOutRight } from 'igniteui-angular';
     *  ...
     *  this.panel.animationsSettings = {
     *      openAnimation: slideInLeft,
     *      closeAnimation: slideOutRight
     * };
     * ```
     * or via template
     * ```typescript
     *  import { slideInLeft, slideOutRight } from 'igniteui-angular';
     *  ...
     *  myCustomAnimationObject = {
     *      openAnimation: slideInLeft,
     *      closeAnimation: slideOutRight
     * };
     * ```html
     *  <igx-expansion-panel [animationSettings]='myCustomAnimationObject'>
     *  ...
     *  </igx-expansion-panel>
     * ```
     */
    get animationSettings() {
        return this._animationSettings;
    }
    set animationSettings(value) {
        this._animationSettings = value;
    }
    /**
     * @hidden @internal
     */
    get panelExpanded() {
        return !this.collapsed;
    }
    /**
     * @hidden
     */
    get headerId() {
        return this.header ? `${this.id}-header` : '';
    }
    /**
     * @hidden @internal
     */
    get nativeElement() {
        return this.elementRef.nativeElement;
    }
    constructor(animationService, cdr, elementRef) {
        super(animationService);
        this.cdr = cdr;
        this.elementRef = elementRef;
        /**
         * Sets/gets the `id` of the expansion panel component.
         * If not set, `id` will have value `"igx-expansion-panel-0"`;
         * ```html
         * <igx-expansion-panel id = "my-first-expansion-panel"></igx-expansion-panel>
         * ```
         * ```typescript
         * let panelId =  this.panel.id;
         * ```
         *
         * @memberof IgxExpansionPanelComponent
         */
        this.id = `igx-expansion-panel-${NEXT_ID++}`;
        /**
         * @hidden
         */
        this.cssClass = 'igx-expansion-panel';
        /**
         * @hidden
         */
        this.opened = false;
        /**
         * Gets/sets whether the component is collapsed (its content is hidden)
         * Get
         * ```typescript
         *  const myPanelState: boolean = this.panel.collapsed;
         * ```
         * Set
         * ```html
         *  this.panel.collapsed = true;
         * ```
         *
         * Two-way data binding:
         * ```html
         * <igx-expansion-panel [(collapsed)]="model.isCollapsed"></igx-expansion-panel>
         * ```
         */
        this.collapsed = true;
        /**
         * @hidden
         */
        this.collapsedChange = new EventEmitter();
        /**
         * Emitted when the expansion panel starts collapsing
         * ```typescript
         *  handleCollapsing(event: IExpansionPanelCancelableEventArgs)
         * ```
         * ```html
         *  <igx-expansion-panel (contentCollapsing)="handleCollapsing($event)">
         *      ...
         *  </igx-expansion-panel>
         * ```
         */
        this.contentCollapsing = new EventEmitter();
        /**
         * Emitted when the expansion panel finishes collapsing
         * ```typescript
         *  handleCollapsed(event: IExpansionPanelEventArgs)
         * ```
         * ```html
         *  <igx-expansion-panel (contentCollapsed)="handleCollapsed($event)">
         *      ...
         *  </igx-expansion-panel>
         * ```
         */
        this.contentCollapsed = new EventEmitter();
        /**
         * Emitted when the expansion panel starts expanding
         * ```typescript
         *  handleExpanding(event: IExpansionPanelCancelableEventArgs)
         * ```
         * ```html
         *  <igx-expansion-panel (contentExpanding)="handleExpanding($event)">
         *      ...
         *  </igx-expansion-panel>
         * ```
         */
        this.contentExpanding = new EventEmitter();
        /**
         * Emitted when the expansion panel finishes expanding
         * ```typescript
         *  handleExpanded(event: IExpansionPanelEventArgs)
         * ```
         * ```html
         *  <igx-expansion-panel (contentExpanded)="handleExpanded($event)">
         *      ...
         *  </igx-expansion-panel>
         * ```
         */
        this.contentExpanded = new EventEmitter();
    }
    /** @hidden */
    ngAfterContentInit() {
        if (this.body && this.header) {
            // schedule at end of turn:
            Promise.resolve().then(() => {
                this.body.labelledBy = this.body.labelledBy || this.headerId;
                this.body.label = this.body.label || this.id + '-region';
            });
        }
    }
    /**
     * Collapses the panel
     *
     * ```html
     *  <igx-expansion-panel #myPanel>
     *      ...
     *  </igx-expansion-panel>
     *  <button type="button" igxButton (click)="myPanel.collapse($event)">Collpase Panel</button>
     * ```
     */
    collapse(evt) {
        // If expansion panel is already collapsed or is collapsing, do nothing
        if (this.collapsed || this.closeAnimationPlayer) {
            return;
        }
        const args = { event: evt, panel: this, owner: this, cancel: false };
        this.contentCollapsing.emit(args);
        if (args.cancel === true) {
            return;
        }
        this.opened = false;
        this.playCloseAnimation(this.body?.element, () => {
            this.contentCollapsed.emit({ event: evt, owner: this });
            this.collapsed = true;
            this.collapsedChange.emit(true);
            this.cdr.markForCheck();
        });
    }
    /**
     * Expands the panel
     *
     * ```html
     *  <igx-expansion-panel #myPanel>
     *      ...
     *  </igx-expansion-panel>
     *  <button type="button" igxButton (click)="myPanel.expand($event)">Expand Panel</button>
     * ```
     */
    expand(evt) {
        if (!this.collapsed) { // If the panel is already opened, do nothing
            return;
        }
        const args = { event: evt, panel: this, owner: this, cancel: false };
        this.contentExpanding.emit(args);
        if (args.cancel === true) {
            return;
        }
        this.collapsed = false;
        this.opened = true;
        this.collapsedChange.emit(false);
        this.cdr.detectChanges();
        this.playOpenAnimation(this.body?.element, () => {
            this.contentExpanded.emit({ event: evt, owner: this });
        });
    }
    /**
     * Toggles the panel
     *
     * ```html
     *  <igx-expansion-panel #myPanel>
     *      ...
     *  </igx-expansion-panel>
     *  <button type="button" igxButton (click)="myPanel.toggle($event)">Expand Panel</button>
     * ```
     */
    toggle(evt) {
        if (this.collapsed) {
            this.open(evt);
        }
        else {
            this.close(evt);
        }
    }
    open(evt) {
        this.expand(evt);
    }
    close(evt) {
        this.collapse(evt);
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxExpansionPanelComponent, deps: [{ token: IgxAngularAnimationService }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "18.2.4", type: IgxExpansionPanelComponent, isStandalone: true, selector: "igx-expansion-panel", inputs: { animationSettings: "animationSettings", id: "id", collapsed: ["collapsed", "collapsed", booleanAttribute] }, outputs: { collapsedChange: "collapsedChange", contentCollapsing: "contentCollapsing", contentCollapsed: "contentCollapsed", contentExpanding: "contentExpanding", contentExpanded: "contentExpanded" }, host: { properties: { "attr.id": "this.id", "class.igx-expansion-panel": "this.cssClass", "class.igx-expansion-panel--expanded": "this.opened", "attr.aria-expanded": "this.panelExpanded" } }, providers: [{ provide: IGX_EXPANSION_PANEL_COMPONENT, useExisting: IgxExpansionPanelComponent }], queries: [{ propertyName: "body", first: true, predicate: IgxExpansionPanelBodyComponent, descendants: true, read: IgxExpansionPanelBodyComponent }, { propertyName: "header", first: true, predicate: IgxExpansionPanelHeaderComponent, descendants: true, read: IgxExpansionPanelHeaderComponent }], usesInheritance: true, ngImport: i0, template: "<ng-content select=\"igx-expansion-panel-header\"></ng-content>\n<ng-content *ngIf=\"!collapsed\" select=\"igx-expansion-panel-body\"></ng-content>\n", dependencies: [{ kind: "directive", type: NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }] }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxExpansionPanelComponent, decorators: [{
            type: Component,
            args: [{ selector: 'igx-expansion-panel', providers: [{ provide: IGX_EXPANSION_PANEL_COMPONENT, useExisting: IgxExpansionPanelComponent }], standalone: true, imports: [NgIf], template: "<ng-content select=\"igx-expansion-panel-header\"></ng-content>\n<ng-content *ngIf=\"!collapsed\" select=\"igx-expansion-panel-body\"></ng-content>\n" }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [IgxAngularAnimationService]
                }] }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }], propDecorators: { animationSettings: [{
                type: Input
            }], id: [{
                type: HostBinding,
                args: ['attr.id']
            }, {
                type: Input
            }], cssClass: [{
                type: HostBinding,
                args: ['class.igx-expansion-panel']
            }], opened: [{
                type: HostBinding,
                args: ['class.igx-expansion-panel--expanded']
            }], panelExpanded: [{
                type: HostBinding,
                args: ['attr.aria-expanded']
            }], collapsed: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], collapsedChange: [{
                type: Output
            }], contentCollapsing: [{
                type: Output
            }], contentCollapsed: [{
                type: Output
            }], contentExpanding: [{
                type: Output
            }], contentExpanded: [{
                type: Output
            }], body: [{
                type: ContentChild,
                args: [IgxExpansionPanelBodyComponent, { read: IgxExpansionPanelBodyComponent }]
            }], header: [{
                type: ContentChild,
                args: [IgxExpansionPanelHeaderComponent, { read: IgxExpansionPanelHeaderComponent }]
            }] } });
//# sourceMappingURL=data:application/json;base64,