import { Directive, InjectionToken } from '@angular/core';
import * as i0 from "@angular/core";
/** @hidden */
export const IGX_EXPANSION_PANEL_COMPONENT = /*@__PURE__*/ new InjectionToken('IgxExpansionPanelToken');
export class HeaderContentBaseDirective {
    constructor(element) {
        this.element = element;
        /**
         * Returns the `textContent` of an element
         *
         * ```html
         * <igx-expansion-panel-title>
         *  Tooltip content
         * </igx-expansion-panel-title>
         * ```
         *
         *  or the `title` content
         *
         * ```html
         * <igx-expansion-panel-title [title]="'Tooltip content'">
         * </igx-expansion-panel-title>
         * ```
         *
         * If both are provided, returns the `title` content.
         *
         * @param element
         * @returns tooltip content for an element
         */
        this.getTooltipContent = (element) => {
            if (element.nativeElement.title) {
                return element.nativeElement.title;
            }
            if (element.nativeElement.textContent) {
                return element.nativeElement.textContent.trim();
            }
            return null;
        };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: HeaderContentBaseDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.4", type: HeaderContentBaseDirective, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: HeaderContentBaseDirective, decorators: [{
            type: Directive
        }], ctorParameters: () => [{ type: i0.ElementRef }] });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXhwYW5zaW9uLXBhbmVsLmNvbW1vbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uLy4uL3Byb2plY3RzL2lnbml0ZXVpLWFuZ3VsYXIvc3JjL2xpYi9leHBhbnNpb24tcGFuZWwvZXhwYW5zaW9uLXBhbmVsLmNvbW1vbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsU0FBUyxFQUE0QixjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7O0FBb0JwRixjQUFjO0FBQ2QsTUFBTSxDQUFDLE1BQU0sNkJBQTZCLEdBQUcsYUFBYSxDQUFBLElBQUksY0FBYyxDQUF3Qix3QkFBd0IsQ0FBQyxDQUFDO0FBUzlILE1BQU0sT0FBZ0IsMEJBQTBCO0lBRTVDLFlBQXNCLE9BQW1CO1FBQW5CLFlBQU8sR0FBUCxPQUFPLENBQVk7UUFFekM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1dBb0JHO1FBQ0ksc0JBQWlCLEdBQUcsQ0FBQyxPQUFtQixFQUFVLEVBQUU7WUFDdkQsSUFBSSxPQUFPLENBQUMsYUFBYSxDQUFDLEtBQUssRUFBRSxDQUFDO2dCQUM5QixPQUFPLE9BQU8sQ0FBQyxhQUFhLENBQUMsS0FBSyxDQUFDO1lBQ3ZDLENBQUM7WUFDRCxJQUFJLE9BQU8sQ0FBQyxhQUFhLENBQUMsV0FBVyxFQUFFLENBQUM7Z0JBQ3BDLE9BQU8sT0FBTyxDQUFDLGFBQWEsQ0FBQyxXQUFXLENBQUMsSUFBSSxFQUFFLENBQUM7WUFDcEQsQ0FBQztZQUVELE9BQU8sSUFBSSxDQUFDO1FBQ2hCLENBQUMsQ0FBQztJQWhDMkMsQ0FBQzs4R0FGNUIsMEJBQTBCO2tHQUExQiwwQkFBMEI7OzJGQUExQiwwQkFBMEI7a0JBRC9DLFNBQVMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFuaW1hdGlvblJlZmVyZW5jZU1ldGFkYXRhIH0gZnJvbSAnQGFuZ3VsYXIvYW5pbWF0aW9ucyc7XG5pbXBvcnQgeyBDYW5jZWxhYmxlRXZlbnRBcmdzLCBJQmFzZUV2ZW50QXJncyB9IGZyb20gJy4uL2NvcmUvdXRpbHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIElneEV4cGFuc2lvblBhbmVsQmFzZSB7XG4gICAgaWQ6IHN0cmluZztcbiAgICBjc3NDbGFzczogc3RyaW5nO1xuICAgIC8qKiBAaGlkZGVuIEBpbnRlcm5hbCAqL1xuICAgIGhlYWRlcklkOiBzdHJpbmc7XG4gICAgY29sbGFwc2VkOiBib29sZWFuO1xuICAgIGFuaW1hdGlvblNldHRpbmdzOiB7IG9wZW5BbmltYXRpb246IEFuaW1hdGlvblJlZmVyZW5jZU1ldGFkYXRhOyBjbG9zZUFuaW1hdGlvbjogQW5pbWF0aW9uUmVmZXJlbmNlTWV0YWRhdGEgfTtcbiAgICBjb250ZW50Q29sbGFwc2VkOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBjb250ZW50Q29sbGFwc2luZzogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgY29udGVudEV4cGFuZGVkOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBjb250ZW50RXhwYW5kaW5nOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBjb2xsYXBzZShldnQ/OiBFdmVudCk7XG4gICAgZXhwYW5kKGV2dD86IEV2ZW50KTtcbiAgICB0b2dnbGUoZXZ0PzogRXZlbnQpO1xufVxuXG4vKiogQGhpZGRlbiAqL1xuZXhwb3J0IGNvbnN0IElHWF9FWFBBTlNJT05fUEFORUxfQ09NUE9ORU5UID0gLypAX19QVVJFX18qL25ldyBJbmplY3Rpb25Ub2tlbjxJZ3hFeHBhbnNpb25QYW5lbEJhc2U+KCdJZ3hFeHBhbnNpb25QYW5lbFRva2VuJyk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgSUV4cGFuc2lvblBhbmVsRXZlbnRBcmdzIGV4dGVuZHMgSUJhc2VFdmVudEFyZ3Mge1xuICAgIGV2ZW50OiBFdmVudDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBJRXhwYW5zaW9uUGFuZWxDYW5jZWxhYmxlRXZlbnRBcmdzICBleHRlbmRzIElFeHBhbnNpb25QYW5lbEV2ZW50QXJncywgQ2FuY2VsYWJsZUV2ZW50QXJncyB7fVxuXG5ARGlyZWN0aXZlKClcbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBIZWFkZXJDb250ZW50QmFzZURpcmVjdGl2ZSB7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgZWxlbWVudDogRWxlbWVudFJlZikgeyB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBgdGV4dENvbnRlbnRgIG9mIGFuIGVsZW1lbnRcbiAgICAgKlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWV4cGFuc2lvbi1wYW5lbC10aXRsZT5cbiAgICAgKiAgVG9vbHRpcCBjb250ZW50XG4gICAgICogPC9pZ3gtZXhwYW5zaW9uLXBhbmVsLXRpdGxlPlxuICAgICAqIGBgYFxuICAgICAqXG4gICAgICogIG9yIHRoZSBgdGl0bGVgIGNvbnRlbnRcbiAgICAgKlxuICAgICAqIGBgYGh0bWxcbiAgICAgKiA8aWd4LWV4cGFuc2lvbi1wYW5lbC10aXRsZSBbdGl0bGVdPVwiJ1Rvb2x0aXAgY29udGVudCdcIj5cbiAgICAgKiA8L2lneC1leHBhbnNpb24tcGFuZWwtdGl0bGU+XG4gICAgICogYGBgXG4gICAgICpcbiAgICAgKiBJZiBib3RoIGFyZSBwcm92aWRlZCwgcmV0dXJucyB0aGUgYHRpdGxlYCBjb250ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIGVsZW1lbnRcbiAgICAgKiBAcmV0dXJucyB0b29sdGlwIGNvbnRlbnQgZm9yIGFuIGVsZW1lbnRcbiAgICAgKi9cbiAgICBwdWJsaWMgZ2V0VG9vbHRpcENvbnRlbnQgPSAoZWxlbWVudDogRWxlbWVudFJlZik6IHN0cmluZyA9PiB7XG4gICAgICAgIGlmIChlbGVtZW50Lm5hdGl2ZUVsZW1lbnQudGl0bGUpIHtcbiAgICAgICAgICAgIHJldHVybiBlbGVtZW50Lm5hdGl2ZUVsZW1lbnQudGl0bGU7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGVsZW1lbnQubmF0aXZlRWxlbWVudC50ZXh0Q29udGVudCkge1xuICAgICAgICAgICAgcmV0dXJuIGVsZW1lbnQubmF0aXZlRWxlbWVudC50ZXh0Q29udGVudC50cmltKCk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9O1xufVxuIl19