// @dynamic
export class IgxDefaultDropStrategy {
    dropAction(_drag, _drop, _atIndex) { }
}
// @dynamic
export class IgxAppendDropStrategy {
    constructor(_renderer) {
        this._renderer = _renderer;
    }
    dropAction(drag, drop, _atIndex) {
        const dragElement = drag.element.nativeElement;
        const dropAreaElement = drop.element.nativeElement;
        this._renderer.removeChild(dragElement.parentNode, dragElement);
        this._renderer.appendChild(dropAreaElement, dragElement);
    }
}
// @dynamic
export class IgxPrependDropStrategy {
    constructor(_renderer) {
        this._renderer = _renderer;
    }
    dropAction(drag, drop, _atIndex) {
        const dragElement = drag.element.nativeElement;
        const dropAreaElement = drop.element.nativeElement;
        this._renderer.removeChild(dragElement.parentNode, dragElement);
        if (dropAreaElement.children.length) {
            this._renderer.insertBefore(dropAreaElement, dragElement, dropAreaElement.children[0]);
        }
        else {
            this._renderer.appendChild(dropAreaElement, dragElement);
        }
    }
}
// @dynamic
export class IgxInsertDropStrategy {
    constructor(_renderer) {
        this._renderer = _renderer;
    }
    dropAction(drag, drop, atIndex) {
        if (drag.element.nativeElement.parentElement === drop.element.nativeElement && atIndex === -1) {
            return;
        }
        const dragElement = drag.element.nativeElement;
        const dropAreaElement = drop.element.nativeElement;
        this._renderer.removeChild(dragElement.parentNode, dragElement);
        if (atIndex !== -1 && dropAreaElement.children.length > atIndex) {
            this._renderer.insertBefore(dropAreaElement, dragElement, dropAreaElement.children[atIndex]);
        }
        else {
            this._renderer.appendChild(dropAreaElement, dragElement);
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZHJhZy1kcm9wLnN0cmF0ZWd5LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvaWduaXRldWktYW5ndWxhci9zcmMvbGliL2RpcmVjdGl2ZXMvZHJhZy1kcm9wL2RyYWctZHJvcC5zdHJhdGVneS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFRQSxXQUFXO0FBQ1gsTUFBTSxPQUFPLHNCQUFzQjtJQUV4QixVQUFVLENBQUMsS0FBdUIsRUFBRSxLQUF1QixFQUFFLFFBQWdCLElBQUksQ0FBQztDQUM1RjtBQUVELFdBQVc7QUFDWCxNQUFNLE9BQU8scUJBQXFCO0lBRTlCLFlBQW9CLFNBQW9CO1FBQXBCLGNBQVMsR0FBVCxTQUFTLENBQVc7SUFBSSxDQUFDO0lBRXRDLFVBQVUsQ0FBQyxJQUFzQixFQUFFLElBQXNCLEVBQUUsUUFBZ0I7UUFDOUUsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7UUFDL0MsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7UUFDbkQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNoRSxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxlQUFlLEVBQUUsV0FBVyxDQUFDLENBQUM7SUFDN0QsQ0FBQztDQUNKO0FBRUQsV0FBVztBQUNYLE1BQU0sT0FBTyxzQkFBc0I7SUFFL0IsWUFBb0IsU0FBb0I7UUFBcEIsY0FBUyxHQUFULFNBQVMsQ0FBVztJQUFJLENBQUM7SUFFdEMsVUFBVSxDQUFDLElBQXNCLEVBQUUsSUFBc0IsRUFBRSxRQUFnQjtRQUM5RSxNQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztRQUMvQyxNQUFNLGVBQWUsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGFBQWEsQ0FBQztRQUNuRCxJQUFJLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxXQUFXLENBQUMsVUFBVSxFQUFFLFdBQVcsQ0FBQyxDQUFDO1FBQ2hFLElBQUksZUFBZSxDQUFDLFFBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQztZQUNsQyxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxlQUFlLEVBQUUsV0FBVyxFQUFFLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzRixDQUFDO2FBQU0sQ0FBQztZQUNKLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLGVBQWUsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUM3RCxDQUFDO0lBQ0wsQ0FBQztDQUNKO0FBRUQsV0FBVztBQUNYLE1BQU0sT0FBTyxxQkFBcUI7SUFFOUIsWUFBb0IsU0FBb0I7UUFBcEIsY0FBUyxHQUFULFNBQVMsQ0FBVztJQUFJLENBQUM7SUFFdEMsVUFBVSxDQUFDLElBQXNCLEVBQUUsSUFBc0IsRUFBRSxPQUFlO1FBQzdFLElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUMsYUFBYSxLQUFLLElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxJQUFJLE9BQU8sS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDO1lBQzVGLE9BQU87UUFDWCxDQUFDO1FBRUQsTUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7UUFDL0MsTUFBTSxlQUFlLEdBQUcsSUFBSSxDQUFDLE9BQU8sQ0FBQyxhQUFhLENBQUM7UUFDbkQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsV0FBVyxDQUFDLFVBQVUsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUNoRSxJQUFJLE9BQU8sS0FBSyxDQUFDLENBQUMsSUFBSSxlQUFlLENBQUMsUUFBUSxDQUFDLE1BQU0sR0FBRyxPQUFPLEVBQUUsQ0FBQztZQUM5RCxJQUFJLENBQUMsU0FBUyxDQUFDLFlBQVksQ0FBQyxlQUFlLEVBQUUsV0FBVyxFQUFFLGVBQWUsQ0FBQyxRQUFRLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQztRQUNqRyxDQUFDO2FBQU0sQ0FBQztZQUNKLElBQUksQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLGVBQWUsRUFBRSxXQUFXLENBQUMsQ0FBQztRQUM3RCxDQUFDO0lBQ0wsQ0FBQztDQUNKIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgUmVuZGVyZXIyIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBJZ3hEcmFnRGlyZWN0aXZlLCBJZ3hEcm9wRGlyZWN0aXZlIH0gZnJvbSAnLi9kcmFnLWRyb3AuZGlyZWN0aXZlJztcblxuXG5leHBvcnQgaW50ZXJmYWNlIElEcm9wU3RyYXRlZ3kge1xuICAgIGRyb3BBY3Rpb246IChkcmFnOiBJZ3hEcmFnRGlyZWN0aXZlLCBkcm9wOiBJZ3hEcm9wRGlyZWN0aXZlLCBhdEluZGV4OiBudW1iZXIpID0+IHZvaWQ7XG59XG5cbi8vIEBkeW5hbWljXG5leHBvcnQgY2xhc3MgSWd4RGVmYXVsdERyb3BTdHJhdGVneSBpbXBsZW1lbnRzIElEcm9wU3RyYXRlZ3kge1xuXG4gICAgcHVibGljIGRyb3BBY3Rpb24oX2RyYWc6IElneERyYWdEaXJlY3RpdmUsIF9kcm9wOiBJZ3hEcm9wRGlyZWN0aXZlLCBfYXRJbmRleDogbnVtYmVyKSB7IH1cbn1cblxuLy8gQGR5bmFtaWNcbmV4cG9ydCBjbGFzcyBJZ3hBcHBlbmREcm9wU3RyYXRlZ3kgaW1wbGVtZW50cyBJRHJvcFN0cmF0ZWd5IHtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgX3JlbmRlcmVyOiBSZW5kZXJlcjIpIHsgfVxuXG4gICAgcHVibGljIGRyb3BBY3Rpb24oZHJhZzogSWd4RHJhZ0RpcmVjdGl2ZSwgZHJvcDogSWd4RHJvcERpcmVjdGl2ZSwgX2F0SW5kZXg6IG51bWJlcikge1xuICAgICAgICBjb25zdCBkcmFnRWxlbWVudCA9IGRyYWcuZWxlbWVudC5uYXRpdmVFbGVtZW50O1xuICAgICAgICBjb25zdCBkcm9wQXJlYUVsZW1lbnQgPSBkcm9wLmVsZW1lbnQubmF0aXZlRWxlbWVudDtcbiAgICAgICAgdGhpcy5fcmVuZGVyZXIucmVtb3ZlQ2hpbGQoZHJhZ0VsZW1lbnQucGFyZW50Tm9kZSwgZHJhZ0VsZW1lbnQpO1xuICAgICAgICB0aGlzLl9yZW5kZXJlci5hcHBlbmRDaGlsZChkcm9wQXJlYUVsZW1lbnQsIGRyYWdFbGVtZW50KTtcbiAgICB9XG59XG5cbi8vIEBkeW5hbWljXG5leHBvcnQgY2xhc3MgSWd4UHJlcGVuZERyb3BTdHJhdGVneSBpbXBsZW1lbnRzIElEcm9wU3RyYXRlZ3kge1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfcmVuZGVyZXI6IFJlbmRlcmVyMikgeyB9XG5cbiAgICBwdWJsaWMgZHJvcEFjdGlvbihkcmFnOiBJZ3hEcmFnRGlyZWN0aXZlLCBkcm9wOiBJZ3hEcm9wRGlyZWN0aXZlLCBfYXRJbmRleDogbnVtYmVyKSB7XG4gICAgICAgIGNvbnN0IGRyYWdFbGVtZW50ID0gZHJhZy5lbGVtZW50Lm5hdGl2ZUVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IGRyb3BBcmVhRWxlbWVudCA9IGRyb3AuZWxlbWVudC5uYXRpdmVFbGVtZW50O1xuICAgICAgICB0aGlzLl9yZW5kZXJlci5yZW1vdmVDaGlsZChkcmFnRWxlbWVudC5wYXJlbnROb2RlLCBkcmFnRWxlbWVudCk7XG4gICAgICAgIGlmIChkcm9wQXJlYUVsZW1lbnQuY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgICB0aGlzLl9yZW5kZXJlci5pbnNlcnRCZWZvcmUoZHJvcEFyZWFFbGVtZW50LCBkcmFnRWxlbWVudCwgZHJvcEFyZWFFbGVtZW50LmNoaWxkcmVuWzBdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLmFwcGVuZENoaWxkKGRyb3BBcmVhRWxlbWVudCwgZHJhZ0VsZW1lbnQpO1xuICAgICAgICB9XG4gICAgfVxufVxuXG4vLyBAZHluYW1pY1xuZXhwb3J0IGNsYXNzIElneEluc2VydERyb3BTdHJhdGVneSBpbXBsZW1lbnRzIElEcm9wU3RyYXRlZ3kge1xuXG4gICAgY29uc3RydWN0b3IocHJpdmF0ZSBfcmVuZGVyZXI6IFJlbmRlcmVyMikgeyB9XG5cbiAgICBwdWJsaWMgZHJvcEFjdGlvbihkcmFnOiBJZ3hEcmFnRGlyZWN0aXZlLCBkcm9wOiBJZ3hEcm9wRGlyZWN0aXZlLCBhdEluZGV4OiBudW1iZXIpIHtcbiAgICAgICAgaWYgKGRyYWcuZWxlbWVudC5uYXRpdmVFbGVtZW50LnBhcmVudEVsZW1lbnQgPT09IGRyb3AuZWxlbWVudC5uYXRpdmVFbGVtZW50ICYmIGF0SW5kZXggPT09IC0xKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBkcmFnRWxlbWVudCA9IGRyYWcuZWxlbWVudC5uYXRpdmVFbGVtZW50O1xuICAgICAgICBjb25zdCBkcm9wQXJlYUVsZW1lbnQgPSBkcm9wLmVsZW1lbnQubmF0aXZlRWxlbWVudDtcbiAgICAgICAgdGhpcy5fcmVuZGVyZXIucmVtb3ZlQ2hpbGQoZHJhZ0VsZW1lbnQucGFyZW50Tm9kZSwgZHJhZ0VsZW1lbnQpO1xuICAgICAgICBpZiAoYXRJbmRleCAhPT0gLTEgJiYgZHJvcEFyZWFFbGVtZW50LmNoaWxkcmVuLmxlbmd0aCA+IGF0SW5kZXgpIHtcbiAgICAgICAgICAgIHRoaXMuX3JlbmRlcmVyLmluc2VydEJlZm9yZShkcm9wQXJlYUVsZW1lbnQsIGRyYWdFbGVtZW50LCBkcm9wQXJlYUVsZW1lbnQuY2hpbGRyZW5bYXRJbmRleF0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fcmVuZGVyZXIuYXBwZW5kQ2hpbGQoZHJvcEFyZWFFbGVtZW50LCBkcmFnRWxlbWVudCk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXX0=