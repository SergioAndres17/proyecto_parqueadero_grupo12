import { HostListener, Directive, Inject } from '@angular/core';
import { DOCUMENT } from '@angular/common';
import { Subject } from 'rxjs';
import { takeUntil, throttleTime } from 'rxjs/operators';
import { resizeObservable } from '../../core/utils';
import * as i0 from "@angular/core";
import * as i1 from "../../core/utils";
export class VirtualHelperBaseDirective {
    constructor(elementRef, cdr, _zone, document, platformUtil) {
        this.elementRef = elementRef;
        this.cdr = cdr;
        this._zone = _zone;
        this.document = document;
        this.platformUtil = platformUtil;
        this.scrollAmount = 0;
        this._size = 0;
        this.destroy$ = new Subject();
        this._afterViewInit = false;
        this._detached = false;
        this._scrollNativeSize = this.calculateScrollNativeSize();
    }
    onScroll(event) {
        this.scrollAmount = event.target.scrollTop || event.target.scrollLeft;
    }
    ngAfterViewInit() {
        this._afterViewInit = true;
        if (!this.platformUtil.isBrowser) {
            return;
        }
        const delayTime = 0;
        this._zone.runOutsideAngular(() => {
            resizeObservable(this.nativeElement).pipe(throttleTime(delayTime), takeUntil(this.destroy$)).subscribe((event) => this.handleMutations(event));
        });
    }
    get nativeElement() {
        return this.elementRef.nativeElement;
    }
    ngOnDestroy() {
        this.destroyed = true;
        this.destroy$.next(true);
        this.destroy$.complete();
    }
    calculateScrollNativeSize() {
        const div = this.document.createElement('div');
        const style = div.style;
        style.width = '100px';
        style.height = '100px';
        style.position = 'absolute';
        style.top = '-10000px';
        style.top = '-10000px';
        style.overflow = 'scroll';
        this.document.body.appendChild(div);
        const scrollWidth = div.offsetWidth - div.clientWidth;
        this.document.body.removeChild(div);
        return scrollWidth ? scrollWidth + 1 : 1;
    }
    set size(value) {
        if (this.destroyed) {
            return;
        }
        this._size = value;
        if (this._afterViewInit) {
            this.cdr.detectChanges();
        }
    }
    get size() {
        return this._size;
    }
    get scrollNativeSize() {
        return this._scrollNativeSize;
    }
    get isAttachedToDom() {
        return this.document.body.contains(this.nativeElement);
    }
    handleMutations(event) {
        const hasSize = !(event[0].contentRect.height === 0 && event[0].contentRect.width === 0);
        if (!hasSize && !this.isAttachedToDom) {
            // scroll bar detached from DOM
            this._detached = true;
        }
        else if (this._detached && hasSize && this.isAttachedToDom) {
            // attached back now.
            this.restoreScroll();
        }
    }
    restoreScroll() { }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: VirtualHelperBaseDirective, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.NgZone }, { token: DOCUMENT }, { token: i1.PlatformUtil }], target: i0.ɵɵFactoryTarget.Directive }); }
    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "18.2.4", type: VirtualHelperBaseDirective, isStandalone: true, selector: "[igxVirtualHelperBase]", host: { listeners: { "scroll": "onScroll($event)" } }, ngImport: i0 }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: VirtualHelperBaseDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[igxVirtualHelperBase]',
                    standalone: true
                }]
        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.NgZone }, { type: undefined, decorators: [{
                    type: Inject,
                    args: [DOCUMENT]
                }] }, { type: i1.PlatformUtil }], propDecorators: { onScroll: [{
                type: HostListener,
                args: ['scroll', ['$event']]
            }] } });
//# sourceMappingURL=data:application/json;base64,