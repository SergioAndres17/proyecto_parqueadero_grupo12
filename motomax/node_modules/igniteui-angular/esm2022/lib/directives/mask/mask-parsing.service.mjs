import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
const FLAGS = new Set('aACL09#&?');
const REGEX = new Map([
    ['C', /(?!^$)/u], // Non-empty
    ['&', /[^\p{Separator}]/u], // Non-whitespace
    ['a', /[\p{Letter}\d\p{Separator}]/u], // Alphanumeric & whitespace
    ['A', /[\p{Letter}\d]/u], // Alphanumeric
    ['?', /[\p{Letter}\p{Separator}]/u], // Alpha & whitespace
    ['L', /\p{Letter}/u], // Alpha
    ['0', /\d/], // Numeric
    ['9', /[\d\p{Separator}]/u], // Numeric & whitespace
    ['#', /[\d\-+]/], // Numeric and sign
]);
const replaceCharAt = (string, idx, char) => `${string.substring(0, idx)}${char}${string.substring(idx + 1)}`;
export function parseMask(format) {
    const literals = new Map();
    let mask = format;
    for (let i = 0, j = 0; i < format.length; i++, j++) {
        const [current, next] = [format.charAt(i), format.charAt(i + 1)];
        if (current === '\\' && FLAGS.has(next)) {
            mask = replaceCharAt(mask, j, '');
            literals.set(j, next);
            i++;
        }
        else {
            if (!FLAGS.has(current)) {
                literals.set(j, current);
            }
        }
    }
    return { literals, mask };
}
/** @hidden */
export class MaskParsingService {
    applyMask(inputVal, maskOptions, pos = 0) {
        let outputVal = '';
        let value = '';
        const { literals, mask } = parseMask(maskOptions.format);
        const literalKeys = Array.from(literals.keys());
        const nonLiteralIndices = this.getNonLiteralIndices(mask, literalKeys);
        const literalValues = Array.from(literals.values());
        if (inputVal != null) {
            value = inputVal.toString();
        }
        for (const _maskSym of mask) {
            outputVal += maskOptions.promptChar;
        }
        literals.forEach((val, key) => {
            outputVal = replaceCharAt(outputVal, key, val);
        });
        if (!value) {
            return outputVal;
        }
        const nonLiteralValues = this.getNonLiteralValues(value, literalValues);
        for (let i = 0; i < nonLiteralValues.length; i++) {
            const char = nonLiteralValues[i];
            const isCharValid = this.validateCharOnPosition(char, nonLiteralIndices[i], mask);
            if (!isCharValid && char !== maskOptions.promptChar) {
                nonLiteralValues[i] = maskOptions.promptChar;
            }
        }
        if (nonLiteralValues.length > nonLiteralIndices.length) {
            nonLiteralValues.splice(nonLiteralIndices.length);
        }
        for (const nonLiteralValue of nonLiteralValues) {
            const char = nonLiteralValue;
            outputVal = replaceCharAt(outputVal, nonLiteralIndices[pos++], char);
        }
        return outputVal;
    }
    parseValueFromMask(maskedValue, maskOptions) {
        let outputVal = '';
        const literalValues = Array.from(parseMask(maskOptions.format).literals.values());
        for (const val of maskedValue) {
            if (literalValues.indexOf(val) === -1) {
                if (val !== maskOptions.promptChar) {
                    outputVal += val;
                }
            }
        }
        return outputVal;
    }
    replaceInMask(maskedValue, value, maskOptions, start, end) {
        const { literals, mask } = parseMask(maskOptions.format);
        const literalsPositions = Array.from(literals.keys());
        value = this.replaceIMENumbers(value);
        const chars = Array.from(value);
        let cursor = start;
        end = Math.min(end, maskedValue.length);
        for (let i = start; i < end || (chars.length && i < maskedValue.length); i++) {
            if (literalsPositions.indexOf(i) !== -1) {
                if (chars[0] === maskedValue[i] || value.length < 1) {
                    cursor = i + 1;
                    chars.shift();
                }
                continue;
            }
            if (chars[0]
                && !this.validateCharOnPosition(chars[0], i, mask)
                && chars[0] !== maskOptions.promptChar) {
                break;
            }
            let char = maskOptions.promptChar;
            if (chars.length) {
                cursor = i + 1;
                char = chars.shift();
            }
            if (value.length < 1) {
                // on `delete` the cursor should move forward
                cursor++;
            }
            maskedValue = replaceCharAt(maskedValue, i, char);
        }
        return { value: maskedValue, end: cursor };
    }
    /** Validates only non literal positions. */
    validateCharOnPosition(inputChar, position, mask) {
        const regex = REGEX.get(mask.charAt(position));
        return regex ? regex.test(inputChar) : false;
    }
    getNonLiteralIndices(mask, literalKeys) {
        const nonLiteralsIndices = [];
        for (let i = 0; i < mask.length; i++) {
            if (literalKeys.indexOf(i) === -1) {
                nonLiteralsIndices.push(i);
            }
        }
        return nonLiteralsIndices;
    }
    getNonLiteralValues(value, literalValues) {
        const nonLiteralValues = [];
        for (const val of value) {
            if (literalValues.indexOf(val) === -1) {
                nonLiteralValues.push(val);
            }
        }
        return nonLiteralValues;
    }
    replaceIMENumbers(value) {
        return value.replace(/[０１２３４５６７８９]/g, (num) => ({
            '１': '1', '２': '2', '３': '3', '４': '4', '５': '5',
            '６': '6', '７': '7', '８': '8', '９': '9', '０': '0'
        }[num]));
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: MaskParsingService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: MaskParsingService, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: MaskParsingService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }] });
//# sourceMappingURL=data:application/json;base64,