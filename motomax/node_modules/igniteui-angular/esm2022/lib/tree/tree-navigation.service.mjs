import { Injectable } from '@angular/core';
import { IgxTreeSelectionType } from './common';
import { NAVIGATION_KEYS } from '../core/utils';
import { Subject } from 'rxjs';
import * as i0 from "@angular/core";
import * as i1 from "./tree.service";
import * as i2 from "./tree-selection.service";
/** @hidden @internal */
export class IgxTreeNavigationService {
    constructor(treeService, selectionService) {
        this.treeService = treeService;
        this.selectionService = selectionService;
        this._focusedNode = null;
        this._lastFocusedNode = null;
        this._activeNode = null;
        this._visibleChildren = [];
        this._invisibleChildren = new Set();
        this._disabledChildren = new Set();
        this._cacheChange = new Subject();
        this._cacheChange.subscribe(() => {
            this._visibleChildren =
                this.tree?.nodes ?
                    this.tree.nodes.filter(e => !(this._invisibleChildren.has(e) || this._disabledChildren.has(e))) :
                    [];
        });
    }
    register(tree) {
        this.tree = tree;
    }
    get focusedNode() {
        return this._focusedNode;
    }
    set focusedNode(value) {
        if (this._focusedNode === value) {
            return;
        }
        this._lastFocusedNode = this._focusedNode;
        if (this._lastFocusedNode) {
            this._lastFocusedNode.tabIndex = -1;
        }
        this._focusedNode = value;
        if (this._focusedNode !== null) {
            this._focusedNode.tabIndex = 0;
            this._focusedNode.header.nativeElement.focus();
        }
    }
    get activeNode() {
        return this._activeNode;
    }
    set activeNode(value) {
        if (this._activeNode === value) {
            return;
        }
        this._activeNode = value;
        this.tree.activeNodeChanged.emit(this._activeNode);
    }
    get visibleChildren() {
        return this._visibleChildren;
    }
    update_disabled_cache(node) {
        if (node.disabled) {
            this._disabledChildren.add(node);
        }
        else {
            this._disabledChildren.delete(node);
        }
        this._cacheChange.next();
    }
    init_invisible_cache() {
        this.tree.nodes.filter(e => e.level === 0).forEach(node => {
            this.update_visible_cache(node, node.expanded, false);
        });
        this._cacheChange.next();
    }
    update_visible_cache(node, expanded, shouldEmit = true) {
        if (expanded) {
            node._children.forEach(child => {
                this._invisibleChildren.delete(child);
                this.update_visible_cache(child, child.expanded, false);
            });
        }
        else {
            node.allChildren.forEach(c => this._invisibleChildren.add(c));
        }
        if (shouldEmit) {
            this._cacheChange.next();
        }
    }
    /**
     * Sets the node as focused (and active)
     *
     * @param node target node
     * @param isActive if true, sets the node as active
     */
    setFocusedAndActiveNode(node, isActive = true) {
        if (isActive) {
            this.activeNode = node;
        }
        this.focusedNode = node;
    }
    /** Handler for keydown events. Used in tree.component.ts */
    handleKeydown(event) {
        const key = event.key.toLowerCase();
        if (!this.focusedNode) {
            return;
        }
        if (!(NAVIGATION_KEYS.has(key) || key === '*')) {
            if (key === 'enter') {
                this.activeNode = this.focusedNode;
            }
            return;
        }
        event.preventDefault();
        if (event.repeat) {
            setTimeout(() => this.handleNavigation(event), 1);
        }
        else {
            this.handleNavigation(event);
        }
    }
    ngOnDestroy() {
        this._cacheChange.next();
        this._cacheChange.complete();
    }
    handleNavigation(event) {
        switch (event.key.toLowerCase()) {
            case 'home':
                this.setFocusedAndActiveNode(this.visibleChildren[0]);
                break;
            case 'end':
                this.setFocusedAndActiveNode(this.visibleChildren[this.visibleChildren.length - 1]);
                break;
            case 'arrowleft':
            case 'left':
                this.handleArrowLeft();
                break;
            case 'arrowright':
            case 'right':
                this.handleArrowRight();
                break;
            case 'arrowup':
            case 'up':
                this.handleUpDownArrow(true, event);
                break;
            case 'arrowdown':
            case 'down':
                this.handleUpDownArrow(false, event);
                break;
            case '*':
                this.handleAsterisk();
                break;
            case ' ':
            case 'spacebar':
            case 'space':
                this.handleSpace(event.shiftKey);
                break;
            default:
                return;
        }
    }
    handleArrowLeft() {
        if (this.focusedNode.expanded && !this.treeService.collapsingNodes.has(this.focusedNode) && this.focusedNode._children?.length) {
            this.activeNode = this.focusedNode;
            this.focusedNode.collapse();
        }
        else {
            const parentNode = this.focusedNode.parentNode;
            if (parentNode && !parentNode.disabled) {
                this.setFocusedAndActiveNode(parentNode);
            }
        }
    }
    handleArrowRight() {
        if (this.focusedNode._children.length > 0) {
            if (!this.focusedNode.expanded) {
                this.activeNode = this.focusedNode;
                this.focusedNode.expand();
            }
            else {
                if (this.treeService.collapsingNodes.has(this.focusedNode)) {
                    this.focusedNode.expand();
                    return;
                }
                const firstChild = this.focusedNode._children.find(node => !node.disabled);
                if (firstChild) {
                    this.setFocusedAndActiveNode(firstChild);
                }
            }
        }
    }
    handleUpDownArrow(isUp, event) {
        const next = this.getVisibleNode(this.focusedNode, isUp ? -1 : 1);
        if (next === this.focusedNode) {
            return;
        }
        if (event.ctrlKey) {
            this.setFocusedAndActiveNode(next, false);
        }
        else {
            this.setFocusedAndActiveNode(next);
        }
    }
    handleAsterisk() {
        const nodes = this.focusedNode.parentNode ? this.focusedNode.parentNode._children : this.tree.rootNodes;
        nodes?.forEach(node => {
            if (!node.disabled && (!node.expanded || this.treeService.collapsingNodes.has(node))) {
                node.expand();
            }
        });
    }
    handleSpace(shiftKey = false) {
        if (this.tree.selection === IgxTreeSelectionType.None) {
            return;
        }
        this.activeNode = this.focusedNode;
        if (shiftKey) {
            this.selectionService.selectMultipleNodes(this.focusedNode);
            return;
        }
        if (this.focusedNode.selected) {
            this.selectionService.deselectNode(this.focusedNode);
        }
        else {
            this.selectionService.selectNode(this.focusedNode);
        }
    }
    /** Gets the next visible node in the given direction - 1 -> next, -1 -> previous */
    getVisibleNode(node, dir = 1) {
        const nodeIndex = this.visibleChildren.indexOf(node);
        return this.visibleChildren[nodeIndex + dir] || node;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxTreeNavigationService, deps: [{ token: i1.IgxTreeService }, { token: i2.IgxTreeSelectionService }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxTreeNavigationService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxTreeNavigationService, decorators: [{
            type: Injectable
        }], ctorParameters: () => [{ type: i1.IgxTreeService }, { type: i2.IgxTreeSelectionService }] });
//# sourceMappingURL=data:application/json;base64,