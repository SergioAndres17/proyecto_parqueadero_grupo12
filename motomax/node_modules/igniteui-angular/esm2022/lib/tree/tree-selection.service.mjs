import { Injectable } from '@angular/core';
import { IgxTreeSelectionType } from './common';
import * as i0 from "@angular/core";
/** @hidden @internal */
export class IgxTreeSelectionService {
    constructor() {
        this.nodeSelection = new Set();
        this.indeterminateNodes = new Set();
    }
    register(tree) {
        this.tree = tree;
    }
    /** Select range from last selected node to the current specified node. */
    selectMultipleNodes(node, event) {
        if (!this.nodeSelection.size) {
            this.selectNode(node);
            return;
        }
        const lastSelectedNodeIndex = this.tree.nodes.toArray().indexOf(this.getSelectedNodes()[this.nodeSelection.size - 1]);
        const currentNodeIndex = this.tree.nodes.toArray().indexOf(node);
        const nodes = this.tree.nodes.toArray().slice(Math.min(currentNodeIndex, lastSelectedNodeIndex), Math.max(currentNodeIndex, lastSelectedNodeIndex) + 1);
        const added = nodes.filter(_node => !this.isNodeSelected(_node));
        const newSelection = this.getSelectedNodes().concat(added);
        this.emitNodeSelectionEvent(newSelection, added, [], event);
    }
    /** Select the specified node and emit event. */
    selectNode(node, event) {
        if (this.tree.selection === IgxTreeSelectionType.None) {
            return;
        }
        this.emitNodeSelectionEvent([...this.getSelectedNodes(), node], [node], [], event);
    }
    /** Deselect the specified node and emit event. */
    deselectNode(node, event) {
        const newSelection = this.getSelectedNodes().filter(r => r !== node);
        this.emitNodeSelectionEvent(newSelection, [], [node], event);
    }
    /** Clears node selection */
    clearNodesSelection() {
        this.nodeSelection.clear();
        this.indeterminateNodes.clear();
    }
    isNodeSelected(node) {
        return this.nodeSelection.has(node);
    }
    isNodeIndeterminate(node) {
        return this.indeterminateNodes.has(node);
    }
    /** Select specified nodes. No event is emitted. */
    selectNodesWithNoEvent(nodes, clearPrevSelection = false, shouldEmit = true) {
        if (this.tree && this.tree.selection === IgxTreeSelectionType.Cascading) {
            this.cascadeSelectNodesWithNoEvent(nodes, clearPrevSelection);
            return;
        }
        const oldSelection = this.getSelectedNodes();
        if (clearPrevSelection) {
            this.nodeSelection.clear();
        }
        nodes.forEach(node => this.nodeSelection.add(node));
        if (shouldEmit) {
            this.emitSelectedChangeEvent(oldSelection);
        }
    }
    /** Deselect specified nodes. No event is emitted. */
    deselectNodesWithNoEvent(nodes, shouldEmit = true) {
        const oldSelection = this.getSelectedNodes();
        if (!nodes) {
            this.nodeSelection.clear();
        }
        else if (this.tree && this.tree.selection === IgxTreeSelectionType.Cascading) {
            this.cascadeDeselectNodesWithNoEvent(nodes);
        }
        else {
            nodes.forEach(node => this.nodeSelection.delete(node));
        }
        if (shouldEmit) {
            this.emitSelectedChangeEvent(oldSelection);
        }
    }
    /** Called on `node.ngOnDestroy` to ensure state is correct after node is removed */
    ensureStateOnNodeDelete(node) {
        if (this.tree?.selection !== IgxTreeSelectionType.Cascading) {
            return;
        }
        requestAnimationFrame(() => {
            if (this.isNodeSelected(node)) {
                // node is destroyed, do not emit event
                this.deselectNodesWithNoEvent([node], false);
            }
            else {
                if (!node.parentNode) {
                    return;
                }
                const assitantLeafNode = node.parentNode?.allChildren.find(e => !e._children?.length);
                if (!assitantLeafNode) {
                    return;
                }
                this.retriggerNodeState(assitantLeafNode);
            }
        });
    }
    /** Retriggers a node's selection state */
    retriggerNodeState(node) {
        if (node.selected) {
            this.nodeSelection.delete(node);
            this.selectNodesWithNoEvent([node], false, false);
        }
        else {
            this.nodeSelection.add(node);
            this.deselectNodesWithNoEvent([node], false);
        }
    }
    /** Returns array of the selected nodes. */
    getSelectedNodes() {
        return this.nodeSelection.size ? Array.from(this.nodeSelection) : [];
    }
    /** Returns array of the nodes in indeterminate state. */
    getIndeterminateNodes() {
        return this.indeterminateNodes.size ? Array.from(this.indeterminateNodes) : [];
    }
    emitNodeSelectionEvent(newSelection, added, removed, event) {
        if (this.tree.selection === IgxTreeSelectionType.Cascading) {
            this.emitCascadeNodeSelectionEvent(newSelection, added, removed, event);
            return;
        }
        const currSelection = this.getSelectedNodes();
        if (this.areEqualCollections(currSelection, newSelection)) {
            return;
        }
        const args = {
            oldSelection: currSelection, newSelection,
            added, removed, event, cancel: false, owner: this.tree
        };
        this.tree.nodeSelection.emit(args);
        if (args.cancel) {
            return;
        }
        this.selectNodesWithNoEvent(args.newSelection, true);
    }
    areEqualCollections(first, second) {
        return first.length === second.length && new Set(first.concat(second)).size === first.length;
    }
    cascadeSelectNodesWithNoEvent(nodes, clearPrevSelection = false) {
        const oldSelection = this.getSelectedNodes();
        if (clearPrevSelection) {
            this.indeterminateNodes.clear();
            this.nodeSelection.clear();
            this.calculateNodesNewSelectionState({ added: nodes, removed: [] });
        }
        else {
            const newSelection = [...oldSelection, ...nodes];
            const args = { oldSelection, newSelection };
            // retrieve only the rows without their parents/children which has to be added to the selection
            this.populateAddRemoveArgs(args);
            this.calculateNodesNewSelectionState(args);
        }
        this.nodeSelection = new Set(this.nodesToBeSelected);
        this.indeterminateNodes = new Set(this.nodesToBeIndeterminate);
        this.emitSelectedChangeEvent(oldSelection);
    }
    cascadeDeselectNodesWithNoEvent(nodes) {
        const args = { added: [], removed: nodes };
        this.calculateNodesNewSelectionState(args);
        this.nodeSelection = new Set(this.nodesToBeSelected);
        this.indeterminateNodes = new Set(this.nodesToBeIndeterminate);
    }
    /**
     * populates the nodesToBeSelected and nodesToBeIndeterminate sets
     * with the nodes which will be eventually in selected/indeterminate state
     */
    calculateNodesNewSelectionState(args) {
        this.nodesToBeSelected = new Set(args.oldSelection ? args.oldSelection : this.getSelectedNodes());
        this.nodesToBeIndeterminate = new Set(this.getIndeterminateNodes());
        this.cascadeSelectionState(args.removed, false);
        this.cascadeSelectionState(args.added, true);
    }
    /** Ensures proper selection state for all predescessors and descendants during a selection event */
    cascadeSelectionState(nodes, selected) {
        if (!nodes || nodes.length === 0) {
            return;
        }
        if (nodes && nodes.length > 0) {
            const nodeCollection = this.getCascadingNodeCollection(nodes);
            nodeCollection.nodes.forEach(node => {
                if (selected) {
                    this.nodesToBeSelected.add(node);
                }
                else {
                    this.nodesToBeSelected.delete(node);
                }
                this.nodesToBeIndeterminate.delete(node);
            });
            Array.from(nodeCollection.parents).forEach((parent) => {
                this.handleParentSelectionState(parent);
            });
        }
    }
    emitCascadeNodeSelectionEvent(newSelection, added, removed, event) {
        const currSelection = this.getSelectedNodes();
        if (this.areEqualCollections(currSelection, newSelection)) {
            return;
        }
        const args = {
            oldSelection: currSelection, newSelection,
            added, removed, event, cancel: false, owner: this.tree
        };
        this.calculateNodesNewSelectionState(args);
        args.newSelection = Array.from(this.nodesToBeSelected);
        // retrieve nodes/parents/children which has been added/removed from the selection
        this.populateAddRemoveArgs(args);
        this.tree.nodeSelection.emit(args);
        if (args.cancel) {
            return;
        }
        // if args.newSelection hasn't been modified
        if (this.areEqualCollections(Array.from(this.nodesToBeSelected), args.newSelection)) {
            this.nodeSelection = new Set(this.nodesToBeSelected);
            this.indeterminateNodes = new Set(this.nodesToBeIndeterminate);
            this.emitSelectedChangeEvent(currSelection);
        }
        else {
            // select the nodes within the modified args.newSelection with no event
            this.cascadeSelectNodesWithNoEvent(args.newSelection, true);
        }
    }
    /**
     * recursively handle the selection state of the direct and indirect parents
     */
    handleParentSelectionState(node) {
        if (!node) {
            return;
        }
        this.handleNodeSelectionState(node);
        if (node.parentNode) {
            this.handleParentSelectionState(node.parentNode);
        }
    }
    /**
     * Handle the selection state of a given node based the selection states of its direct children
     */
    handleNodeSelectionState(node) {
        const nodesArray = (node && node._children) ? node._children.toArray() : [];
        if (nodesArray.length) {
            if (nodesArray.every(n => this.nodesToBeSelected.has(n))) {
                this.nodesToBeSelected.add(node);
                this.nodesToBeIndeterminate.delete(node);
            }
            else if (nodesArray.some(n => this.nodesToBeSelected.has(n) || this.nodesToBeIndeterminate.has(n))) {
                this.nodesToBeIndeterminate.add(node);
                this.nodesToBeSelected.delete(node);
            }
            else {
                this.nodesToBeIndeterminate.delete(node);
                this.nodesToBeSelected.delete(node);
            }
        }
        else {
            // if the children of the node has been deleted and the node was selected do not change its state
            if (this.isNodeSelected(node)) {
                this.nodesToBeSelected.add(node);
            }
            else {
                this.nodesToBeSelected.delete(node);
            }
            this.nodesToBeIndeterminate.delete(node);
        }
    }
    /**
     * Get a collection of all nodes affected by the change event
     *
     * @param nodesToBeProcessed set of the nodes to be selected/deselected
     * @returns a collection of all affected nodes and all their parents
     */
    getCascadingNodeCollection(nodes) {
        const collection = {
            parents: new Set(),
            nodes: new Set(nodes)
        };
        Array.from(collection.nodes).forEach((node) => {
            const nodeAndAllChildren = node.allChildren?.toArray() || [];
            nodeAndAllChildren.forEach(n => {
                collection.nodes.add(n);
            });
            if (node && node.parentNode) {
                collection.parents.add(node.parentNode);
            }
        });
        return collection;
    }
    /**
     * retrieve the nodes which should be added/removed to/from the old selection
     */
    populateAddRemoveArgs(args) {
        args.removed = args.oldSelection.filter(x => args.newSelection.indexOf(x) < 0);
        args.added = args.newSelection.filter(x => args.oldSelection.indexOf(x) < 0);
    }
    /** Emits the `selectedChange` event for each node affected by the selection */
    emitSelectedChangeEvent(oldSelection) {
        this.getSelectedNodes().forEach(n => {
            if (oldSelection.indexOf(n) < 0) {
                n.selectedChange.emit(true);
            }
        });
        oldSelection.forEach(n => {
            if (!this.nodeSelection.has(n)) {
                n.selectedChange.emit(false);
            }
        });
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxTreeSelectionService, deps: [], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxTreeSelectionService }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "18.2.4", ngImport: i0, type: IgxTreeSelectionService, decorators: [{
            type: Injectable
        }] });
//# sourceMappingURL=data:application/json;base64,